(function(global) {

  var defined = {};

  // indexOf polyfill for IE8
  var indexOf = Array.prototype.indexOf || function(item) {
    for (var i = 0, l = this.length; i < l; i++)
      if (this[i] === item)
        return i;
    return -1;
  }

  function dedupe(deps) {
    var newDeps = [];
    for (var i = 0, l = deps.length; i < l; i++)
      if (indexOf.call(newDeps, deps[i]) == -1)
        newDeps.push(deps[i])
    return newDeps;
  }

  function register(name, deps, declare, execute) {
    if (typeof name != 'string')
      throw "System.register provided no module name";

    var entry;

    // dynamic
    if (typeof declare == 'boolean') {
      entry = {
        declarative: false,
        deps: deps,
        execute: execute,
        executingRequire: declare
      };
    }
    else {
      // ES6 declarative
      entry = {
        declarative: true,
        deps: deps,
        declare: declare
      };
    }

    entry.name = name;

    // we never overwrite an existing define
    if (!(name in defined))
      defined[name] = entry; 

    entry.deps = dedupe(entry.deps);

    // we have to normalize dependencies
    // (assume dependencies are normalized for now)
    // entry.normalizedDeps = entry.deps.map(normalize);
    entry.normalizedDeps = entry.deps;
  }

  function buildGroups(entry, groups) {
    groups[entry.groupIndex] = groups[entry.groupIndex] || [];

    if (indexOf.call(groups[entry.groupIndex], entry) != -1)
      return;

    groups[entry.groupIndex].push(entry);

    for (var i = 0, l = entry.normalizedDeps.length; i < l; i++) {
      var depName = entry.normalizedDeps[i];
      var depEntry = defined[depName];

      // not in the registry means already linked / ES6
      if (!depEntry || depEntry.evaluated)
        continue;

      // now we know the entry is in our unlinked linkage group
      var depGroupIndex = entry.groupIndex + (depEntry.declarative != entry.declarative);

      // the group index of an entry is always the maximum
      if (depEntry.groupIndex === undefined || depEntry.groupIndex < depGroupIndex) {

        // if already in a group, remove from the old group
        if (depEntry.groupIndex !== undefined) {
          groups[depEntry.groupIndex].splice(indexOf.call(groups[depEntry.groupIndex], depEntry), 1);

          // if the old group is empty, then we have a mixed depndency cycle
          if (groups[depEntry.groupIndex].length == 0)
            throw new TypeError("Mixed dependency cycle detected");
        }

        depEntry.groupIndex = depGroupIndex;
      }

      buildGroups(depEntry, groups);
    }
  }

  function link(name) {
    var startEntry = defined[name];

    startEntry.groupIndex = 0;

    var groups = [];

    buildGroups(startEntry, groups);

    var curGroupDeclarative = !!startEntry.declarative == groups.length % 2;
    for (var i = groups.length - 1; i >= 0; i--) {
      var group = groups[i];
      for (var j = 0; j < group.length; j++) {
        var entry = group[j];

        // link each group
        if (curGroupDeclarative)
          linkDeclarativeModule(entry);
        else
          linkDynamicModule(entry);
      }
      curGroupDeclarative = !curGroupDeclarative; 
    }
  }

  // module binding records
  var moduleRecords = {};
  function getOrCreateModuleRecord(name) {
    return moduleRecords[name] || (moduleRecords[name] = {
      name: name,
      dependencies: [],
      exports: {}, // start from an empty module and extend
      importers: []
    })
  }

  function linkDeclarativeModule(entry) {
    // only link if already not already started linking (stops at circular)
    if (entry.module)
      return;

    var module = entry.module = getOrCreateModuleRecord(entry.name);
    var exports = entry.module.exports;

    var declaration = entry.declare.call(global, function(name, value) {
      module.locked = true;
      exports[name] = value;

      for (var i = 0, l = module.importers.length; i < l; i++) {
        var importerModule = module.importers[i];
        if (!importerModule.locked) {
          var importerIndex = indexOf.call(importerModule.dependencies, module);
          importerModule.setters[importerIndex](exports);
        }
      }

      module.locked = false;
      return value;
    });

    module.setters = declaration.setters;
    module.execute = declaration.execute;

    if (!module.setters || !module.execute)
      throw new TypeError("Invalid System.register form for " + entry.name);

    // now link all the module dependencies
    for (var i = 0, l = entry.normalizedDeps.length; i < l; i++) {
      var depName = entry.normalizedDeps[i];
      var depEntry = defined[depName];
      var depModule = moduleRecords[depName];

      // work out how to set depExports based on scenarios...
      var depExports;

      if (depModule) {
        depExports = depModule.exports;
      }
      else if (depEntry && !depEntry.declarative) {
        if (depEntry.module.exports && depEntry.module.exports.__esModule)
          depExports = depEntry.module.exports;
        else
          depExports = { 'default': depEntry.module.exports, __useDefault: true };
      }
      // in the module registry
      else if (!depEntry) {
        depExports = load(depName);
      }
      // we have an entry -> link
      else {
        linkDeclarativeModule(depEntry);
        depModule = depEntry.module;
        depExports = depModule.exports;
      }

      // only declarative modules have dynamic bindings
      if (depModule && depModule.importers) {
        depModule.importers.push(module);
        module.dependencies.push(depModule);
      }
      else
        module.dependencies.push(null);

      // run the setter for this dependency
      if (module.setters[i])
        module.setters[i](depExports);
    }
  }

  // An analog to loader.get covering execution of all three layers (real declarative, simulated declarative, simulated dynamic)
  function getModule(name) {
    var exports;
    var entry = defined[name];

    if (!entry) {
      exports = load(name);
      if (!exports)
        throw new Error("Unable to load dependency " + name + ".");
    }

    else {
      if (entry.declarative)
        ensureEvaluated(name, []);

      else if (!entry.evaluated)
        linkDynamicModule(entry);

      exports = entry.module.exports;
    }

    if ((!entry || entry.declarative) && exports && exports.__useDefault)
      return exports['default'];

    return exports;
  }

  function linkDynamicModule(entry) {
    if (entry.module)
      return;

    var exports = {};

    var module = entry.module = { exports: exports, id: entry.name };

    // AMD requires execute the tree first
    if (!entry.executingRequire) {
      for (var i = 0, l = entry.normalizedDeps.length; i < l; i++) {
        var depName = entry.normalizedDeps[i];
        var depEntry = defined[depName];
        if (depEntry)
          linkDynamicModule(depEntry);
      }
    }

    // now execute
    entry.evaluated = true;
    var output = entry.execute.call(global, function(name) {
      for (var i = 0, l = entry.deps.length; i < l; i++) {
        if (entry.deps[i] != name)
          continue;
        return getModule(entry.normalizedDeps[i]);
      }
      throw new TypeError('Module ' + name + ' not declared as a dependency.');
    }, exports, module);

    if (output)
      module.exports = output;
  }

  /*
   * Given a module, and the list of modules for this current branch,
   *  ensure that each of the dependencies of this module is evaluated
   *  (unless one is a circular dependency already in the list of seen
   *  modules, in which case we execute it)
   *
   * Then we evaluate the module itself depth-first left to right 
   * execution to match ES6 modules
   */
  function ensureEvaluated(moduleName, seen) {
    var entry = defined[moduleName];

    // if already seen, that means it's an already-evaluated non circular dependency
    if (!entry || entry.evaluated || !entry.declarative)
      return;

    // this only applies to declarative modules which late-execute

    seen.push(moduleName);

    for (var i = 0, l = entry.normalizedDeps.length; i < l; i++) {
      var depName = entry.normalizedDeps[i];
      if (indexOf.call(seen, depName) == -1) {
        if (!defined[depName])
          load(depName);
        else
          ensureEvaluated(depName, seen);
      }
    }

    if (entry.evaluated)
      return;

    entry.evaluated = true;
    entry.module.execute.call(global);
  }

  // magical execution function
  var modules = {};
  function load(name) {
    if (modules[name])
      return modules[name];

    var entry = defined[name];

    // first we check if this module has already been defined in the registry
    if (!entry)
      throw "Module " + name + " not present.";

    // recursively ensure that the module and all its 
    // dependencies are linked (with dependency group handling)
    link(name);

    // now handle dependency execution in correct order
    ensureEvaluated(name, []);

    // remove from the registry
    defined[name] = undefined;

    var module = entry.module.exports;

    if (!module || !entry.declarative && module.__esModule !== true)
      module = { 'default': module, __useDefault: true };

    // return the defined module object
    return modules[name] = module;
  };

  return function(mains, declare) {

    var System;
    var System = {
      register: register, 
      get: load, 
      set: function(name, module) {
        modules[name] = module; 
      },
      newModule: function(module) {
        return module;
      },
      global: global 
    };
    System.set('@empty', {});

    declare(System);

    for (var i = 0; i < mains.length; i++)
      load(mains[i]);
  }

})(typeof window != 'undefined' ? window : global)
/* (['mainModule'], function(System) {
  System.register(...);
}); */

(['promo-manager/layout-view/main'], function(System) {


System.register("npm:core-js@0.9.13/library/modules/$.fw", [], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  module.exports = function($) {
    $.FW = false;
    $.path = $.core;
    return $;
  };
  global.define = __define;
  return module.exports;
});

System.register("npm:babel-runtime@5.4.3/helpers/class-call-check", [], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  "use strict";
  exports["default"] = function(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  };
  exports.__esModule = true;
  global.define = __define;
  return module.exports;
});

System.register("npm:gl-matrix@2.3.1/src/gl-matrix/common", [], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  var glMatrix = {};
  glMatrix.EPSILON = 0.000001;
  glMatrix.ARRAY_TYPE = (typeof Float32Array !== 'undefined') ? Float32Array : Array;
  glMatrix.RANDOM = Math.random;
  glMatrix.setMatrixArrayType = function(type) {
    GLMAT_ARRAY_TYPE = type;
  };
  var degree = Math.PI / 180;
  glMatrix.toRadian = function(a) {
    return a * degree;
  };
  module.exports = glMatrix;
  global.define = __define;
  return module.exports;
});

System.register("npm:gl-matrix@2.3.1/src/gl-matrix/mat2", ["npm:gl-matrix@2.3.1/src/gl-matrix/common"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  var glMatrix = require("npm:gl-matrix@2.3.1/src/gl-matrix/common");
  var mat2 = {};
  mat2.create = function() {
    var out = new glMatrix.ARRAY_TYPE(4);
    out[0] = 1;
    out[1] = 0;
    out[2] = 0;
    out[3] = 1;
    return out;
  };
  mat2.clone = function(a) {
    var out = new glMatrix.ARRAY_TYPE(4);
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    return out;
  };
  mat2.copy = function(out, a) {
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    return out;
  };
  mat2.identity = function(out) {
    out[0] = 1;
    out[1] = 0;
    out[2] = 0;
    out[3] = 1;
    return out;
  };
  mat2.transpose = function(out, a) {
    if (out === a) {
      var a1 = a[1];
      out[1] = a[2];
      out[2] = a1;
    } else {
      out[0] = a[0];
      out[1] = a[2];
      out[2] = a[1];
      out[3] = a[3];
    }
    return out;
  };
  mat2.invert = function(out, a) {
    var a0 = a[0],
        a1 = a[1],
        a2 = a[2],
        a3 = a[3],
        det = a0 * a3 - a2 * a1;
    if (!det) {
      return null;
    }
    det = 1.0 / det;
    out[0] = a3 * det;
    out[1] = -a1 * det;
    out[2] = -a2 * det;
    out[3] = a0 * det;
    return out;
  };
  mat2.adjoint = function(out, a) {
    var a0 = a[0];
    out[0] = a[3];
    out[1] = -a[1];
    out[2] = -a[2];
    out[3] = a0;
    return out;
  };
  mat2.determinant = function(a) {
    return a[0] * a[3] - a[2] * a[1];
  };
  mat2.multiply = function(out, a, b) {
    var a0 = a[0],
        a1 = a[1],
        a2 = a[2],
        a3 = a[3];
    var b0 = b[0],
        b1 = b[1],
        b2 = b[2],
        b3 = b[3];
    out[0] = a0 * b0 + a2 * b1;
    out[1] = a1 * b0 + a3 * b1;
    out[2] = a0 * b2 + a2 * b3;
    out[3] = a1 * b2 + a3 * b3;
    return out;
  };
  mat2.mul = mat2.multiply;
  mat2.rotate = function(out, a, rad) {
    var a0 = a[0],
        a1 = a[1],
        a2 = a[2],
        a3 = a[3],
        s = Math.sin(rad),
        c = Math.cos(rad);
    out[0] = a0 * c + a2 * s;
    out[1] = a1 * c + a3 * s;
    out[2] = a0 * -s + a2 * c;
    out[3] = a1 * -s + a3 * c;
    return out;
  };
  mat2.scale = function(out, a, v) {
    var a0 = a[0],
        a1 = a[1],
        a2 = a[2],
        a3 = a[3],
        v0 = v[0],
        v1 = v[1];
    out[0] = a0 * v0;
    out[1] = a1 * v0;
    out[2] = a2 * v1;
    out[3] = a3 * v1;
    return out;
  };
  mat2.fromRotation = function(out, rad) {
    var s = Math.sin(rad),
        c = Math.cos(rad);
    out[0] = c;
    out[1] = s;
    out[2] = -s;
    out[3] = c;
    return out;
  };
  mat2.fromScaling = function(out, v) {
    out[0] = v[0];
    out[1] = 0;
    out[2] = 0;
    out[3] = v[1];
    return out;
  };
  mat2.str = function(a) {
    return 'mat2(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';
  };
  mat2.frob = function(a) {
    return (Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2)));
  };
  mat2.LDU = function(L, D, U, a) {
    L[2] = a[2] / a[0];
    U[0] = a[0];
    U[1] = a[1];
    U[3] = a[3] - L[2] * U[1];
    return [L, D, U];
  };
  module.exports = mat2;
  global.define = __define;
  return module.exports;
});

System.register("npm:gl-matrix@2.3.1/src/gl-matrix/mat2d", ["npm:gl-matrix@2.3.1/src/gl-matrix/common"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  var glMatrix = require("npm:gl-matrix@2.3.1/src/gl-matrix/common");
  var mat2d = {};
  mat2d.create = function() {
    var out = new glMatrix.ARRAY_TYPE(6);
    out[0] = 1;
    out[1] = 0;
    out[2] = 0;
    out[3] = 1;
    out[4] = 0;
    out[5] = 0;
    return out;
  };
  mat2d.clone = function(a) {
    var out = new glMatrix.ARRAY_TYPE(6);
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    out[4] = a[4];
    out[5] = a[5];
    return out;
  };
  mat2d.copy = function(out, a) {
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    out[4] = a[4];
    out[5] = a[5];
    return out;
  };
  mat2d.identity = function(out) {
    out[0] = 1;
    out[1] = 0;
    out[2] = 0;
    out[3] = 1;
    out[4] = 0;
    out[5] = 0;
    return out;
  };
  mat2d.invert = function(out, a) {
    var aa = a[0],
        ab = a[1],
        ac = a[2],
        ad = a[3],
        atx = a[4],
        aty = a[5];
    var det = aa * ad - ab * ac;
    if (!det) {
      return null;
    }
    det = 1.0 / det;
    out[0] = ad * det;
    out[1] = -ab * det;
    out[2] = -ac * det;
    out[3] = aa * det;
    out[4] = (ac * aty - ad * atx) * det;
    out[5] = (ab * atx - aa * aty) * det;
    return out;
  };
  mat2d.determinant = function(a) {
    return a[0] * a[3] - a[1] * a[2];
  };
  mat2d.multiply = function(out, a, b) {
    var a0 = a[0],
        a1 = a[1],
        a2 = a[2],
        a3 = a[3],
        a4 = a[4],
        a5 = a[5],
        b0 = b[0],
        b1 = b[1],
        b2 = b[2],
        b3 = b[3],
        b4 = b[4],
        b5 = b[5];
    out[0] = a0 * b0 + a2 * b1;
    out[1] = a1 * b0 + a3 * b1;
    out[2] = a0 * b2 + a2 * b3;
    out[3] = a1 * b2 + a3 * b3;
    out[4] = a0 * b4 + a2 * b5 + a4;
    out[5] = a1 * b4 + a3 * b5 + a5;
    return out;
  };
  mat2d.mul = mat2d.multiply;
  mat2d.rotate = function(out, a, rad) {
    var a0 = a[0],
        a1 = a[1],
        a2 = a[2],
        a3 = a[3],
        a4 = a[4],
        a5 = a[5],
        s = Math.sin(rad),
        c = Math.cos(rad);
    out[0] = a0 * c + a2 * s;
    out[1] = a1 * c + a3 * s;
    out[2] = a0 * -s + a2 * c;
    out[3] = a1 * -s + a3 * c;
    out[4] = a4;
    out[5] = a5;
    return out;
  };
  mat2d.scale = function(out, a, v) {
    var a0 = a[0],
        a1 = a[1],
        a2 = a[2],
        a3 = a[3],
        a4 = a[4],
        a5 = a[5],
        v0 = v[0],
        v1 = v[1];
    out[0] = a0 * v0;
    out[1] = a1 * v0;
    out[2] = a2 * v1;
    out[3] = a3 * v1;
    out[4] = a4;
    out[5] = a5;
    return out;
  };
  mat2d.translate = function(out, a, v) {
    var a0 = a[0],
        a1 = a[1],
        a2 = a[2],
        a3 = a[3],
        a4 = a[4],
        a5 = a[5],
        v0 = v[0],
        v1 = v[1];
    out[0] = a0;
    out[1] = a1;
    out[2] = a2;
    out[3] = a3;
    out[4] = a0 * v0 + a2 * v1 + a4;
    out[5] = a1 * v0 + a3 * v1 + a5;
    return out;
  };
  mat2d.fromRotation = function(out, rad) {
    var s = Math.sin(rad),
        c = Math.cos(rad);
    out[0] = c;
    out[1] = s;
    out[2] = -s;
    out[3] = c;
    out[4] = 0;
    out[5] = 0;
    return out;
  };
  mat2d.fromScaling = function(out, v) {
    out[0] = v[0];
    out[1] = 0;
    out[2] = 0;
    out[3] = v[1];
    out[4] = 0;
    out[5] = 0;
    return out;
  };
  mat2d.fromTranslation = function(out, v) {
    out[0] = 1;
    out[1] = 0;
    out[2] = 0;
    out[3] = 1;
    out[4] = v[0];
    out[5] = v[1];
    return out;
  };
  mat2d.str = function(a) {
    return 'mat2d(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' + a[4] + ', ' + a[5] + ')';
  };
  mat2d.frob = function(a) {
    return (Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + 1));
  };
  module.exports = mat2d;
  global.define = __define;
  return module.exports;
});

System.register("npm:gl-matrix@2.3.1/src/gl-matrix/mat3", ["npm:gl-matrix@2.3.1/src/gl-matrix/common"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  var glMatrix = require("npm:gl-matrix@2.3.1/src/gl-matrix/common");
  var mat3 = {};
  mat3.create = function() {
    var out = new glMatrix.ARRAY_TYPE(9);
    out[0] = 1;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 1;
    out[5] = 0;
    out[6] = 0;
    out[7] = 0;
    out[8] = 1;
    return out;
  };
  mat3.fromMat4 = function(out, a) {
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[4];
    out[4] = a[5];
    out[5] = a[6];
    out[6] = a[8];
    out[7] = a[9];
    out[8] = a[10];
    return out;
  };
  mat3.clone = function(a) {
    var out = new glMatrix.ARRAY_TYPE(9);
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    out[4] = a[4];
    out[5] = a[5];
    out[6] = a[6];
    out[7] = a[7];
    out[8] = a[8];
    return out;
  };
  mat3.copy = function(out, a) {
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    out[4] = a[4];
    out[5] = a[5];
    out[6] = a[6];
    out[7] = a[7];
    out[8] = a[8];
    return out;
  };
  mat3.identity = function(out) {
    out[0] = 1;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 1;
    out[5] = 0;
    out[6] = 0;
    out[7] = 0;
    out[8] = 1;
    return out;
  };
  mat3.transpose = function(out, a) {
    if (out === a) {
      var a01 = a[1],
          a02 = a[2],
          a12 = a[5];
      out[1] = a[3];
      out[2] = a[6];
      out[3] = a01;
      out[5] = a[7];
      out[6] = a02;
      out[7] = a12;
    } else {
      out[0] = a[0];
      out[1] = a[3];
      out[2] = a[6];
      out[3] = a[1];
      out[4] = a[4];
      out[5] = a[7];
      out[6] = a[2];
      out[7] = a[5];
      out[8] = a[8];
    }
    return out;
  };
  mat3.invert = function(out, a) {
    var a00 = a[0],
        a01 = a[1],
        a02 = a[2],
        a10 = a[3],
        a11 = a[4],
        a12 = a[5],
        a20 = a[6],
        a21 = a[7],
        a22 = a[8],
        b01 = a22 * a11 - a12 * a21,
        b11 = -a22 * a10 + a12 * a20,
        b21 = a21 * a10 - a11 * a20,
        det = a00 * b01 + a01 * b11 + a02 * b21;
    if (!det) {
      return null;
    }
    det = 1.0 / det;
    out[0] = b01 * det;
    out[1] = (-a22 * a01 + a02 * a21) * det;
    out[2] = (a12 * a01 - a02 * a11) * det;
    out[3] = b11 * det;
    out[4] = (a22 * a00 - a02 * a20) * det;
    out[5] = (-a12 * a00 + a02 * a10) * det;
    out[6] = b21 * det;
    out[7] = (-a21 * a00 + a01 * a20) * det;
    out[8] = (a11 * a00 - a01 * a10) * det;
    return out;
  };
  mat3.adjoint = function(out, a) {
    var a00 = a[0],
        a01 = a[1],
        a02 = a[2],
        a10 = a[3],
        a11 = a[4],
        a12 = a[5],
        a20 = a[6],
        a21 = a[7],
        a22 = a[8];
    out[0] = (a11 * a22 - a12 * a21);
    out[1] = (a02 * a21 - a01 * a22);
    out[2] = (a01 * a12 - a02 * a11);
    out[3] = (a12 * a20 - a10 * a22);
    out[4] = (a00 * a22 - a02 * a20);
    out[5] = (a02 * a10 - a00 * a12);
    out[6] = (a10 * a21 - a11 * a20);
    out[7] = (a01 * a20 - a00 * a21);
    out[8] = (a00 * a11 - a01 * a10);
    return out;
  };
  mat3.determinant = function(a) {
    var a00 = a[0],
        a01 = a[1],
        a02 = a[2],
        a10 = a[3],
        a11 = a[4],
        a12 = a[5],
        a20 = a[6],
        a21 = a[7],
        a22 = a[8];
    return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);
  };
  mat3.multiply = function(out, a, b) {
    var a00 = a[0],
        a01 = a[1],
        a02 = a[2],
        a10 = a[3],
        a11 = a[4],
        a12 = a[5],
        a20 = a[6],
        a21 = a[7],
        a22 = a[8],
        b00 = b[0],
        b01 = b[1],
        b02 = b[2],
        b10 = b[3],
        b11 = b[4],
        b12 = b[5],
        b20 = b[6],
        b21 = b[7],
        b22 = b[8];
    out[0] = b00 * a00 + b01 * a10 + b02 * a20;
    out[1] = b00 * a01 + b01 * a11 + b02 * a21;
    out[2] = b00 * a02 + b01 * a12 + b02 * a22;
    out[3] = b10 * a00 + b11 * a10 + b12 * a20;
    out[4] = b10 * a01 + b11 * a11 + b12 * a21;
    out[5] = b10 * a02 + b11 * a12 + b12 * a22;
    out[6] = b20 * a00 + b21 * a10 + b22 * a20;
    out[7] = b20 * a01 + b21 * a11 + b22 * a21;
    out[8] = b20 * a02 + b21 * a12 + b22 * a22;
    return out;
  };
  mat3.mul = mat3.multiply;
  mat3.translate = function(out, a, v) {
    var a00 = a[0],
        a01 = a[1],
        a02 = a[2],
        a10 = a[3],
        a11 = a[4],
        a12 = a[5],
        a20 = a[6],
        a21 = a[7],
        a22 = a[8],
        x = v[0],
        y = v[1];
    out[0] = a00;
    out[1] = a01;
    out[2] = a02;
    out[3] = a10;
    out[4] = a11;
    out[5] = a12;
    out[6] = x * a00 + y * a10 + a20;
    out[7] = x * a01 + y * a11 + a21;
    out[8] = x * a02 + y * a12 + a22;
    return out;
  };
  mat3.rotate = function(out, a, rad) {
    var a00 = a[0],
        a01 = a[1],
        a02 = a[2],
        a10 = a[3],
        a11 = a[4],
        a12 = a[5],
        a20 = a[6],
        a21 = a[7],
        a22 = a[8],
        s = Math.sin(rad),
        c = Math.cos(rad);
    out[0] = c * a00 + s * a10;
    out[1] = c * a01 + s * a11;
    out[2] = c * a02 + s * a12;
    out[3] = c * a10 - s * a00;
    out[4] = c * a11 - s * a01;
    out[5] = c * a12 - s * a02;
    out[6] = a20;
    out[7] = a21;
    out[8] = a22;
    return out;
  };
  mat3.scale = function(out, a, v) {
    var x = v[0],
        y = v[1];
    out[0] = x * a[0];
    out[1] = x * a[1];
    out[2] = x * a[2];
    out[3] = y * a[3];
    out[4] = y * a[4];
    out[5] = y * a[5];
    out[6] = a[6];
    out[7] = a[7];
    out[8] = a[8];
    return out;
  };
  mat3.fromTranslation = function(out, v) {
    out[0] = 1;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 1;
    out[5] = 0;
    out[6] = v[0];
    out[7] = v[1];
    out[8] = 1;
    return out;
  };
  mat3.fromRotation = function(out, rad) {
    var s = Math.sin(rad),
        c = Math.cos(rad);
    out[0] = c;
    out[1] = s;
    out[2] = 0;
    out[3] = -s;
    out[4] = c;
    out[5] = 0;
    out[6] = 0;
    out[7] = 0;
    out[8] = 1;
    return out;
  };
  mat3.fromScaling = function(out, v) {
    out[0] = v[0];
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = v[1];
    out[5] = 0;
    out[6] = 0;
    out[7] = 0;
    out[8] = 1;
    return out;
  };
  mat3.fromMat2d = function(out, a) {
    out[0] = a[0];
    out[1] = a[1];
    out[2] = 0;
    out[3] = a[2];
    out[4] = a[3];
    out[5] = 0;
    out[6] = a[4];
    out[7] = a[5];
    out[8] = 1;
    return out;
  };
  mat3.fromQuat = function(out, q) {
    var x = q[0],
        y = q[1],
        z = q[2],
        w = q[3],
        x2 = x + x,
        y2 = y + y,
        z2 = z + z,
        xx = x * x2,
        yx = y * x2,
        yy = y * y2,
        zx = z * x2,
        zy = z * y2,
        zz = z * z2,
        wx = w * x2,
        wy = w * y2,
        wz = w * z2;
    out[0] = 1 - yy - zz;
    out[3] = yx - wz;
    out[6] = zx + wy;
    out[1] = yx + wz;
    out[4] = 1 - xx - zz;
    out[7] = zy - wx;
    out[2] = zx - wy;
    out[5] = zy + wx;
    out[8] = 1 - xx - yy;
    return out;
  };
  mat3.normalFromMat4 = function(out, a) {
    var a00 = a[0],
        a01 = a[1],
        a02 = a[2],
        a03 = a[3],
        a10 = a[4],
        a11 = a[5],
        a12 = a[6],
        a13 = a[7],
        a20 = a[8],
        a21 = a[9],
        a22 = a[10],
        a23 = a[11],
        a30 = a[12],
        a31 = a[13],
        a32 = a[14],
        a33 = a[15],
        b00 = a00 * a11 - a01 * a10,
        b01 = a00 * a12 - a02 * a10,
        b02 = a00 * a13 - a03 * a10,
        b03 = a01 * a12 - a02 * a11,
        b04 = a01 * a13 - a03 * a11,
        b05 = a02 * a13 - a03 * a12,
        b06 = a20 * a31 - a21 * a30,
        b07 = a20 * a32 - a22 * a30,
        b08 = a20 * a33 - a23 * a30,
        b09 = a21 * a32 - a22 * a31,
        b10 = a21 * a33 - a23 * a31,
        b11 = a22 * a33 - a23 * a32,
        det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
    if (!det) {
      return null;
    }
    det = 1.0 / det;
    out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;
    out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;
    out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;
    out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;
    out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;
    out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;
    out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;
    out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;
    out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;
    return out;
  };
  mat3.str = function(a) {
    return 'mat3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' + a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ', ' + a[8] + ')';
  };
  mat3.frob = function(a) {
    return (Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2)));
  };
  module.exports = mat3;
  global.define = __define;
  return module.exports;
});

System.register("npm:gl-matrix@2.3.1/src/gl-matrix/mat4", ["npm:gl-matrix@2.3.1/src/gl-matrix/common"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  var glMatrix = require("npm:gl-matrix@2.3.1/src/gl-matrix/common");
  var mat4 = {};
  mat4.create = function() {
    var out = new glMatrix.ARRAY_TYPE(16);
    out[0] = 1;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = 1;
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[10] = 1;
    out[11] = 0;
    out[12] = 0;
    out[13] = 0;
    out[14] = 0;
    out[15] = 1;
    return out;
  };
  mat4.clone = function(a) {
    var out = new glMatrix.ARRAY_TYPE(16);
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    out[4] = a[4];
    out[5] = a[5];
    out[6] = a[6];
    out[7] = a[7];
    out[8] = a[8];
    out[9] = a[9];
    out[10] = a[10];
    out[11] = a[11];
    out[12] = a[12];
    out[13] = a[13];
    out[14] = a[14];
    out[15] = a[15];
    return out;
  };
  mat4.copy = function(out, a) {
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    out[4] = a[4];
    out[5] = a[5];
    out[6] = a[6];
    out[7] = a[7];
    out[8] = a[8];
    out[9] = a[9];
    out[10] = a[10];
    out[11] = a[11];
    out[12] = a[12];
    out[13] = a[13];
    out[14] = a[14];
    out[15] = a[15];
    return out;
  };
  mat4.identity = function(out) {
    out[0] = 1;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = 1;
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[10] = 1;
    out[11] = 0;
    out[12] = 0;
    out[13] = 0;
    out[14] = 0;
    out[15] = 1;
    return out;
  };
  mat4.transpose = function(out, a) {
    if (out === a) {
      var a01 = a[1],
          a02 = a[2],
          a03 = a[3],
          a12 = a[6],
          a13 = a[7],
          a23 = a[11];
      out[1] = a[4];
      out[2] = a[8];
      out[3] = a[12];
      out[4] = a01;
      out[6] = a[9];
      out[7] = a[13];
      out[8] = a02;
      out[9] = a12;
      out[11] = a[14];
      out[12] = a03;
      out[13] = a13;
      out[14] = a23;
    } else {
      out[0] = a[0];
      out[1] = a[4];
      out[2] = a[8];
      out[3] = a[12];
      out[4] = a[1];
      out[5] = a[5];
      out[6] = a[9];
      out[7] = a[13];
      out[8] = a[2];
      out[9] = a[6];
      out[10] = a[10];
      out[11] = a[14];
      out[12] = a[3];
      out[13] = a[7];
      out[14] = a[11];
      out[15] = a[15];
    }
    return out;
  };
  mat4.invert = function(out, a) {
    var a00 = a[0],
        a01 = a[1],
        a02 = a[2],
        a03 = a[3],
        a10 = a[4],
        a11 = a[5],
        a12 = a[6],
        a13 = a[7],
        a20 = a[8],
        a21 = a[9],
        a22 = a[10],
        a23 = a[11],
        a30 = a[12],
        a31 = a[13],
        a32 = a[14],
        a33 = a[15],
        b00 = a00 * a11 - a01 * a10,
        b01 = a00 * a12 - a02 * a10,
        b02 = a00 * a13 - a03 * a10,
        b03 = a01 * a12 - a02 * a11,
        b04 = a01 * a13 - a03 * a11,
        b05 = a02 * a13 - a03 * a12,
        b06 = a20 * a31 - a21 * a30,
        b07 = a20 * a32 - a22 * a30,
        b08 = a20 * a33 - a23 * a30,
        b09 = a21 * a32 - a22 * a31,
        b10 = a21 * a33 - a23 * a31,
        b11 = a22 * a33 - a23 * a32,
        det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
    if (!det) {
      return null;
    }
    det = 1.0 / det;
    out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;
    out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;
    out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;
    out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;
    out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;
    out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;
    out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;
    out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;
    out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;
    out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;
    out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;
    out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;
    out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;
    out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;
    out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;
    out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;
    return out;
  };
  mat4.adjoint = function(out, a) {
    var a00 = a[0],
        a01 = a[1],
        a02 = a[2],
        a03 = a[3],
        a10 = a[4],
        a11 = a[5],
        a12 = a[6],
        a13 = a[7],
        a20 = a[8],
        a21 = a[9],
        a22 = a[10],
        a23 = a[11],
        a30 = a[12],
        a31 = a[13],
        a32 = a[14],
        a33 = a[15];
    out[0] = (a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22));
    out[1] = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));
    out[2] = (a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12));
    out[3] = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));
    out[4] = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));
    out[5] = (a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22));
    out[6] = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));
    out[7] = (a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12));
    out[8] = (a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21));
    out[9] = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));
    out[10] = (a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11));
    out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));
    out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));
    out[13] = (a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21));
    out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));
    out[15] = (a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11));
    return out;
  };
  mat4.determinant = function(a) {
    var a00 = a[0],
        a01 = a[1],
        a02 = a[2],
        a03 = a[3],
        a10 = a[4],
        a11 = a[5],
        a12 = a[6],
        a13 = a[7],
        a20 = a[8],
        a21 = a[9],
        a22 = a[10],
        a23 = a[11],
        a30 = a[12],
        a31 = a[13],
        a32 = a[14],
        a33 = a[15],
        b00 = a00 * a11 - a01 * a10,
        b01 = a00 * a12 - a02 * a10,
        b02 = a00 * a13 - a03 * a10,
        b03 = a01 * a12 - a02 * a11,
        b04 = a01 * a13 - a03 * a11,
        b05 = a02 * a13 - a03 * a12,
        b06 = a20 * a31 - a21 * a30,
        b07 = a20 * a32 - a22 * a30,
        b08 = a20 * a33 - a23 * a30,
        b09 = a21 * a32 - a22 * a31,
        b10 = a21 * a33 - a23 * a31,
        b11 = a22 * a33 - a23 * a32;
    return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
  };
  mat4.multiply = function(out, a, b) {
    var a00 = a[0],
        a01 = a[1],
        a02 = a[2],
        a03 = a[3],
        a10 = a[4],
        a11 = a[5],
        a12 = a[6],
        a13 = a[7],
        a20 = a[8],
        a21 = a[9],
        a22 = a[10],
        a23 = a[11],
        a30 = a[12],
        a31 = a[13],
        a32 = a[14],
        a33 = a[15];
    var b0 = b[0],
        b1 = b[1],
        b2 = b[2],
        b3 = b[3];
    out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
    out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
    out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
    out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
    b0 = b[4];
    b1 = b[5];
    b2 = b[6];
    b3 = b[7];
    out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
    out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
    out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
    out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
    b0 = b[8];
    b1 = b[9];
    b2 = b[10];
    b3 = b[11];
    out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
    out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
    out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
    out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
    b0 = b[12];
    b1 = b[13];
    b2 = b[14];
    b3 = b[15];
    out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
    out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
    out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
    out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
    return out;
  };
  mat4.mul = mat4.multiply;
  mat4.translate = function(out, a, v) {
    var x = v[0],
        y = v[1],
        z = v[2],
        a00,
        a01,
        a02,
        a03,
        a10,
        a11,
        a12,
        a13,
        a20,
        a21,
        a22,
        a23;
    if (a === out) {
      out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];
      out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];
      out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];
      out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];
    } else {
      a00 = a[0];
      a01 = a[1];
      a02 = a[2];
      a03 = a[3];
      a10 = a[4];
      a11 = a[5];
      a12 = a[6];
      a13 = a[7];
      a20 = a[8];
      a21 = a[9];
      a22 = a[10];
      a23 = a[11];
      out[0] = a00;
      out[1] = a01;
      out[2] = a02;
      out[3] = a03;
      out[4] = a10;
      out[5] = a11;
      out[6] = a12;
      out[7] = a13;
      out[8] = a20;
      out[9] = a21;
      out[10] = a22;
      out[11] = a23;
      out[12] = a00 * x + a10 * y + a20 * z + a[12];
      out[13] = a01 * x + a11 * y + a21 * z + a[13];
      out[14] = a02 * x + a12 * y + a22 * z + a[14];
      out[15] = a03 * x + a13 * y + a23 * z + a[15];
    }
    return out;
  };
  mat4.scale = function(out, a, v) {
    var x = v[0],
        y = v[1],
        z = v[2];
    out[0] = a[0] * x;
    out[1] = a[1] * x;
    out[2] = a[2] * x;
    out[3] = a[3] * x;
    out[4] = a[4] * y;
    out[5] = a[5] * y;
    out[6] = a[6] * y;
    out[7] = a[7] * y;
    out[8] = a[8] * z;
    out[9] = a[9] * z;
    out[10] = a[10] * z;
    out[11] = a[11] * z;
    out[12] = a[12];
    out[13] = a[13];
    out[14] = a[14];
    out[15] = a[15];
    return out;
  };
  mat4.rotate = function(out, a, rad, axis) {
    var x = axis[0],
        y = axis[1],
        z = axis[2],
        len = Math.sqrt(x * x + y * y + z * z),
        s,
        c,
        t,
        a00,
        a01,
        a02,
        a03,
        a10,
        a11,
        a12,
        a13,
        a20,
        a21,
        a22,
        a23,
        b00,
        b01,
        b02,
        b10,
        b11,
        b12,
        b20,
        b21,
        b22;
    if (Math.abs(len) < glMatrix.EPSILON) {
      return null;
    }
    len = 1 / len;
    x *= len;
    y *= len;
    z *= len;
    s = Math.sin(rad);
    c = Math.cos(rad);
    t = 1 - c;
    a00 = a[0];
    a01 = a[1];
    a02 = a[2];
    a03 = a[3];
    a10 = a[4];
    a11 = a[5];
    a12 = a[6];
    a13 = a[7];
    a20 = a[8];
    a21 = a[9];
    a22 = a[10];
    a23 = a[11];
    b00 = x * x * t + c;
    b01 = y * x * t + z * s;
    b02 = z * x * t - y * s;
    b10 = x * y * t - z * s;
    b11 = y * y * t + c;
    b12 = z * y * t + x * s;
    b20 = x * z * t + y * s;
    b21 = y * z * t - x * s;
    b22 = z * z * t + c;
    out[0] = a00 * b00 + a10 * b01 + a20 * b02;
    out[1] = a01 * b00 + a11 * b01 + a21 * b02;
    out[2] = a02 * b00 + a12 * b01 + a22 * b02;
    out[3] = a03 * b00 + a13 * b01 + a23 * b02;
    out[4] = a00 * b10 + a10 * b11 + a20 * b12;
    out[5] = a01 * b10 + a11 * b11 + a21 * b12;
    out[6] = a02 * b10 + a12 * b11 + a22 * b12;
    out[7] = a03 * b10 + a13 * b11 + a23 * b12;
    out[8] = a00 * b20 + a10 * b21 + a20 * b22;
    out[9] = a01 * b20 + a11 * b21 + a21 * b22;
    out[10] = a02 * b20 + a12 * b21 + a22 * b22;
    out[11] = a03 * b20 + a13 * b21 + a23 * b22;
    if (a !== out) {
      out[12] = a[12];
      out[13] = a[13];
      out[14] = a[14];
      out[15] = a[15];
    }
    return out;
  };
  mat4.rotateX = function(out, a, rad) {
    var s = Math.sin(rad),
        c = Math.cos(rad),
        a10 = a[4],
        a11 = a[5],
        a12 = a[6],
        a13 = a[7],
        a20 = a[8],
        a21 = a[9],
        a22 = a[10],
        a23 = a[11];
    if (a !== out) {
      out[0] = a[0];
      out[1] = a[1];
      out[2] = a[2];
      out[3] = a[3];
      out[12] = a[12];
      out[13] = a[13];
      out[14] = a[14];
      out[15] = a[15];
    }
    out[4] = a10 * c + a20 * s;
    out[5] = a11 * c + a21 * s;
    out[6] = a12 * c + a22 * s;
    out[7] = a13 * c + a23 * s;
    out[8] = a20 * c - a10 * s;
    out[9] = a21 * c - a11 * s;
    out[10] = a22 * c - a12 * s;
    out[11] = a23 * c - a13 * s;
    return out;
  };
  mat4.rotateY = function(out, a, rad) {
    var s = Math.sin(rad),
        c = Math.cos(rad),
        a00 = a[0],
        a01 = a[1],
        a02 = a[2],
        a03 = a[3],
        a20 = a[8],
        a21 = a[9],
        a22 = a[10],
        a23 = a[11];
    if (a !== out) {
      out[4] = a[4];
      out[5] = a[5];
      out[6] = a[6];
      out[7] = a[7];
      out[12] = a[12];
      out[13] = a[13];
      out[14] = a[14];
      out[15] = a[15];
    }
    out[0] = a00 * c - a20 * s;
    out[1] = a01 * c - a21 * s;
    out[2] = a02 * c - a22 * s;
    out[3] = a03 * c - a23 * s;
    out[8] = a00 * s + a20 * c;
    out[9] = a01 * s + a21 * c;
    out[10] = a02 * s + a22 * c;
    out[11] = a03 * s + a23 * c;
    return out;
  };
  mat4.rotateZ = function(out, a, rad) {
    var s = Math.sin(rad),
        c = Math.cos(rad),
        a00 = a[0],
        a01 = a[1],
        a02 = a[2],
        a03 = a[3],
        a10 = a[4],
        a11 = a[5],
        a12 = a[6],
        a13 = a[7];
    if (a !== out) {
      out[8] = a[8];
      out[9] = a[9];
      out[10] = a[10];
      out[11] = a[11];
      out[12] = a[12];
      out[13] = a[13];
      out[14] = a[14];
      out[15] = a[15];
    }
    out[0] = a00 * c + a10 * s;
    out[1] = a01 * c + a11 * s;
    out[2] = a02 * c + a12 * s;
    out[3] = a03 * c + a13 * s;
    out[4] = a10 * c - a00 * s;
    out[5] = a11 * c - a01 * s;
    out[6] = a12 * c - a02 * s;
    out[7] = a13 * c - a03 * s;
    return out;
  };
  mat4.fromTranslation = function(out, v) {
    out[0] = 1;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = 1;
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[10] = 1;
    out[11] = 0;
    out[12] = v[0];
    out[13] = v[1];
    out[14] = v[2];
    out[15] = 1;
    return out;
  };
  mat4.fromScaling = function(out, v) {
    out[0] = v[0];
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = v[1];
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[10] = v[2];
    out[11] = 0;
    out[12] = 0;
    out[13] = 0;
    out[14] = 0;
    out[15] = 1;
    return out;
  };
  mat4.fromRotation = function(out, rad, axis) {
    var x = axis[0],
        y = axis[1],
        z = axis[2],
        len = Math.sqrt(x * x + y * y + z * z),
        s,
        c,
        t;
    if (Math.abs(len) < glMatrix.EPSILON) {
      return null;
    }
    len = 1 / len;
    x *= len;
    y *= len;
    z *= len;
    s = Math.sin(rad);
    c = Math.cos(rad);
    t = 1 - c;
    out[0] = x * x * t + c;
    out[1] = y * x * t + z * s;
    out[2] = z * x * t - y * s;
    out[3] = 0;
    out[4] = x * y * t - z * s;
    out[5] = y * y * t + c;
    out[6] = z * y * t + x * s;
    out[7] = 0;
    out[8] = x * z * t + y * s;
    out[9] = y * z * t - x * s;
    out[10] = z * z * t + c;
    out[11] = 0;
    out[12] = 0;
    out[13] = 0;
    out[14] = 0;
    out[15] = 1;
    return out;
  };
  mat4.fromXRotation = function(out, rad) {
    var s = Math.sin(rad),
        c = Math.cos(rad);
    out[0] = 1;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = c;
    out[6] = s;
    out[7] = 0;
    out[8] = 0;
    out[9] = -s;
    out[10] = c;
    out[11] = 0;
    out[12] = 0;
    out[13] = 0;
    out[14] = 0;
    out[15] = 1;
    return out;
  };
  mat4.fromYRotation = function(out, rad) {
    var s = Math.sin(rad),
        c = Math.cos(rad);
    out[0] = c;
    out[1] = 0;
    out[2] = -s;
    out[3] = 0;
    out[4] = 0;
    out[5] = 1;
    out[6] = 0;
    out[7] = 0;
    out[8] = s;
    out[9] = 0;
    out[10] = c;
    out[11] = 0;
    out[12] = 0;
    out[13] = 0;
    out[14] = 0;
    out[15] = 1;
    return out;
  };
  mat4.fromZRotation = function(out, rad) {
    var s = Math.sin(rad),
        c = Math.cos(rad);
    out[0] = c;
    out[1] = s;
    out[2] = 0;
    out[3] = 0;
    out[4] = -s;
    out[5] = c;
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[10] = 1;
    out[11] = 0;
    out[12] = 0;
    out[13] = 0;
    out[14] = 0;
    out[15] = 1;
    return out;
  };
  mat4.fromRotationTranslation = function(out, q, v) {
    var x = q[0],
        y = q[1],
        z = q[2],
        w = q[3],
        x2 = x + x,
        y2 = y + y,
        z2 = z + z,
        xx = x * x2,
        xy = x * y2,
        xz = x * z2,
        yy = y * y2,
        yz = y * z2,
        zz = z * z2,
        wx = w * x2,
        wy = w * y2,
        wz = w * z2;
    out[0] = 1 - (yy + zz);
    out[1] = xy + wz;
    out[2] = xz - wy;
    out[3] = 0;
    out[4] = xy - wz;
    out[5] = 1 - (xx + zz);
    out[6] = yz + wx;
    out[7] = 0;
    out[8] = xz + wy;
    out[9] = yz - wx;
    out[10] = 1 - (xx + yy);
    out[11] = 0;
    out[12] = v[0];
    out[13] = v[1];
    out[14] = v[2];
    out[15] = 1;
    return out;
  };
  mat4.fromRotationTranslationScale = function(out, q, v, s) {
    var x = q[0],
        y = q[1],
        z = q[2],
        w = q[3],
        x2 = x + x,
        y2 = y + y,
        z2 = z + z,
        xx = x * x2,
        xy = x * y2,
        xz = x * z2,
        yy = y * y2,
        yz = y * z2,
        zz = z * z2,
        wx = w * x2,
        wy = w * y2,
        wz = w * z2,
        sx = s[0],
        sy = s[1],
        sz = s[2];
    out[0] = (1 - (yy + zz)) * sx;
    out[1] = (xy + wz) * sx;
    out[2] = (xz - wy) * sx;
    out[3] = 0;
    out[4] = (xy - wz) * sy;
    out[5] = (1 - (xx + zz)) * sy;
    out[6] = (yz + wx) * sy;
    out[7] = 0;
    out[8] = (xz + wy) * sz;
    out[9] = (yz - wx) * sz;
    out[10] = (1 - (xx + yy)) * sz;
    out[11] = 0;
    out[12] = v[0];
    out[13] = v[1];
    out[14] = v[2];
    out[15] = 1;
    return out;
  };
  mat4.fromRotationTranslationScaleOrigin = function(out, q, v, s, o) {
    var x = q[0],
        y = q[1],
        z = q[2],
        w = q[3],
        x2 = x + x,
        y2 = y + y,
        z2 = z + z,
        xx = x * x2,
        xy = x * y2,
        xz = x * z2,
        yy = y * y2,
        yz = y * z2,
        zz = z * z2,
        wx = w * x2,
        wy = w * y2,
        wz = w * z2,
        sx = s[0],
        sy = s[1],
        sz = s[2],
        ox = o[0],
        oy = o[1],
        oz = o[2];
    out[0] = (1 - (yy + zz)) * sx;
    out[1] = (xy + wz) * sx;
    out[2] = (xz - wy) * sx;
    out[3] = 0;
    out[4] = (xy - wz) * sy;
    out[5] = (1 - (xx + zz)) * sy;
    out[6] = (yz + wx) * sy;
    out[7] = 0;
    out[8] = (xz + wy) * sz;
    out[9] = (yz - wx) * sz;
    out[10] = (1 - (xx + yy)) * sz;
    out[11] = 0;
    out[12] = v[0] + ox - (out[0] * ox + out[4] * oy + out[8] * oz);
    out[13] = v[1] + oy - (out[1] * ox + out[5] * oy + out[9] * oz);
    out[14] = v[2] + oz - (out[2] * ox + out[6] * oy + out[10] * oz);
    out[15] = 1;
    return out;
  };
  mat4.fromQuat = function(out, q) {
    var x = q[0],
        y = q[1],
        z = q[2],
        w = q[3],
        x2 = x + x,
        y2 = y + y,
        z2 = z + z,
        xx = x * x2,
        yx = y * x2,
        yy = y * y2,
        zx = z * x2,
        zy = z * y2,
        zz = z * z2,
        wx = w * x2,
        wy = w * y2,
        wz = w * z2;
    out[0] = 1 - yy - zz;
    out[1] = yx + wz;
    out[2] = zx - wy;
    out[3] = 0;
    out[4] = yx - wz;
    out[5] = 1 - xx - zz;
    out[6] = zy + wx;
    out[7] = 0;
    out[8] = zx + wy;
    out[9] = zy - wx;
    out[10] = 1 - xx - yy;
    out[11] = 0;
    out[12] = 0;
    out[13] = 0;
    out[14] = 0;
    out[15] = 1;
    return out;
  };
  mat4.frustum = function(out, left, right, bottom, top, near, far) {
    var rl = 1 / (right - left),
        tb = 1 / (top - bottom),
        nf = 1 / (near - far);
    out[0] = (near * 2) * rl;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = (near * 2) * tb;
    out[6] = 0;
    out[7] = 0;
    out[8] = (right + left) * rl;
    out[9] = (top + bottom) * tb;
    out[10] = (far + near) * nf;
    out[11] = -1;
    out[12] = 0;
    out[13] = 0;
    out[14] = (far * near * 2) * nf;
    out[15] = 0;
    return out;
  };
  mat4.perspective = function(out, fovy, aspect, near, far) {
    var f = 1.0 / Math.tan(fovy / 2),
        nf = 1 / (near - far);
    out[0] = f / aspect;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = f;
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[10] = (far + near) * nf;
    out[11] = -1;
    out[12] = 0;
    out[13] = 0;
    out[14] = (2 * far * near) * nf;
    out[15] = 0;
    return out;
  };
  mat4.perspectiveFromFieldOfView = function(out, fov, near, far) {
    var upTan = Math.tan(fov.upDegrees * Math.PI / 180.0),
        downTan = Math.tan(fov.downDegrees * Math.PI / 180.0),
        leftTan = Math.tan(fov.leftDegrees * Math.PI / 180.0),
        rightTan = Math.tan(fov.rightDegrees * Math.PI / 180.0),
        xScale = 2.0 / (leftTan + rightTan),
        yScale = 2.0 / (upTan + downTan);
    out[0] = xScale;
    out[1] = 0.0;
    out[2] = 0.0;
    out[3] = 0.0;
    out[4] = 0.0;
    out[5] = yScale;
    out[6] = 0.0;
    out[7] = 0.0;
    out[8] = -((leftTan - rightTan) * xScale * 0.5);
    out[9] = ((upTan - downTan) * yScale * 0.5);
    out[10] = far / (near - far);
    out[11] = -1.0;
    out[12] = 0.0;
    out[13] = 0.0;
    out[14] = (far * near) / (near - far);
    out[15] = 0.0;
    return out;
  };
  mat4.ortho = function(out, left, right, bottom, top, near, far) {
    var lr = 1 / (left - right),
        bt = 1 / (bottom - top),
        nf = 1 / (near - far);
    out[0] = -2 * lr;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = -2 * bt;
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[10] = 2 * nf;
    out[11] = 0;
    out[12] = (left + right) * lr;
    out[13] = (top + bottom) * bt;
    out[14] = (far + near) * nf;
    out[15] = 1;
    return out;
  };
  mat4.lookAt = function(out, eye, center, up) {
    var x0,
        x1,
        x2,
        y0,
        y1,
        y2,
        z0,
        z1,
        z2,
        len,
        eyex = eye[0],
        eyey = eye[1],
        eyez = eye[2],
        upx = up[0],
        upy = up[1],
        upz = up[2],
        centerx = center[0],
        centery = center[1],
        centerz = center[2];
    if (Math.abs(eyex - centerx) < glMatrix.EPSILON && Math.abs(eyey - centery) < glMatrix.EPSILON && Math.abs(eyez - centerz) < glMatrix.EPSILON) {
      return mat4.identity(out);
    }
    z0 = eyex - centerx;
    z1 = eyey - centery;
    z2 = eyez - centerz;
    len = 1 / Math.sqrt(z0 * z0 + z1 * z1 + z2 * z2);
    z0 *= len;
    z1 *= len;
    z2 *= len;
    x0 = upy * z2 - upz * z1;
    x1 = upz * z0 - upx * z2;
    x2 = upx * z1 - upy * z0;
    len = Math.sqrt(x0 * x0 + x1 * x1 + x2 * x2);
    if (!len) {
      x0 = 0;
      x1 = 0;
      x2 = 0;
    } else {
      len = 1 / len;
      x0 *= len;
      x1 *= len;
      x2 *= len;
    }
    y0 = z1 * x2 - z2 * x1;
    y1 = z2 * x0 - z0 * x2;
    y2 = z0 * x1 - z1 * x0;
    len = Math.sqrt(y0 * y0 + y1 * y1 + y2 * y2);
    if (!len) {
      y0 = 0;
      y1 = 0;
      y2 = 0;
    } else {
      len = 1 / len;
      y0 *= len;
      y1 *= len;
      y2 *= len;
    }
    out[0] = x0;
    out[1] = y0;
    out[2] = z0;
    out[3] = 0;
    out[4] = x1;
    out[5] = y1;
    out[6] = z1;
    out[7] = 0;
    out[8] = x2;
    out[9] = y2;
    out[10] = z2;
    out[11] = 0;
    out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);
    out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);
    out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);
    out[15] = 1;
    return out;
  };
  mat4.str = function(a) {
    return 'mat4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' + a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ', ' + a[8] + ', ' + a[9] + ', ' + a[10] + ', ' + a[11] + ', ' + a[12] + ', ' + a[13] + ', ' + a[14] + ', ' + a[15] + ')';
  };
  mat4.frob = function(a) {
    return (Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2) + Math.pow(a[9], 2) + Math.pow(a[10], 2) + Math.pow(a[11], 2) + Math.pow(a[12], 2) + Math.pow(a[13], 2) + Math.pow(a[14], 2) + Math.pow(a[15], 2)));
  };
  module.exports = mat4;
  global.define = __define;
  return module.exports;
});

System.register("npm:gl-matrix@2.3.1/src/gl-matrix/vec3", ["npm:gl-matrix@2.3.1/src/gl-matrix/common"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  var glMatrix = require("npm:gl-matrix@2.3.1/src/gl-matrix/common");
  var vec3 = {};
  vec3.create = function() {
    var out = new glMatrix.ARRAY_TYPE(3);
    out[0] = 0;
    out[1] = 0;
    out[2] = 0;
    return out;
  };
  vec3.clone = function(a) {
    var out = new glMatrix.ARRAY_TYPE(3);
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    return out;
  };
  vec3.fromValues = function(x, y, z) {
    var out = new glMatrix.ARRAY_TYPE(3);
    out[0] = x;
    out[1] = y;
    out[2] = z;
    return out;
  };
  vec3.copy = function(out, a) {
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    return out;
  };
  vec3.set = function(out, x, y, z) {
    out[0] = x;
    out[1] = y;
    out[2] = z;
    return out;
  };
  vec3.add = function(out, a, b) {
    out[0] = a[0] + b[0];
    out[1] = a[1] + b[1];
    out[2] = a[2] + b[2];
    return out;
  };
  vec3.subtract = function(out, a, b) {
    out[0] = a[0] - b[0];
    out[1] = a[1] - b[1];
    out[2] = a[2] - b[2];
    return out;
  };
  vec3.sub = vec3.subtract;
  vec3.multiply = function(out, a, b) {
    out[0] = a[0] * b[0];
    out[1] = a[1] * b[1];
    out[2] = a[2] * b[2];
    return out;
  };
  vec3.mul = vec3.multiply;
  vec3.divide = function(out, a, b) {
    out[0] = a[0] / b[0];
    out[1] = a[1] / b[1];
    out[2] = a[2] / b[2];
    return out;
  };
  vec3.div = vec3.divide;
  vec3.min = function(out, a, b) {
    out[0] = Math.min(a[0], b[0]);
    out[1] = Math.min(a[1], b[1]);
    out[2] = Math.min(a[2], b[2]);
    return out;
  };
  vec3.max = function(out, a, b) {
    out[0] = Math.max(a[0], b[0]);
    out[1] = Math.max(a[1], b[1]);
    out[2] = Math.max(a[2], b[2]);
    return out;
  };
  vec3.scale = function(out, a, b) {
    out[0] = a[0] * b;
    out[1] = a[1] * b;
    out[2] = a[2] * b;
    return out;
  };
  vec3.scaleAndAdd = function(out, a, b, scale) {
    out[0] = a[0] + (b[0] * scale);
    out[1] = a[1] + (b[1] * scale);
    out[2] = a[2] + (b[2] * scale);
    return out;
  };
  vec3.distance = function(a, b) {
    var x = b[0] - a[0],
        y = b[1] - a[1],
        z = b[2] - a[2];
    return Math.sqrt(x * x + y * y + z * z);
  };
  vec3.dist = vec3.distance;
  vec3.squaredDistance = function(a, b) {
    var x = b[0] - a[0],
        y = b[1] - a[1],
        z = b[2] - a[2];
    return x * x + y * y + z * z;
  };
  vec3.sqrDist = vec3.squaredDistance;
  vec3.length = function(a) {
    var x = a[0],
        y = a[1],
        z = a[2];
    return Math.sqrt(x * x + y * y + z * z);
  };
  vec3.len = vec3.length;
  vec3.squaredLength = function(a) {
    var x = a[0],
        y = a[1],
        z = a[2];
    return x * x + y * y + z * z;
  };
  vec3.sqrLen = vec3.squaredLength;
  vec3.negate = function(out, a) {
    out[0] = -a[0];
    out[1] = -a[1];
    out[2] = -a[2];
    return out;
  };
  vec3.inverse = function(out, a) {
    out[0] = 1.0 / a[0];
    out[1] = 1.0 / a[1];
    out[2] = 1.0 / a[2];
    return out;
  };
  vec3.normalize = function(out, a) {
    var x = a[0],
        y = a[1],
        z = a[2];
    var len = x * x + y * y + z * z;
    if (len > 0) {
      len = 1 / Math.sqrt(len);
      out[0] = a[0] * len;
      out[1] = a[1] * len;
      out[2] = a[2] * len;
    }
    return out;
  };
  vec3.dot = function(a, b) {
    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
  };
  vec3.cross = function(out, a, b) {
    var ax = a[0],
        ay = a[1],
        az = a[2],
        bx = b[0],
        by = b[1],
        bz = b[2];
    out[0] = ay * bz - az * by;
    out[1] = az * bx - ax * bz;
    out[2] = ax * by - ay * bx;
    return out;
  };
  vec3.lerp = function(out, a, b, t) {
    var ax = a[0],
        ay = a[1],
        az = a[2];
    out[0] = ax + t * (b[0] - ax);
    out[1] = ay + t * (b[1] - ay);
    out[2] = az + t * (b[2] - az);
    return out;
  };
  vec3.hermite = function(out, a, b, c, d, t) {
    var factorTimes2 = t * t,
        factor1 = factorTimes2 * (2 * t - 3) + 1,
        factor2 = factorTimes2 * (t - 2) + t,
        factor3 = factorTimes2 * (t - 1),
        factor4 = factorTimes2 * (3 - 2 * t);
    out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;
    out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;
    out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;
    return out;
  };
  vec3.bezier = function(out, a, b, c, d, t) {
    var inverseFactor = 1 - t,
        inverseFactorTimesTwo = inverseFactor * inverseFactor,
        factorTimes2 = t * t,
        factor1 = inverseFactorTimesTwo * inverseFactor,
        factor2 = 3 * t * inverseFactorTimesTwo,
        factor3 = 3 * factorTimes2 * inverseFactor,
        factor4 = factorTimes2 * t;
    out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;
    out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;
    out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;
    return out;
  };
  vec3.random = function(out, scale) {
    scale = scale || 1.0;
    var r = glMatrix.RANDOM() * 2.0 * Math.PI;
    var z = (glMatrix.RANDOM() * 2.0) - 1.0;
    var zScale = Math.sqrt(1.0 - z * z) * scale;
    out[0] = Math.cos(r) * zScale;
    out[1] = Math.sin(r) * zScale;
    out[2] = z * scale;
    return out;
  };
  vec3.transformMat4 = function(out, a, m) {
    var x = a[0],
        y = a[1],
        z = a[2],
        w = m[3] * x + m[7] * y + m[11] * z + m[15];
    w = w || 1.0;
    out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;
    out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;
    out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;
    return out;
  };
  vec3.transformMat3 = function(out, a, m) {
    var x = a[0],
        y = a[1],
        z = a[2];
    out[0] = x * m[0] + y * m[3] + z * m[6];
    out[1] = x * m[1] + y * m[4] + z * m[7];
    out[2] = x * m[2] + y * m[5] + z * m[8];
    return out;
  };
  vec3.transformQuat = function(out, a, q) {
    var x = a[0],
        y = a[1],
        z = a[2],
        qx = q[0],
        qy = q[1],
        qz = q[2],
        qw = q[3],
        ix = qw * x + qy * z - qz * y,
        iy = qw * y + qz * x - qx * z,
        iz = qw * z + qx * y - qy * x,
        iw = -qx * x - qy * y - qz * z;
    out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;
    out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;
    out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;
    return out;
  };
  vec3.rotateX = function(out, a, b, c) {
    var p = [],
        r = [];
    p[0] = a[0] - b[0];
    p[1] = a[1] - b[1];
    p[2] = a[2] - b[2];
    r[0] = p[0];
    r[1] = p[1] * Math.cos(c) - p[2] * Math.sin(c);
    r[2] = p[1] * Math.sin(c) + p[2] * Math.cos(c);
    out[0] = r[0] + b[0];
    out[1] = r[1] + b[1];
    out[2] = r[2] + b[2];
    return out;
  };
  vec3.rotateY = function(out, a, b, c) {
    var p = [],
        r = [];
    p[0] = a[0] - b[0];
    p[1] = a[1] - b[1];
    p[2] = a[2] - b[2];
    r[0] = p[2] * Math.sin(c) + p[0] * Math.cos(c);
    r[1] = p[1];
    r[2] = p[2] * Math.cos(c) - p[0] * Math.sin(c);
    out[0] = r[0] + b[0];
    out[1] = r[1] + b[1];
    out[2] = r[2] + b[2];
    return out;
  };
  vec3.rotateZ = function(out, a, b, c) {
    var p = [],
        r = [];
    p[0] = a[0] - b[0];
    p[1] = a[1] - b[1];
    p[2] = a[2] - b[2];
    r[0] = p[0] * Math.cos(c) - p[1] * Math.sin(c);
    r[1] = p[0] * Math.sin(c) + p[1] * Math.cos(c);
    r[2] = p[2];
    out[0] = r[0] + b[0];
    out[1] = r[1] + b[1];
    out[2] = r[2] + b[2];
    return out;
  };
  vec3.forEach = (function() {
    var vec = vec3.create();
    return function(a, stride, offset, count, fn, arg) {
      var i,
          l;
      if (!stride) {
        stride = 3;
      }
      if (!offset) {
        offset = 0;
      }
      if (count) {
        l = Math.min((count * stride) + offset, a.length);
      } else {
        l = a.length;
      }
      for (i = offset; i < l; i += stride) {
        vec[0] = a[i];
        vec[1] = a[i + 1];
        vec[2] = a[i + 2];
        fn(vec, vec, arg);
        a[i] = vec[0];
        a[i + 1] = vec[1];
        a[i + 2] = vec[2];
      }
      return a;
    };
  })();
  vec3.angle = function(a, b) {
    var tempA = vec3.fromValues(a[0], a[1], a[2]);
    var tempB = vec3.fromValues(b[0], b[1], b[2]);
    vec3.normalize(tempA, tempA);
    vec3.normalize(tempB, tempB);
    var cosine = vec3.dot(tempA, tempB);
    if (cosine > 1.0) {
      return 0;
    } else {
      return Math.acos(cosine);
    }
  };
  vec3.str = function(a) {
    return 'vec3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ')';
  };
  module.exports = vec3;
  global.define = __define;
  return module.exports;
});

System.register("npm:gl-matrix@2.3.1/src/gl-matrix/vec4", ["npm:gl-matrix@2.3.1/src/gl-matrix/common"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  var glMatrix = require("npm:gl-matrix@2.3.1/src/gl-matrix/common");
  var vec4 = {};
  vec4.create = function() {
    var out = new glMatrix.ARRAY_TYPE(4);
    out[0] = 0;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    return out;
  };
  vec4.clone = function(a) {
    var out = new glMatrix.ARRAY_TYPE(4);
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    return out;
  };
  vec4.fromValues = function(x, y, z, w) {
    var out = new glMatrix.ARRAY_TYPE(4);
    out[0] = x;
    out[1] = y;
    out[2] = z;
    out[3] = w;
    return out;
  };
  vec4.copy = function(out, a) {
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    return out;
  };
  vec4.set = function(out, x, y, z, w) {
    out[0] = x;
    out[1] = y;
    out[2] = z;
    out[3] = w;
    return out;
  };
  vec4.add = function(out, a, b) {
    out[0] = a[0] + b[0];
    out[1] = a[1] + b[1];
    out[2] = a[2] + b[2];
    out[3] = a[3] + b[3];
    return out;
  };
  vec4.subtract = function(out, a, b) {
    out[0] = a[0] - b[0];
    out[1] = a[1] - b[1];
    out[2] = a[2] - b[2];
    out[3] = a[3] - b[3];
    return out;
  };
  vec4.sub = vec4.subtract;
  vec4.multiply = function(out, a, b) {
    out[0] = a[0] * b[0];
    out[1] = a[1] * b[1];
    out[2] = a[2] * b[2];
    out[3] = a[3] * b[3];
    return out;
  };
  vec4.mul = vec4.multiply;
  vec4.divide = function(out, a, b) {
    out[0] = a[0] / b[0];
    out[1] = a[1] / b[1];
    out[2] = a[2] / b[2];
    out[3] = a[3] / b[3];
    return out;
  };
  vec4.div = vec4.divide;
  vec4.min = function(out, a, b) {
    out[0] = Math.min(a[0], b[0]);
    out[1] = Math.min(a[1], b[1]);
    out[2] = Math.min(a[2], b[2]);
    out[3] = Math.min(a[3], b[3]);
    return out;
  };
  vec4.max = function(out, a, b) {
    out[0] = Math.max(a[0], b[0]);
    out[1] = Math.max(a[1], b[1]);
    out[2] = Math.max(a[2], b[2]);
    out[3] = Math.max(a[3], b[3]);
    return out;
  };
  vec4.scale = function(out, a, b) {
    out[0] = a[0] * b;
    out[1] = a[1] * b;
    out[2] = a[2] * b;
    out[3] = a[3] * b;
    return out;
  };
  vec4.scaleAndAdd = function(out, a, b, scale) {
    out[0] = a[0] + (b[0] * scale);
    out[1] = a[1] + (b[1] * scale);
    out[2] = a[2] + (b[2] * scale);
    out[3] = a[3] + (b[3] * scale);
    return out;
  };
  vec4.distance = function(a, b) {
    var x = b[0] - a[0],
        y = b[1] - a[1],
        z = b[2] - a[2],
        w = b[3] - a[3];
    return Math.sqrt(x * x + y * y + z * z + w * w);
  };
  vec4.dist = vec4.distance;
  vec4.squaredDistance = function(a, b) {
    var x = b[0] - a[0],
        y = b[1] - a[1],
        z = b[2] - a[2],
        w = b[3] - a[3];
    return x * x + y * y + z * z + w * w;
  };
  vec4.sqrDist = vec4.squaredDistance;
  vec4.length = function(a) {
    var x = a[0],
        y = a[1],
        z = a[2],
        w = a[3];
    return Math.sqrt(x * x + y * y + z * z + w * w);
  };
  vec4.len = vec4.length;
  vec4.squaredLength = function(a) {
    var x = a[0],
        y = a[1],
        z = a[2],
        w = a[3];
    return x * x + y * y + z * z + w * w;
  };
  vec4.sqrLen = vec4.squaredLength;
  vec4.negate = function(out, a) {
    out[0] = -a[0];
    out[1] = -a[1];
    out[2] = -a[2];
    out[3] = -a[3];
    return out;
  };
  vec4.inverse = function(out, a) {
    out[0] = 1.0 / a[0];
    out[1] = 1.0 / a[1];
    out[2] = 1.0 / a[2];
    out[3] = 1.0 / a[3];
    return out;
  };
  vec4.normalize = function(out, a) {
    var x = a[0],
        y = a[1],
        z = a[2],
        w = a[3];
    var len = x * x + y * y + z * z + w * w;
    if (len > 0) {
      len = 1 / Math.sqrt(len);
      out[0] = x * len;
      out[1] = y * len;
      out[2] = z * len;
      out[3] = w * len;
    }
    return out;
  };
  vec4.dot = function(a, b) {
    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];
  };
  vec4.lerp = function(out, a, b, t) {
    var ax = a[0],
        ay = a[1],
        az = a[2],
        aw = a[3];
    out[0] = ax + t * (b[0] - ax);
    out[1] = ay + t * (b[1] - ay);
    out[2] = az + t * (b[2] - az);
    out[3] = aw + t * (b[3] - aw);
    return out;
  };
  vec4.random = function(out, scale) {
    scale = scale || 1.0;
    out[0] = glMatrix.RANDOM();
    out[1] = glMatrix.RANDOM();
    out[2] = glMatrix.RANDOM();
    out[3] = glMatrix.RANDOM();
    vec4.normalize(out, out);
    vec4.scale(out, out, scale);
    return out;
  };
  vec4.transformMat4 = function(out, a, m) {
    var x = a[0],
        y = a[1],
        z = a[2],
        w = a[3];
    out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;
    out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;
    out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;
    out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;
    return out;
  };
  vec4.transformQuat = function(out, a, q) {
    var x = a[0],
        y = a[1],
        z = a[2],
        qx = q[0],
        qy = q[1],
        qz = q[2],
        qw = q[3],
        ix = qw * x + qy * z - qz * y,
        iy = qw * y + qz * x - qx * z,
        iz = qw * z + qx * y - qy * x,
        iw = -qx * x - qy * y - qz * z;
    out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;
    out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;
    out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;
    out[3] = a[3];
    return out;
  };
  vec4.forEach = (function() {
    var vec = vec4.create();
    return function(a, stride, offset, count, fn, arg) {
      var i,
          l;
      if (!stride) {
        stride = 4;
      }
      if (!offset) {
        offset = 0;
      }
      if (count) {
        l = Math.min((count * stride) + offset, a.length);
      } else {
        l = a.length;
      }
      for (i = offset; i < l; i += stride) {
        vec[0] = a[i];
        vec[1] = a[i + 1];
        vec[2] = a[i + 2];
        vec[3] = a[i + 3];
        fn(vec, vec, arg);
        a[i] = vec[0];
        a[i + 1] = vec[1];
        a[i + 2] = vec[2];
        a[i + 3] = vec[3];
      }
      return a;
    };
  })();
  vec4.str = function(a) {
    return 'vec4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';
  };
  module.exports = vec4;
  global.define = __define;
  return module.exports;
});

System.register("npm:gl-matrix@2.3.1/src/gl-matrix/vec2", ["npm:gl-matrix@2.3.1/src/gl-matrix/common"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  var glMatrix = require("npm:gl-matrix@2.3.1/src/gl-matrix/common");
  var vec2 = {};
  vec2.create = function() {
    var out = new glMatrix.ARRAY_TYPE(2);
    out[0] = 0;
    out[1] = 0;
    return out;
  };
  vec2.clone = function(a) {
    var out = new glMatrix.ARRAY_TYPE(2);
    out[0] = a[0];
    out[1] = a[1];
    return out;
  };
  vec2.fromValues = function(x, y) {
    var out = new glMatrix.ARRAY_TYPE(2);
    out[0] = x;
    out[1] = y;
    return out;
  };
  vec2.copy = function(out, a) {
    out[0] = a[0];
    out[1] = a[1];
    return out;
  };
  vec2.set = function(out, x, y) {
    out[0] = x;
    out[1] = y;
    return out;
  };
  vec2.add = function(out, a, b) {
    out[0] = a[0] + b[0];
    out[1] = a[1] + b[1];
    return out;
  };
  vec2.subtract = function(out, a, b) {
    out[0] = a[0] - b[0];
    out[1] = a[1] - b[1];
    return out;
  };
  vec2.sub = vec2.subtract;
  vec2.multiply = function(out, a, b) {
    out[0] = a[0] * b[0];
    out[1] = a[1] * b[1];
    return out;
  };
  vec2.mul = vec2.multiply;
  vec2.divide = function(out, a, b) {
    out[0] = a[0] / b[0];
    out[1] = a[1] / b[1];
    return out;
  };
  vec2.div = vec2.divide;
  vec2.min = function(out, a, b) {
    out[0] = Math.min(a[0], b[0]);
    out[1] = Math.min(a[1], b[1]);
    return out;
  };
  vec2.max = function(out, a, b) {
    out[0] = Math.max(a[0], b[0]);
    out[1] = Math.max(a[1], b[1]);
    return out;
  };
  vec2.scale = function(out, a, b) {
    out[0] = a[0] * b;
    out[1] = a[1] * b;
    return out;
  };
  vec2.scaleAndAdd = function(out, a, b, scale) {
    out[0] = a[0] + (b[0] * scale);
    out[1] = a[1] + (b[1] * scale);
    return out;
  };
  vec2.distance = function(a, b) {
    var x = b[0] - a[0],
        y = b[1] - a[1];
    return Math.sqrt(x * x + y * y);
  };
  vec2.dist = vec2.distance;
  vec2.squaredDistance = function(a, b) {
    var x = b[0] - a[0],
        y = b[1] - a[1];
    return x * x + y * y;
  };
  vec2.sqrDist = vec2.squaredDistance;
  vec2.length = function(a) {
    var x = a[0],
        y = a[1];
    return Math.sqrt(x * x + y * y);
  };
  vec2.len = vec2.length;
  vec2.squaredLength = function(a) {
    var x = a[0],
        y = a[1];
    return x * x + y * y;
  };
  vec2.sqrLen = vec2.squaredLength;
  vec2.negate = function(out, a) {
    out[0] = -a[0];
    out[1] = -a[1];
    return out;
  };
  vec2.inverse = function(out, a) {
    out[0] = 1.0 / a[0];
    out[1] = 1.0 / a[1];
    return out;
  };
  vec2.normalize = function(out, a) {
    var x = a[0],
        y = a[1];
    var len = x * x + y * y;
    if (len > 0) {
      len = 1 / Math.sqrt(len);
      out[0] = a[0] * len;
      out[1] = a[1] * len;
    }
    return out;
  };
  vec2.dot = function(a, b) {
    return a[0] * b[0] + a[1] * b[1];
  };
  vec2.cross = function(out, a, b) {
    var z = a[0] * b[1] - a[1] * b[0];
    out[0] = out[1] = 0;
    out[2] = z;
    return out;
  };
  vec2.lerp = function(out, a, b, t) {
    var ax = a[0],
        ay = a[1];
    out[0] = ax + t * (b[0] - ax);
    out[1] = ay + t * (b[1] - ay);
    return out;
  };
  vec2.random = function(out, scale) {
    scale = scale || 1.0;
    var r = glMatrix.RANDOM() * 2.0 * Math.PI;
    out[0] = Math.cos(r) * scale;
    out[1] = Math.sin(r) * scale;
    return out;
  };
  vec2.transformMat2 = function(out, a, m) {
    var x = a[0],
        y = a[1];
    out[0] = m[0] * x + m[2] * y;
    out[1] = m[1] * x + m[3] * y;
    return out;
  };
  vec2.transformMat2d = function(out, a, m) {
    var x = a[0],
        y = a[1];
    out[0] = m[0] * x + m[2] * y + m[4];
    out[1] = m[1] * x + m[3] * y + m[5];
    return out;
  };
  vec2.transformMat3 = function(out, a, m) {
    var x = a[0],
        y = a[1];
    out[0] = m[0] * x + m[3] * y + m[6];
    out[1] = m[1] * x + m[4] * y + m[7];
    return out;
  };
  vec2.transformMat4 = function(out, a, m) {
    var x = a[0],
        y = a[1];
    out[0] = m[0] * x + m[4] * y + m[12];
    out[1] = m[1] * x + m[5] * y + m[13];
    return out;
  };
  vec2.forEach = (function() {
    var vec = vec2.create();
    return function(a, stride, offset, count, fn, arg) {
      var i,
          l;
      if (!stride) {
        stride = 2;
      }
      if (!offset) {
        offset = 0;
      }
      if (count) {
        l = Math.min((count * stride) + offset, a.length);
      } else {
        l = a.length;
      }
      for (i = offset; i < l; i += stride) {
        vec[0] = a[i];
        vec[1] = a[i + 1];
        fn(vec, vec, arg);
        a[i] = vec[0];
        a[i + 1] = vec[1];
      }
      return a;
    };
  })();
  vec2.str = function(a) {
    return 'vec2(' + a[0] + ', ' + a[1] + ')';
  };
  module.exports = vec2;
  global.define = __define;
  return module.exports;
});

(function() {
function define(){};  define.amd = {};
(function(root, factory) {
  'use strict';
  if (typeof define === 'function' && define.amd) {
    System.register("github:andris9/simpleStorage@0.1.3/simpleStorage", [], false, typeof factory == "function" ? factory : function() {
      return factory;
    });
  } else {
    root.simpleStorage = factory();
  }
}(this, function() {
  'use strict';
  var VERSION = '0.1.3',
      _storage = false,
      _storage_size = 0,
      _storage_available = false,
      _ttl_timeout = null;
  function _init() {
    window.localStorage.setItem('__simpleStorageInitTest', 'tmpval');
    window.localStorage.removeItem('__simpleStorageInitTest');
    _load_storage();
    _handleTTL();
    _setupUpdateObserver();
    if ('addEventListener' in window) {
      window.addEventListener('pageshow', function(event) {
        if (event.persisted) {
          _reloadData();
        }
      }, false);
    }
    _storage_available = true;
  }
  function _setupUpdateObserver() {
    if ('addEventListener' in window) {
      window.addEventListener('storage', _reloadData, false);
    } else {
      document.attachEvent('onstorage', _reloadData);
    }
  }
  function _reloadData() {
    try {
      _load_storage();
    } catch (E) {
      _storage_available = false;
      return ;
    }
    _handleTTL();
  }
  function _load_storage() {
    var source = localStorage.getItem('simpleStorage');
    try {
      _storage = JSON.parse(source) || {};
    } catch (E) {
      _storage = {};
    }
    _storage_size = _get_storage_size();
  }
  function _save() {
    try {
      localStorage.setItem('simpleStorage', JSON.stringify(_storage));
      _storage_size = _get_storage_size();
    } catch (E) {
      return E;
    }
    return true;
  }
  function _get_storage_size() {
    var source = localStorage.getItem('simpleStorage');
    return source ? String(source).length : 0;
  }
  function _handleTTL() {
    var curtime,
        i,
        len,
        expire,
        keys,
        nextExpire = Infinity,
        expiredKeysCount = 0;
    clearTimeout(_ttl_timeout);
    if (!_storage || !_storage.__simpleStorage_meta || !_storage.__simpleStorage_meta.TTL) {
      return ;
    }
    curtime = +new Date();
    keys = _storage.__simpleStorage_meta.TTL.keys || [];
    expire = _storage.__simpleStorage_meta.TTL.expire || {};
    for (i = 0, len = keys.length; i < len; i++) {
      if (expire[keys[i]] <= curtime) {
        expiredKeysCount++;
        delete _storage[keys[i]];
        delete expire[keys[i]];
      } else {
        if (expire[keys[i]] < nextExpire) {
          nextExpire = expire[keys[i]];
        }
        break;
      }
    }
    if (nextExpire != Infinity) {
      _ttl_timeout = setTimeout(_handleTTL, Math.min(nextExpire - curtime, 0x7FFFFFFF));
    }
    if (expiredKeysCount) {
      keys.splice(0, expiredKeysCount);
      _cleanMetaObject();
      _save();
    }
  }
  function _setTTL(key, ttl) {
    var curtime = +new Date(),
        i,
        len,
        added = false;
    ttl = Number(ttl) || 0;
    if (ttl !== 0) {
      if (_storage.hasOwnProperty(key)) {
        if (!_storage.__simpleStorage_meta) {
          _storage.__simpleStorage_meta = {};
        }
        if (!_storage.__simpleStorage_meta.TTL) {
          _storage.__simpleStorage_meta.TTL = {
            expire: {},
            keys: []
          };
        }
        _storage.__simpleStorage_meta.TTL.expire[key] = curtime + ttl;
        if (_storage.__simpleStorage_meta.TTL.expire.hasOwnProperty(key)) {
          for (i = 0, len = _storage.__simpleStorage_meta.TTL.keys.length; i < len; i++) {
            if (_storage.__simpleStorage_meta.TTL.keys[i] == key) {
              _storage.__simpleStorage_meta.TTL.keys.splice(i);
            }
          }
        }
        for (i = 0, len = _storage.__simpleStorage_meta.TTL.keys.length; i < len; i++) {
          if (_storage.__simpleStorage_meta.TTL.expire[_storage.__simpleStorage_meta.TTL.keys[i]] > (curtime + ttl)) {
            _storage.__simpleStorage_meta.TTL.keys.splice(i, 0, key);
            added = true;
            break;
          }
        }
        if (!added) {
          _storage.__simpleStorage_meta.TTL.keys.push(key);
        }
      } else {
        return false;
      }
    } else {
      if (_storage && _storage.__simpleStorage_meta && _storage.__simpleStorage_meta.TTL) {
        if (_storage.__simpleStorage_meta.TTL.expire.hasOwnProperty(key)) {
          delete _storage.__simpleStorage_meta.TTL.expire[key];
          for (i = 0, len = _storage.__simpleStorage_meta.TTL.keys.length; i < len; i++) {
            if (_storage.__simpleStorage_meta.TTL.keys[i] == key) {
              _storage.__simpleStorage_meta.TTL.keys.splice(i, 1);
              break;
            }
          }
        }
        _cleanMetaObject();
      }
    }
    clearTimeout(_ttl_timeout);
    if (_storage && _storage.__simpleStorage_meta && _storage.__simpleStorage_meta.TTL && _storage.__simpleStorage_meta.TTL.keys.length) {
      _ttl_timeout = setTimeout(_handleTTL, Math.min(Math.max(_storage.__simpleStorage_meta.TTL.expire[_storage.__simpleStorage_meta.TTL.keys[0]] - curtime, 0), 0x7FFFFFFF));
    }
    return true;
  }
  function _cleanMetaObject() {
    var updated = false,
        hasProperties = false,
        i;
    if (!_storage || !_storage.__simpleStorage_meta) {
      return updated;
    }
    if (_storage.__simpleStorage_meta.TTL && !_storage.__simpleStorage_meta.TTL.keys.length) {
      delete _storage.__simpleStorage_meta.TTL;
      updated = true;
    }
    for (i in _storage.__simpleStorage_meta) {
      if (_storage.__simpleStorage_meta.hasOwnProperty(i)) {
        hasProperties = true;
        break;
      }
    }
    if (!hasProperties) {
      delete _storage.__simpleStorage_meta;
      updated = true;
    }
    return updated;
  }
  try {
    _init();
  } catch (E) {}
  return {
    version: VERSION,
    canUse: function() {
      return !!_storage_available;
    },
    set: function(key, value, options) {
      if (key == '__simpleStorage_meta') {
        return false;
      }
      if (!_storage) {
        return false;
      }
      if (typeof value == 'undefined') {
        return this.deleteKey(key);
      }
      options = options || {};
      try {
        value = JSON.parse(JSON.stringify(value));
      } catch (E) {
        return E;
      }
      _storage[key] = value;
      _setTTL(key, options.TTL || 0);
      return _save();
    },
    get: function(key) {
      if (!_storage) {
        return false;
      }
      if (_storage.hasOwnProperty(key) && key != '__simpleStorage_meta') {
        if (this.getTTL(key)) {
          return _storage[key];
        }
      }
    },
    deleteKey: function(key) {
      if (!_storage) {
        return false;
      }
      if (key in _storage) {
        delete _storage[key];
        _setTTL(key, 0);
        return _save();
      }
      return false;
    },
    setTTL: function(key, ttl) {
      if (!_storage) {
        return false;
      }
      _setTTL(key, ttl);
      return _save();
    },
    getTTL: function(key) {
      var ttl;
      if (!_storage) {
        return false;
      }
      if (_storage.hasOwnProperty(key)) {
        if (_storage.__simpleStorage_meta && _storage.__simpleStorage_meta.TTL && _storage.__simpleStorage_meta.TTL.expire && _storage.__simpleStorage_meta.TTL.expire.hasOwnProperty(key)) {
          ttl = Math.max(_storage.__simpleStorage_meta.TTL.expire[key] - (+new Date()) || 0, 0);
          return ttl || false;
        } else {
          return Infinity;
        }
      }
      return false;
    },
    flush: function() {
      if (!_storage) {
        return false;
      }
      _storage = {};
      try {
        localStorage.removeItem('simpleStorage');
        return true;
      } catch (E) {
        return E;
      }
    },
    index: function() {
      if (!_storage) {
        return false;
      }
      var index = [],
          i;
      for (i in _storage) {
        if (_storage.hasOwnProperty(i) && i != '__simpleStorage_meta') {
          index.push(i);
        }
      }
      return index;
    },
    storageSize: function() {
      return _storage_size;
    }
  };
}));
})();
System.register("npm:core-js@0.9.13/library/modules/$.shared", ["npm:core-js@0.9.13/library/modules/$"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  var $ = require("npm:core-js@0.9.13/library/modules/$"),
      SHARED = '__core-js_shared__',
      store = $.g[SHARED] || $.hide($.g, SHARED, {})[SHARED];
  module.exports = function(key) {
    return store[key] || (store[key] = {});
  };
  global.define = __define;
  return module.exports;
});

System.register("npm:core-js@0.9.13/library/modules/$.uid", ["npm:core-js@0.9.13/library/modules/$"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  var sid = 0;
  function uid(key) {
    return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++sid + Math.random()).toString(36));
  }
  uid.safe = require("npm:core-js@0.9.13/library/modules/$").g.Symbol || uid;
  module.exports = uid;
  global.define = __define;
  return module.exports;
});

System.register("npm:core-js@0.9.13/library/modules/$.redef", ["npm:core-js@0.9.13/library/modules/$"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  module.exports = require("npm:core-js@0.9.13/library/modules/$").hide;
  global.define = __define;
  return module.exports;
});

System.register("npm:core-js@0.9.13/library/modules/$.string-at", ["npm:core-js@0.9.13/library/modules/$"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  var $ = require("npm:core-js@0.9.13/library/modules/$");
  module.exports = function(TO_STRING) {
    return function(that, pos) {
      var s = String($.assertDefined(that)),
          i = $.toInteger(pos),
          l = s.length,
          a,
          b;
      if (i < 0 || i >= l)
        return TO_STRING ? '' : undefined;
      a = s.charCodeAt(i);
      return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff ? TO_STRING ? s.charAt(i) : a : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
    };
  };
  global.define = __define;
  return module.exports;
});

System.register("npm:core-js@0.9.13/library/modules/$.assert", ["npm:core-js@0.9.13/library/modules/$"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  var $ = require("npm:core-js@0.9.13/library/modules/$");
  function assert(condition, msg1, msg2) {
    if (!condition)
      throw TypeError(msg2 ? msg1 + msg2 : msg1);
  }
  assert.def = $.assertDefined;
  assert.fn = function(it) {
    if (!$.isFunction(it))
      throw TypeError(it + ' is not a function!');
    return it;
  };
  assert.obj = function(it) {
    if (!$.isObject(it))
      throw TypeError(it + ' is not an object!');
    return it;
  };
  assert.inst = function(it, Constructor, name) {
    if (!(it instanceof Constructor))
      throw TypeError(name + ": use the 'new' operator!");
    return it;
  };
  module.exports = assert;
  global.define = __define;
  return module.exports;
});

System.register("npm:core-js@0.9.13/library/modules/$.def", ["npm:core-js@0.9.13/library/modules/$"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  var $ = require("npm:core-js@0.9.13/library/modules/$"),
      global = $.g,
      core = $.core,
      isFunction = $.isFunction;
  function ctx(fn, that) {
    return function() {
      return fn.apply(that, arguments);
    };
  }
  $def.F = 1;
  $def.G = 2;
  $def.S = 4;
  $def.P = 8;
  $def.B = 16;
  $def.W = 32;
  function $def(type, name, source) {
    var key,
        own,
        out,
        exp,
        isGlobal = type & $def.G,
        isProto = type & $def.P,
        target = isGlobal ? global : type & $def.S ? global[name] : (global[name] || {}).prototype,
        exports = isGlobal ? core : core[name] || (core[name] = {});
    if (isGlobal)
      source = name;
    for (key in source) {
      own = !(type & $def.F) && target && key in target;
      if (own && key in exports)
        continue;
      out = own ? target[key] : source[key];
      if (isGlobal && !isFunction(target[key]))
        exp = source[key];
      else if (type & $def.B && own)
        exp = ctx(out, global);
      else if (type & $def.W && target[key] == out)
        !function(C) {
          exp = function(param) {
            return this instanceof C ? new C(param) : C(param);
          };
          exp.prototype = C.prototype;
        }(out);
      else
        exp = isProto && isFunction(out) ? ctx(Function.call, out) : out;
      exports[key] = exp;
      if (isProto)
        (exports.prototype || (exports.prototype = {}))[key] = out;
    }
  }
  module.exports = $def;
  global.define = __define;
  return module.exports;
});

System.register("npm:core-js@0.9.13/library/modules/$.unscope", ["npm:core-js@0.9.13/library/modules/$", "npm:core-js@0.9.13/library/modules/$.wks"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  var $ = require("npm:core-js@0.9.13/library/modules/$"),
      UNSCOPABLES = require("npm:core-js@0.9.13/library/modules/$.wks")('unscopables');
  if ($.FW && !(UNSCOPABLES in []))
    $.hide(Array.prototype, UNSCOPABLES, {});
  module.exports = function(key) {
    if ($.FW)
      [][UNSCOPABLES][key] = true;
  };
  global.define = __define;
  return module.exports;
});

System.register("npm:core-js@0.9.13/library/modules/$.ctx", ["npm:core-js@0.9.13/library/modules/$.assert"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  var assertFunction = require("npm:core-js@0.9.13/library/modules/$.assert").fn;
  module.exports = function(fn, that, length) {
    assertFunction(fn);
    if (~length && that === undefined)
      return fn;
    switch (length) {
      case 1:
        return function(a) {
          return fn.call(that, a);
        };
      case 2:
        return function(a, b) {
          return fn.call(that, a, b);
        };
      case 3:
        return function(a, b, c) {
          return fn.call(that, a, b, c);
        };
    }
    return function() {
      return fn.apply(that, arguments);
    };
  };
  global.define = __define;
  return module.exports;
});

System.register("npm:core-js@0.9.13/library/modules/$.iter-call", ["npm:core-js@0.9.13/library/modules/$.assert"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  var assertObject = require("npm:core-js@0.9.13/library/modules/$.assert").obj;
  function close(iterator) {
    var ret = iterator['return'];
    if (ret !== undefined)
      assertObject(ret.call(iterator));
  }
  function call(iterator, fn, value, entries) {
    try {
      return entries ? fn(assertObject(value)[0], value[1]) : fn(value);
    } catch (e) {
      close(iterator);
      throw e;
    }
  }
  call.close = close;
  module.exports = call;
  global.define = __define;
  return module.exports;
});

System.register("npm:core-js@0.9.13/library/modules/$.mix", ["npm:core-js@0.9.13/library/modules/$.redef"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  var $redef = require("npm:core-js@0.9.13/library/modules/$.redef");
  module.exports = function(target, src) {
    for (var key in src)
      $redef(target, key, src[key]);
    return target;
  };
  global.define = __define;
  return module.exports;
});

System.register("npm:core-js@0.9.13/library/modules/$.species", ["npm:core-js@0.9.13/library/modules/$", "npm:core-js@0.9.13/library/modules/$.wks"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  var $ = require("npm:core-js@0.9.13/library/modules/$"),
      SPECIES = require("npm:core-js@0.9.13/library/modules/$.wks")('species');
  module.exports = function(C) {
    if ($.DESC && !(SPECIES in C))
      $.setDesc(C, SPECIES, {
        configurable: true,
        get: $.that
      });
  };
  global.define = __define;
  return module.exports;
});

System.register("npm:core-js@0.9.13/library/modules/$.iter-detect", ["npm:core-js@0.9.13/library/modules/$.wks"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  var SYMBOL_ITERATOR = require("npm:core-js@0.9.13/library/modules/$.wks")('iterator'),
      SAFE_CLOSING = false;
  try {
    var riter = [7][SYMBOL_ITERATOR]();
    riter['return'] = function() {
      SAFE_CLOSING = true;
    };
    Array.from(riter, function() {
      throw 2;
    });
  } catch (e) {}
  module.exports = function(exec) {
    if (!SAFE_CLOSING)
      return false;
    var safe = false;
    try {
      var arr = [7],
          iter = arr[SYMBOL_ITERATOR]();
      iter.next = function() {
        safe = true;
      };
      arr[SYMBOL_ITERATOR] = function() {
        return iter;
      };
      exec(arr);
    } catch (e) {}
    return safe;
  };
  global.define = __define;
  return module.exports;
});

System.register("npm:core-js@0.9.13/library/modules/$.collection-to-json", ["npm:core-js@0.9.13/library/modules/$.def", "npm:core-js@0.9.13/library/modules/$.for-of"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  var $def = require("npm:core-js@0.9.13/library/modules/$.def"),
      forOf = require("npm:core-js@0.9.13/library/modules/$.for-of");
  module.exports = function(NAME) {
    $def($def.P, NAME, {toJSON: function toJSON() {
        var arr = [];
        forOf(this, false, arr.push, arr);
        return arr;
      }});
  };
  global.define = __define;
  return module.exports;
});

System.register("npm:core-js@0.9.13/library/modules/core.iter-helpers", ["npm:core-js@0.9.13/library/modules/$", "npm:core-js@0.9.13/library/modules/$.iter"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  var core = require("npm:core-js@0.9.13/library/modules/$").core,
      $iter = require("npm:core-js@0.9.13/library/modules/$.iter");
  core.isIterable = $iter.is;
  core.getIterator = $iter.get;
  global.define = __define;
  return module.exports;
});

System.register("npm:core-js@0.9.13/library/fn/get-iterator", ["npm:core-js@0.9.13/library/modules/web.dom.iterable", "npm:core-js@0.9.13/library/modules/es6.string.iterator", "npm:core-js@0.9.13/library/modules/core.iter-helpers", "npm:core-js@0.9.13/library/modules/$"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  require("npm:core-js@0.9.13/library/modules/web.dom.iterable");
  require("npm:core-js@0.9.13/library/modules/es6.string.iterator");
  require("npm:core-js@0.9.13/library/modules/core.iter-helpers");
  module.exports = require("npm:core-js@0.9.13/library/modules/$").core.getIterator;
  global.define = __define;
  return module.exports;
});

System.register("npm:rbush@1.4.0/rbush", [], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  "format cjs";
  (function() {
    'use strict';
    function rbush(maxEntries, format) {
      if (!(this instanceof rbush))
        return new rbush(maxEntries, format);
      this._maxEntries = Math.max(4, maxEntries || 9);
      this._minEntries = Math.max(2, Math.ceil(this._maxEntries * 0.4));
      if (format) {
        this._initFormat(format);
      }
      this.clear();
    }
    rbush.prototype = {
      all: function() {
        return this._all(this.data, []);
      },
      search: function(bbox) {
        var node = this.data,
            result = [],
            toBBox = this.toBBox;
        if (!intersects(bbox, node.bbox))
          return result;
        var nodesToSearch = [],
            i,
            len,
            child,
            childBBox;
        while (node) {
          for (i = 0, len = node.children.length; i < len; i++) {
            child = node.children[i];
            childBBox = node.leaf ? toBBox(child) : child.bbox;
            if (intersects(bbox, childBBox)) {
              if (node.leaf)
                result.push(child);
              else if (contains(bbox, childBBox))
                this._all(child, result);
              else
                nodesToSearch.push(child);
            }
          }
          node = nodesToSearch.pop();
        }
        return result;
      },
      collides: function(bbox) {
        var node = this.data,
            toBBox = this.toBBox;
        if (!intersects(bbox, node.bbox))
          return false;
        var nodesToSearch = [],
            i,
            len,
            child,
            childBBox;
        while (node) {
          for (i = 0, len = node.children.length; i < len; i++) {
            child = node.children[i];
            childBBox = node.leaf ? toBBox(child) : child.bbox;
            if (intersects(bbox, childBBox)) {
              if (node.leaf || contains(bbox, childBBox))
                return true;
              nodesToSearch.push(child);
            }
          }
          node = nodesToSearch.pop();
        }
        return false;
      },
      load: function(data) {
        if (!(data && data.length))
          return this;
        if (data.length < this._minEntries) {
          for (var i = 0,
              len = data.length; i < len; i++) {
            this.insert(data[i]);
          }
          return this;
        }
        var node = this._build(data.slice(), 0, data.length - 1, 0);
        if (!this.data.children.length) {
          this.data = node;
        } else if (this.data.height === node.height) {
          this._splitRoot(this.data, node);
        } else {
          if (this.data.height < node.height) {
            var tmpNode = this.data;
            this.data = node;
            node = tmpNode;
          }
          this._insert(node, this.data.height - node.height - 1, true);
        }
        return this;
      },
      insert: function(item) {
        if (item)
          this._insert(item, this.data.height - 1);
        return this;
      },
      clear: function() {
        this.data = {
          children: [],
          height: 1,
          bbox: empty(),
          leaf: true
        };
        return this;
      },
      remove: function(item) {
        if (!item)
          return this;
        var node = this.data,
            bbox = this.toBBox(item),
            path = [],
            indexes = [],
            i,
            parent,
            index,
            goingUp;
        while (node || path.length) {
          if (!node) {
            node = path.pop();
            parent = path[path.length - 1];
            i = indexes.pop();
            goingUp = true;
          }
          if (node.leaf) {
            index = node.children.indexOf(item);
            if (index !== -1) {
              node.children.splice(index, 1);
              path.push(node);
              this._condense(path);
              return this;
            }
          }
          if (!goingUp && !node.leaf && contains(node.bbox, bbox)) {
            path.push(node);
            indexes.push(i);
            i = 0;
            parent = node;
            node = node.children[0];
          } else if (parent) {
            i++;
            node = parent.children[i];
            goingUp = false;
          } else
            node = null;
        }
        return this;
      },
      toBBox: function(item) {
        return item;
      },
      compareMinX: function(a, b) {
        return a[0] - b[0];
      },
      compareMinY: function(a, b) {
        return a[1] - b[1];
      },
      toJSON: function() {
        return this.data;
      },
      fromJSON: function(data) {
        this.data = data;
        return this;
      },
      _all: function(node, result) {
        var nodesToSearch = [];
        while (node) {
          if (node.leaf)
            result.push.apply(result, node.children);
          else
            nodesToSearch.push.apply(nodesToSearch, node.children);
          node = nodesToSearch.pop();
        }
        return result;
      },
      _build: function(items, left, right, height) {
        var N = right - left + 1,
            M = this._maxEntries,
            node;
        if (N <= M) {
          node = {
            children: items.slice(left, right + 1),
            height: 1,
            bbox: null,
            leaf: true
          };
          calcBBox(node, this.toBBox);
          return node;
        }
        if (!height) {
          height = Math.ceil(Math.log(N) / Math.log(M));
          M = Math.ceil(N / Math.pow(M, height - 1));
        }
        node = {
          children: [],
          height: height,
          bbox: null
        };
        var N2 = Math.ceil(N / M),
            N1 = N2 * Math.ceil(Math.sqrt(M)),
            i,
            j,
            right2,
            right3;
        multiSelect(items, left, right, N1, this.compareMinX);
        for (i = left; i <= right; i += N1) {
          right2 = Math.min(i + N1 - 1, right);
          multiSelect(items, i, right2, N2, this.compareMinY);
          for (j = i; j <= right2; j += N2) {
            right3 = Math.min(j + N2 - 1, right2);
            node.children.push(this._build(items, j, right3, height - 1));
          }
        }
        calcBBox(node, this.toBBox);
        return node;
      },
      _chooseSubtree: function(bbox, node, level, path) {
        var i,
            len,
            child,
            targetNode,
            area,
            enlargement,
            minArea,
            minEnlargement;
        while (true) {
          path.push(node);
          if (node.leaf || path.length - 1 === level)
            break;
          minArea = minEnlargement = Infinity;
          for (i = 0, len = node.children.length; i < len; i++) {
            child = node.children[i];
            area = bboxArea(child.bbox);
            enlargement = enlargedArea(bbox, child.bbox) - area;
            if (enlargement < minEnlargement) {
              minEnlargement = enlargement;
              minArea = area < minArea ? area : minArea;
              targetNode = child;
            } else if (enlargement === minEnlargement) {
              if (area < minArea) {
                minArea = area;
                targetNode = child;
              }
            }
          }
          node = targetNode;
        }
        return node;
      },
      _insert: function(item, level, isNode) {
        var toBBox = this.toBBox,
            bbox = isNode ? item.bbox : toBBox(item),
            insertPath = [];
        var node = this._chooseSubtree(bbox, this.data, level, insertPath);
        node.children.push(item);
        extend(node.bbox, bbox);
        while (level >= 0) {
          if (insertPath[level].children.length > this._maxEntries) {
            this._split(insertPath, level);
            level--;
          } else
            break;
        }
        this._adjustParentBBoxes(bbox, insertPath, level);
      },
      _split: function(insertPath, level) {
        var node = insertPath[level],
            M = node.children.length,
            m = this._minEntries;
        this._chooseSplitAxis(node, m, M);
        var newNode = {
          children: node.children.splice(this._chooseSplitIndex(node, m, M)),
          height: node.height
        };
        if (node.leaf)
          newNode.leaf = true;
        calcBBox(node, this.toBBox);
        calcBBox(newNode, this.toBBox);
        if (level)
          insertPath[level - 1].children.push(newNode);
        else
          this._splitRoot(node, newNode);
      },
      _splitRoot: function(node, newNode) {
        this.data = {
          children: [node, newNode],
          height: node.height + 1
        };
        calcBBox(this.data, this.toBBox);
      },
      _chooseSplitIndex: function(node, m, M) {
        var i,
            bbox1,
            bbox2,
            overlap,
            area,
            minOverlap,
            minArea,
            index;
        minOverlap = minArea = Infinity;
        for (i = m; i <= M - m; i++) {
          bbox1 = distBBox(node, 0, i, this.toBBox);
          bbox2 = distBBox(node, i, M, this.toBBox);
          overlap = intersectionArea(bbox1, bbox2);
          area = bboxArea(bbox1) + bboxArea(bbox2);
          if (overlap < minOverlap) {
            minOverlap = overlap;
            index = i;
            minArea = area < minArea ? area : minArea;
          } else if (overlap === minOverlap) {
            if (area < minArea) {
              minArea = area;
              index = i;
            }
          }
        }
        return index;
      },
      _chooseSplitAxis: function(node, m, M) {
        var compareMinX = node.leaf ? this.compareMinX : compareNodeMinX,
            compareMinY = node.leaf ? this.compareMinY : compareNodeMinY,
            xMargin = this._allDistMargin(node, m, M, compareMinX),
            yMargin = this._allDistMargin(node, m, M, compareMinY);
        if (xMargin < yMargin)
          node.children.sort(compareMinX);
      },
      _allDistMargin: function(node, m, M, compare) {
        node.children.sort(compare);
        var toBBox = this.toBBox,
            leftBBox = distBBox(node, 0, m, toBBox),
            rightBBox = distBBox(node, M - m, M, toBBox),
            margin = bboxMargin(leftBBox) + bboxMargin(rightBBox),
            i,
            child;
        for (i = m; i < M - m; i++) {
          child = node.children[i];
          extend(leftBBox, node.leaf ? toBBox(child) : child.bbox);
          margin += bboxMargin(leftBBox);
        }
        for (i = M - m - 1; i >= m; i--) {
          child = node.children[i];
          extend(rightBBox, node.leaf ? toBBox(child) : child.bbox);
          margin += bboxMargin(rightBBox);
        }
        return margin;
      },
      _adjustParentBBoxes: function(bbox, path, level) {
        for (var i = level; i >= 0; i--) {
          extend(path[i].bbox, bbox);
        }
      },
      _condense: function(path) {
        for (var i = path.length - 1,
            siblings; i >= 0; i--) {
          if (path[i].children.length === 0) {
            if (i > 0) {
              siblings = path[i - 1].children;
              siblings.splice(siblings.indexOf(path[i]), 1);
            } else
              this.clear();
          } else
            calcBBox(path[i], this.toBBox);
        }
      },
      _initFormat: function(format) {
        var compareArr = ['return a', ' - b', ';'];
        this.compareMinX = new Function('a', 'b', compareArr.join(format[0]));
        this.compareMinY = new Function('a', 'b', compareArr.join(format[1]));
        this.toBBox = new Function('a', 'return [a' + format.join(', a') + '];');
      }
    };
    function calcBBox(node, toBBox) {
      node.bbox = distBBox(node, 0, node.children.length, toBBox);
    }
    function distBBox(node, k, p, toBBox) {
      var bbox = empty();
      for (var i = k,
          child; i < p; i++) {
        child = node.children[i];
        extend(bbox, node.leaf ? toBBox(child) : child.bbox);
      }
      return bbox;
    }
    function empty() {
      return [Infinity, Infinity, -Infinity, -Infinity];
    }
    function extend(a, b) {
      a[0] = Math.min(a[0], b[0]);
      a[1] = Math.min(a[1], b[1]);
      a[2] = Math.max(a[2], b[2]);
      a[3] = Math.max(a[3], b[3]);
      return a;
    }
    function compareNodeMinX(a, b) {
      return a.bbox[0] - b.bbox[0];
    }
    function compareNodeMinY(a, b) {
      return a.bbox[1] - b.bbox[1];
    }
    function bboxArea(a) {
      return (a[2] - a[0]) * (a[3] - a[1]);
    }
    function bboxMargin(a) {
      return (a[2] - a[0]) + (a[3] - a[1]);
    }
    function enlargedArea(a, b) {
      return (Math.max(b[2], a[2]) - Math.min(b[0], a[0])) * (Math.max(b[3], a[3]) - Math.min(b[1], a[1]));
    }
    function intersectionArea(a, b) {
      var minX = Math.max(a[0], b[0]),
          minY = Math.max(a[1], b[1]),
          maxX = Math.min(a[2], b[2]),
          maxY = Math.min(a[3], b[3]);
      return Math.max(0, maxX - minX) * Math.max(0, maxY - minY);
    }
    function contains(a, b) {
      return a[0] <= b[0] && a[1] <= b[1] && b[2] <= a[2] && b[3] <= a[3];
    }
    function intersects(a, b) {
      return b[0] <= a[2] && b[1] <= a[3] && b[2] >= a[0] && b[3] >= a[1];
    }
    function multiSelect(arr, left, right, n, compare) {
      var stack = [left, right],
          mid;
      while (stack.length) {
        right = stack.pop();
        left = stack.pop();
        if (right - left <= n)
          continue;
        mid = left + Math.ceil((right - left) / n / 2) * n;
        select(arr, left, right, mid, compare);
        stack.push(left, mid, mid, right);
      }
    }
    function select(arr, left, right, k, compare) {
      var n,
          i,
          z,
          s,
          sd,
          newLeft,
          newRight,
          t,
          j;
      while (right > left) {
        if (right - left > 600) {
          n = right - left + 1;
          i = k - left + 1;
          z = Math.log(n);
          s = 0.5 * Math.exp(2 * z / 3);
          sd = 0.5 * Math.sqrt(z * s * (n - s) / n) * (i - n / 2 < 0 ? -1 : 1);
          newLeft = Math.max(left, Math.floor(k - i * s / n + sd));
          newRight = Math.min(right, Math.floor(k + (n - i) * s / n + sd));
          select(arr, newLeft, newRight, k, compare);
        }
        t = arr[k];
        i = left;
        j = right;
        swap(arr, left, k);
        if (compare(arr[right], t) > 0)
          swap(arr, left, right);
        while (i < j) {
          swap(arr, i, j);
          i++;
          j--;
          while (compare(arr[i], t) < 0)
            i++;
          while (compare(arr[j], t) > 0)
            j--;
        }
        if (compare(arr[left], t) === 0)
          swap(arr, left, j);
        else {
          j++;
          swap(arr, j, right);
        }
        if (j <= k)
          left = j + 1;
        if (k <= j)
          right = j - 1;
      }
    }
    function swap(arr, i, j) {
      var tmp = arr[i];
      arr[i] = arr[j];
      arr[j] = tmp;
    }
    if (typeof define === 'function' && define.amd)
      define('rbush', function() {
        return rbush;
      });
    else if (typeof module !== 'undefined')
      module.exports = rbush;
    else if (typeof self !== 'undefined')
      self.rbush = rbush;
    else
      window.rbush = rbush;
  })();
  global.define = __define;
  return module.exports;
});

System.register("npm:core-js@0.9.13/library/fn/object/create", ["npm:core-js@0.9.13/library/modules/$"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  var $ = require("npm:core-js@0.9.13/library/modules/$");
  module.exports = function create(P, D) {
    return $.create(P, D);
  };
  global.define = __define;
  return module.exports;
});

System.register("npm:core-js@0.9.13/library/modules/es6.object.statics-accept-primitives", ["npm:core-js@0.9.13/library/modules/$", "npm:core-js@0.9.13/library/modules/$.def"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  var $ = require("npm:core-js@0.9.13/library/modules/$"),
      $def = require("npm:core-js@0.9.13/library/modules/$.def"),
      isObject = $.isObject,
      toObject = $.toObject;
  $.each.call(('freeze,seal,preventExtensions,isFrozen,isSealed,isExtensible,' + 'getOwnPropertyDescriptor,getPrototypeOf,keys,getOwnPropertyNames').split(','), function(KEY, ID) {
    var fn = ($.core.Object || {})[KEY] || Object[KEY],
        forced = 0,
        method = {};
    method[KEY] = ID == 0 ? function freeze(it) {
      return isObject(it) ? fn(it) : it;
    } : ID == 1 ? function seal(it) {
      return isObject(it) ? fn(it) : it;
    } : ID == 2 ? function preventExtensions(it) {
      return isObject(it) ? fn(it) : it;
    } : ID == 3 ? function isFrozen(it) {
      return isObject(it) ? fn(it) : true;
    } : ID == 4 ? function isSealed(it) {
      return isObject(it) ? fn(it) : true;
    } : ID == 5 ? function isExtensible(it) {
      return isObject(it) ? fn(it) : false;
    } : ID == 6 ? function getOwnPropertyDescriptor(it, key) {
      return fn(toObject(it), key);
    } : ID == 7 ? function getPrototypeOf(it) {
      return fn(Object($.assertDefined(it)));
    } : ID == 8 ? function keys(it) {
      return fn(toObject(it));
    } : function getOwnPropertyNames(it) {
      return fn(toObject(it));
    };
    try {
      fn('z');
    } catch (e) {
      forced = 1;
    }
    $def($def.S + $def.F * forced, 'Object', method);
  });
  global.define = __define;
  return module.exports;
});

System.register("npm:moment@2.10.3/moment", [], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  "format cjs";
  (function(global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() : typeof define === 'function' && define.amd ? define(factory) : global.moment = factory();
  }(this, function() {
    'use strict';
    var hookCallback;
    function utils_hooks__hooks() {
      return hookCallback.apply(null, arguments);
    }
    function setHookCallback(callback) {
      hookCallback = callback;
    }
    function isArray(input) {
      return Object.prototype.toString.call(input) === '[object Array]';
    }
    function isDate(input) {
      return input instanceof Date || Object.prototype.toString.call(input) === '[object Date]';
    }
    function map(arr, fn) {
      var res = [],
          i;
      for (i = 0; i < arr.length; ++i) {
        res.push(fn(arr[i], i));
      }
      return res;
    }
    function hasOwnProp(a, b) {
      return Object.prototype.hasOwnProperty.call(a, b);
    }
    function extend(a, b) {
      for (var i in b) {
        if (hasOwnProp(b, i)) {
          a[i] = b[i];
        }
      }
      if (hasOwnProp(b, 'toString')) {
        a.toString = b.toString;
      }
      if (hasOwnProp(b, 'valueOf')) {
        a.valueOf = b.valueOf;
      }
      return a;
    }
    function create_utc__createUTC(input, format, locale, strict) {
      return createLocalOrUTC(input, format, locale, strict, true).utc();
    }
    function defaultParsingFlags() {
      return {
        empty: false,
        unusedTokens: [],
        unusedInput: [],
        overflow: -2,
        charsLeftOver: 0,
        nullInput: false,
        invalidMonth: null,
        invalidFormat: false,
        userInvalidated: false,
        iso: false
      };
    }
    function getParsingFlags(m) {
      if (m._pf == null) {
        m._pf = defaultParsingFlags();
      }
      return m._pf;
    }
    function valid__isValid(m) {
      if (m._isValid == null) {
        var flags = getParsingFlags(m);
        m._isValid = !isNaN(m._d.getTime()) && flags.overflow < 0 && !flags.empty && !flags.invalidMonth && !flags.nullInput && !flags.invalidFormat && !flags.userInvalidated;
        if (m._strict) {
          m._isValid = m._isValid && flags.charsLeftOver === 0 && flags.unusedTokens.length === 0 && flags.bigHour === undefined;
        }
      }
      return m._isValid;
    }
    function valid__createInvalid(flags) {
      var m = create_utc__createUTC(NaN);
      if (flags != null) {
        extend(getParsingFlags(m), flags);
      } else {
        getParsingFlags(m).userInvalidated = true;
      }
      return m;
    }
    var momentProperties = utils_hooks__hooks.momentProperties = [];
    function copyConfig(to, from) {
      var i,
          prop,
          val;
      if (typeof from._isAMomentObject !== 'undefined') {
        to._isAMomentObject = from._isAMomentObject;
      }
      if (typeof from._i !== 'undefined') {
        to._i = from._i;
      }
      if (typeof from._f !== 'undefined') {
        to._f = from._f;
      }
      if (typeof from._l !== 'undefined') {
        to._l = from._l;
      }
      if (typeof from._strict !== 'undefined') {
        to._strict = from._strict;
      }
      if (typeof from._tzm !== 'undefined') {
        to._tzm = from._tzm;
      }
      if (typeof from._isUTC !== 'undefined') {
        to._isUTC = from._isUTC;
      }
      if (typeof from._offset !== 'undefined') {
        to._offset = from._offset;
      }
      if (typeof from._pf !== 'undefined') {
        to._pf = getParsingFlags(from);
      }
      if (typeof from._locale !== 'undefined') {
        to._locale = from._locale;
      }
      if (momentProperties.length > 0) {
        for (i in momentProperties) {
          prop = momentProperties[i];
          val = from[prop];
          if (typeof val !== 'undefined') {
            to[prop] = val;
          }
        }
      }
      return to;
    }
    var updateInProgress = false;
    function Moment(config) {
      copyConfig(this, config);
      this._d = new Date(+config._d);
      if (updateInProgress === false) {
        updateInProgress = true;
        utils_hooks__hooks.updateOffset(this);
        updateInProgress = false;
      }
    }
    function isMoment(obj) {
      return obj instanceof Moment || (obj != null && obj._isAMomentObject != null);
    }
    function toInt(argumentForCoercion) {
      var coercedNumber = +argumentForCoercion,
          value = 0;
      if (coercedNumber !== 0 && isFinite(coercedNumber)) {
        if (coercedNumber >= 0) {
          value = Math.floor(coercedNumber);
        } else {
          value = Math.ceil(coercedNumber);
        }
      }
      return value;
    }
    function compareArrays(array1, array2, dontConvert) {
      var len = Math.min(array1.length, array2.length),
          lengthDiff = Math.abs(array1.length - array2.length),
          diffs = 0,
          i;
      for (i = 0; i < len; i++) {
        if ((dontConvert && array1[i] !== array2[i]) || (!dontConvert && toInt(array1[i]) !== toInt(array2[i]))) {
          diffs++;
        }
      }
      return diffs + lengthDiff;
    }
    function Locale() {}
    var locales = {};
    var globalLocale;
    function normalizeLocale(key) {
      return key ? key.toLowerCase().replace('_', '-') : key;
    }
    function chooseLocale(names) {
      var i = 0,
          j,
          next,
          locale,
          split;
      while (i < names.length) {
        split = normalizeLocale(names[i]).split('-');
        j = split.length;
        next = normalizeLocale(names[i + 1]);
        next = next ? next.split('-') : null;
        while (j > 0) {
          locale = loadLocale(split.slice(0, j).join('-'));
          if (locale) {
            return locale;
          }
          if (next && next.length >= j && compareArrays(split, next, true) >= j - 1) {
            break;
          }
          j--;
        }
        i++;
      }
      return null;
    }
    function loadLocale(name) {
      var oldLocale = null;
      if (!locales[name] && typeof module !== 'undefined' && module && module.exports) {
        try {
          oldLocale = globalLocale._abbr;
          require('./locale/' + name);
          locale_locales__getSetGlobalLocale(oldLocale);
        } catch (e) {}
      }
      return locales[name];
    }
    function locale_locales__getSetGlobalLocale(key, values) {
      var data;
      if (key) {
        if (typeof values === 'undefined') {
          data = locale_locales__getLocale(key);
        } else {
          data = defineLocale(key, values);
        }
        if (data) {
          globalLocale = data;
        }
      }
      return globalLocale._abbr;
    }
    function defineLocale(name, values) {
      if (values !== null) {
        values.abbr = name;
        if (!locales[name]) {
          locales[name] = new Locale();
        }
        locales[name].set(values);
        locale_locales__getSetGlobalLocale(name);
        return locales[name];
      } else {
        delete locales[name];
        return null;
      }
    }
    function locale_locales__getLocale(key) {
      var locale;
      if (key && key._locale && key._locale._abbr) {
        key = key._locale._abbr;
      }
      if (!key) {
        return globalLocale;
      }
      if (!isArray(key)) {
        locale = loadLocale(key);
        if (locale) {
          return locale;
        }
        key = [key];
      }
      return chooseLocale(key);
    }
    var aliases = {};
    function addUnitAlias(unit, shorthand) {
      var lowerCase = unit.toLowerCase();
      aliases[lowerCase] = aliases[lowerCase + 's'] = aliases[shorthand] = unit;
    }
    function normalizeUnits(units) {
      return typeof units === 'string' ? aliases[units] || aliases[units.toLowerCase()] : undefined;
    }
    function normalizeObjectUnits(inputObject) {
      var normalizedInput = {},
          normalizedProp,
          prop;
      for (prop in inputObject) {
        if (hasOwnProp(inputObject, prop)) {
          normalizedProp = normalizeUnits(prop);
          if (normalizedProp) {
            normalizedInput[normalizedProp] = inputObject[prop];
          }
        }
      }
      return normalizedInput;
    }
    function makeGetSet(unit, keepTime) {
      return function(value) {
        if (value != null) {
          get_set__set(this, unit, value);
          utils_hooks__hooks.updateOffset(this, keepTime);
          return this;
        } else {
          return get_set__get(this, unit);
        }
      };
    }
    function get_set__get(mom, unit) {
      return mom._d['get' + (mom._isUTC ? 'UTC' : '') + unit]();
    }
    function get_set__set(mom, unit, value) {
      return mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value);
    }
    function getSet(units, value) {
      var unit;
      if (typeof units === 'object') {
        for (unit in units) {
          this.set(unit, units[unit]);
        }
      } else {
        units = normalizeUnits(units);
        if (typeof this[units] === 'function') {
          return this[units](value);
        }
      }
      return this;
    }
    function zeroFill(number, targetLength, forceSign) {
      var output = '' + Math.abs(number),
          sign = number >= 0;
      while (output.length < targetLength) {
        output = '0' + output;
      }
      return (sign ? (forceSign ? '+' : '') : '-') + output;
    }
    var formattingTokens = /(\[[^\[]*\])|(\\)?(Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Q|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|mm?|ss?|S{1,4}|x|X|zz?|ZZ?|.)/g;
    var localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g;
    var formatFunctions = {};
    var formatTokenFunctions = {};
    function addFormatToken(token, padded, ordinal, callback) {
      var func = callback;
      if (typeof callback === 'string') {
        func = function() {
          return this[callback]();
        };
      }
      if (token) {
        formatTokenFunctions[token] = func;
      }
      if (padded) {
        formatTokenFunctions[padded[0]] = function() {
          return zeroFill(func.apply(this, arguments), padded[1], padded[2]);
        };
      }
      if (ordinal) {
        formatTokenFunctions[ordinal] = function() {
          return this.localeData().ordinal(func.apply(this, arguments), token);
        };
      }
    }
    function removeFormattingTokens(input) {
      if (input.match(/\[[\s\S]/)) {
        return input.replace(/^\[|\]$/g, '');
      }
      return input.replace(/\\/g, '');
    }
    function makeFormatFunction(format) {
      var array = format.match(formattingTokens),
          i,
          length;
      for (i = 0, length = array.length; i < length; i++) {
        if (formatTokenFunctions[array[i]]) {
          array[i] = formatTokenFunctions[array[i]];
        } else {
          array[i] = removeFormattingTokens(array[i]);
        }
      }
      return function(mom) {
        var output = '';
        for (i = 0; i < length; i++) {
          output += array[i] instanceof Function ? array[i].call(mom, format) : array[i];
        }
        return output;
      };
    }
    function formatMoment(m, format) {
      if (!m.isValid()) {
        return m.localeData().invalidDate();
      }
      format = expandFormat(format, m.localeData());
      if (!formatFunctions[format]) {
        formatFunctions[format] = makeFormatFunction(format);
      }
      return formatFunctions[format](m);
    }
    function expandFormat(format, locale) {
      var i = 5;
      function replaceLongDateFormatTokens(input) {
        return locale.longDateFormat(input) || input;
      }
      localFormattingTokens.lastIndex = 0;
      while (i >= 0 && localFormattingTokens.test(format)) {
        format = format.replace(localFormattingTokens, replaceLongDateFormatTokens);
        localFormattingTokens.lastIndex = 0;
        i -= 1;
      }
      return format;
    }
    var match1 = /\d/;
    var match2 = /\d\d/;
    var match3 = /\d{3}/;
    var match4 = /\d{4}/;
    var match6 = /[+-]?\d{6}/;
    var match1to2 = /\d\d?/;
    var match1to3 = /\d{1,3}/;
    var match1to4 = /\d{1,4}/;
    var match1to6 = /[+-]?\d{1,6}/;
    var matchUnsigned = /\d+/;
    var matchSigned = /[+-]?\d+/;
    var matchOffset = /Z|[+-]\d\d:?\d\d/gi;
    var matchTimestamp = /[+-]?\d+(\.\d{1,3})?/;
    var matchWord = /[0-9]*['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+|[\u0600-\u06FF\/]+(\s*?[\u0600-\u06FF]+){1,2}/i;
    var regexes = {};
    function addRegexToken(token, regex, strictRegex) {
      regexes[token] = typeof regex === 'function' ? regex : function(isStrict) {
        return (isStrict && strictRegex) ? strictRegex : regex;
      };
    }
    function getParseRegexForToken(token, config) {
      if (!hasOwnProp(regexes, token)) {
        return new RegExp(unescapeFormat(token));
      }
      return regexes[token](config._strict, config._locale);
    }
    function unescapeFormat(s) {
      return s.replace('\\', '').replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function(matched, p1, p2, p3, p4) {
        return p1 || p2 || p3 || p4;
      }).replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
    }
    var tokens = {};
    function addParseToken(token, callback) {
      var i,
          func = callback;
      if (typeof token === 'string') {
        token = [token];
      }
      if (typeof callback === 'number') {
        func = function(input, array) {
          array[callback] = toInt(input);
        };
      }
      for (i = 0; i < token.length; i++) {
        tokens[token[i]] = func;
      }
    }
    function addWeekParseToken(token, callback) {
      addParseToken(token, function(input, array, config, token) {
        config._w = config._w || {};
        callback(input, config._w, config, token);
      });
    }
    function addTimeToArrayFromToken(token, input, config) {
      if (input != null && hasOwnProp(tokens, token)) {
        tokens[token](input, config._a, config, token);
      }
    }
    var YEAR = 0;
    var MONTH = 1;
    var DATE = 2;
    var HOUR = 3;
    var MINUTE = 4;
    var SECOND = 5;
    var MILLISECOND = 6;
    function daysInMonth(year, month) {
      return new Date(Date.UTC(year, month + 1, 0)).getUTCDate();
    }
    addFormatToken('M', ['MM', 2], 'Mo', function() {
      return this.month() + 1;
    });
    addFormatToken('MMM', 0, 0, function(format) {
      return this.localeData().monthsShort(this, format);
    });
    addFormatToken('MMMM', 0, 0, function(format) {
      return this.localeData().months(this, format);
    });
    addUnitAlias('month', 'M');
    addRegexToken('M', match1to2);
    addRegexToken('MM', match1to2, match2);
    addRegexToken('MMM', matchWord);
    addRegexToken('MMMM', matchWord);
    addParseToken(['M', 'MM'], function(input, array) {
      array[MONTH] = toInt(input) - 1;
    });
    addParseToken(['MMM', 'MMMM'], function(input, array, config, token) {
      var month = config._locale.monthsParse(input, token, config._strict);
      if (month != null) {
        array[MONTH] = month;
      } else {
        getParsingFlags(config).invalidMonth = input;
      }
    });
    var defaultLocaleMonths = 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_');
    function localeMonths(m) {
      return this._months[m.month()];
    }
    var defaultLocaleMonthsShort = 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_');
    function localeMonthsShort(m) {
      return this._monthsShort[m.month()];
    }
    function localeMonthsParse(monthName, format, strict) {
      var i,
          mom,
          regex;
      if (!this._monthsParse) {
        this._monthsParse = [];
        this._longMonthsParse = [];
        this._shortMonthsParse = [];
      }
      for (i = 0; i < 12; i++) {
        mom = create_utc__createUTC([2000, i]);
        if (strict && !this._longMonthsParse[i]) {
          this._longMonthsParse[i] = new RegExp('^' + this.months(mom, '').replace('.', '') + '$', 'i');
          this._shortMonthsParse[i] = new RegExp('^' + this.monthsShort(mom, '').replace('.', '') + '$', 'i');
        }
        if (!strict && !this._monthsParse[i]) {
          regex = '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');
          this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');
        }
        if (strict && format === 'MMMM' && this._longMonthsParse[i].test(monthName)) {
          return i;
        } else if (strict && format === 'MMM' && this._shortMonthsParse[i].test(monthName)) {
          return i;
        } else if (!strict && this._monthsParse[i].test(monthName)) {
          return i;
        }
      }
    }
    function setMonth(mom, value) {
      var dayOfMonth;
      if (typeof value === 'string') {
        value = mom.localeData().monthsParse(value);
        if (typeof value !== 'number') {
          return mom;
        }
      }
      dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));
      mom._d['set' + (mom._isUTC ? 'UTC' : '') + 'Month'](value, dayOfMonth);
      return mom;
    }
    function getSetMonth(value) {
      if (value != null) {
        setMonth(this, value);
        utils_hooks__hooks.updateOffset(this, true);
        return this;
      } else {
        return get_set__get(this, 'Month');
      }
    }
    function getDaysInMonth() {
      return daysInMonth(this.year(), this.month());
    }
    function checkOverflow(m) {
      var overflow;
      var a = m._a;
      if (a && getParsingFlags(m).overflow === -2) {
        overflow = a[MONTH] < 0 || a[MONTH] > 11 ? MONTH : a[DATE] < 1 || a[DATE] > daysInMonth(a[YEAR], a[MONTH]) ? DATE : a[HOUR] < 0 || a[HOUR] > 24 || (a[HOUR] === 24 && (a[MINUTE] !== 0 || a[SECOND] !== 0 || a[MILLISECOND] !== 0)) ? HOUR : a[MINUTE] < 0 || a[MINUTE] > 59 ? MINUTE : a[SECOND] < 0 || a[SECOND] > 59 ? SECOND : a[MILLISECOND] < 0 || a[MILLISECOND] > 999 ? MILLISECOND : -1;
        if (getParsingFlags(m)._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {
          overflow = DATE;
        }
        getParsingFlags(m).overflow = overflow;
      }
      return m;
    }
    function warn(msg) {
      if (utils_hooks__hooks.suppressDeprecationWarnings === false && typeof console !== 'undefined' && console.warn) {
        console.warn('Deprecation warning: ' + msg);
      }
    }
    function deprecate(msg, fn) {
      var firstTime = true,
          msgWithStack = msg + '\n' + (new Error()).stack;
      return extend(function() {
        if (firstTime) {
          warn(msgWithStack);
          firstTime = false;
        }
        return fn.apply(this, arguments);
      }, fn);
    }
    var deprecations = {};
    function deprecateSimple(name, msg) {
      if (!deprecations[name]) {
        warn(msg);
        deprecations[name] = true;
      }
    }
    utils_hooks__hooks.suppressDeprecationWarnings = false;
    var from_string__isoRegex = /^\s*(?:[+-]\d{6}|\d{4})-(?:(\d\d-\d\d)|(W\d\d$)|(W\d\d-\d)|(\d\d\d))((T| )(\d\d(:\d\d(:\d\d(\.\d+)?)?)?)?([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/;
    var isoDates = [['YYYYYY-MM-DD', /[+-]\d{6}-\d{2}-\d{2}/], ['YYYY-MM-DD', /\d{4}-\d{2}-\d{2}/], ['GGGG-[W]WW-E', /\d{4}-W\d{2}-\d/], ['GGGG-[W]WW', /\d{4}-W\d{2}/], ['YYYY-DDD', /\d{4}-\d{3}/]];
    var isoTimes = [['HH:mm:ss.SSSS', /(T| )\d\d:\d\d:\d\d\.\d+/], ['HH:mm:ss', /(T| )\d\d:\d\d:\d\d/], ['HH:mm', /(T| )\d\d:\d\d/], ['HH', /(T| )\d\d/]];
    var aspNetJsonRegex = /^\/?Date\((\-?\d+)/i;
    function configFromISO(config) {
      var i,
          l,
          string = config._i,
          match = from_string__isoRegex.exec(string);
      if (match) {
        getParsingFlags(config).iso = true;
        for (i = 0, l = isoDates.length; i < l; i++) {
          if (isoDates[i][1].exec(string)) {
            config._f = isoDates[i][0] + (match[6] || ' ');
            break;
          }
        }
        for (i = 0, l = isoTimes.length; i < l; i++) {
          if (isoTimes[i][1].exec(string)) {
            config._f += isoTimes[i][0];
            break;
          }
        }
        if (string.match(matchOffset)) {
          config._f += 'Z';
        }
        configFromStringAndFormat(config);
      } else {
        config._isValid = false;
      }
    }
    function configFromString(config) {
      var matched = aspNetJsonRegex.exec(config._i);
      if (matched !== null) {
        config._d = new Date(+matched[1]);
        return ;
      }
      configFromISO(config);
      if (config._isValid === false) {
        delete config._isValid;
        utils_hooks__hooks.createFromInputFallback(config);
      }
    }
    utils_hooks__hooks.createFromInputFallback = deprecate('moment construction falls back to js Date. This is ' + 'discouraged and will be removed in upcoming major ' + 'release. Please refer to ' + 'https://github.com/moment/moment/issues/1407 for more info.', function(config) {
      config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));
    });
    function createDate(y, m, d, h, M, s, ms) {
      var date = new Date(y, m, d, h, M, s, ms);
      if (y < 1970) {
        date.setFullYear(y);
      }
      return date;
    }
    function createUTCDate(y) {
      var date = new Date(Date.UTC.apply(null, arguments));
      if (y < 1970) {
        date.setUTCFullYear(y);
      }
      return date;
    }
    addFormatToken(0, ['YY', 2], 0, function() {
      return this.year() % 100;
    });
    addFormatToken(0, ['YYYY', 4], 0, 'year');
    addFormatToken(0, ['YYYYY', 5], 0, 'year');
    addFormatToken(0, ['YYYYYY', 6, true], 0, 'year');
    addUnitAlias('year', 'y');
    addRegexToken('Y', matchSigned);
    addRegexToken('YY', match1to2, match2);
    addRegexToken('YYYY', match1to4, match4);
    addRegexToken('YYYYY', match1to6, match6);
    addRegexToken('YYYYYY', match1to6, match6);
    addParseToken(['YYYY', 'YYYYY', 'YYYYYY'], YEAR);
    addParseToken('YY', function(input, array) {
      array[YEAR] = utils_hooks__hooks.parseTwoDigitYear(input);
    });
    function daysInYear(year) {
      return isLeapYear(year) ? 366 : 365;
    }
    function isLeapYear(year) {
      return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;
    }
    utils_hooks__hooks.parseTwoDigitYear = function(input) {
      return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);
    };
    var getSetYear = makeGetSet('FullYear', false);
    function getIsLeapYear() {
      return isLeapYear(this.year());
    }
    addFormatToken('w', ['ww', 2], 'wo', 'week');
    addFormatToken('W', ['WW', 2], 'Wo', 'isoWeek');
    addUnitAlias('week', 'w');
    addUnitAlias('isoWeek', 'W');
    addRegexToken('w', match1to2);
    addRegexToken('ww', match1to2, match2);
    addRegexToken('W', match1to2);
    addRegexToken('WW', match1to2, match2);
    addWeekParseToken(['w', 'ww', 'W', 'WW'], function(input, week, config, token) {
      week[token.substr(0, 1)] = toInt(input);
    });
    function weekOfYear(mom, firstDayOfWeek, firstDayOfWeekOfYear) {
      var end = firstDayOfWeekOfYear - firstDayOfWeek,
          daysToDayOfWeek = firstDayOfWeekOfYear - mom.day(),
          adjustedMoment;
      if (daysToDayOfWeek > end) {
        daysToDayOfWeek -= 7;
      }
      if (daysToDayOfWeek < end - 7) {
        daysToDayOfWeek += 7;
      }
      adjustedMoment = local__createLocal(mom).add(daysToDayOfWeek, 'd');
      return {
        week: Math.ceil(adjustedMoment.dayOfYear() / 7),
        year: adjustedMoment.year()
      };
    }
    function localeWeek(mom) {
      return weekOfYear(mom, this._week.dow, this._week.doy).week;
    }
    var defaultLocaleWeek = {
      dow: 0,
      doy: 6
    };
    function localeFirstDayOfWeek() {
      return this._week.dow;
    }
    function localeFirstDayOfYear() {
      return this._week.doy;
    }
    function getSetWeek(input) {
      var week = this.localeData().week(this);
      return input == null ? week : this.add((input - week) * 7, 'd');
    }
    function getSetISOWeek(input) {
      var week = weekOfYear(this, 1, 4).week;
      return input == null ? week : this.add((input - week) * 7, 'd');
    }
    addFormatToken('DDD', ['DDDD', 3], 'DDDo', 'dayOfYear');
    addUnitAlias('dayOfYear', 'DDD');
    addRegexToken('DDD', match1to3);
    addRegexToken('DDDD', match3);
    addParseToken(['DDD', 'DDDD'], function(input, array, config) {
      config._dayOfYear = toInt(input);
    });
    function dayOfYearFromWeeks(year, week, weekday, firstDayOfWeekOfYear, firstDayOfWeek) {
      var d = createUTCDate(year, 0, 1).getUTCDay();
      var daysToAdd;
      var dayOfYear;
      d = d === 0 ? 7 : d;
      weekday = weekday != null ? weekday : firstDayOfWeek;
      daysToAdd = firstDayOfWeek - d + (d > firstDayOfWeekOfYear ? 7 : 0) - (d < firstDayOfWeek ? 7 : 0);
      dayOfYear = 7 * (week - 1) + (weekday - firstDayOfWeek) + daysToAdd + 1;
      return {
        year: dayOfYear > 0 ? year : year - 1,
        dayOfYear: dayOfYear > 0 ? dayOfYear : daysInYear(year - 1) + dayOfYear
      };
    }
    function getSetDayOfYear(input) {
      var dayOfYear = Math.round((this.clone().startOf('day') - this.clone().startOf('year')) / 864e5) + 1;
      return input == null ? dayOfYear : this.add((input - dayOfYear), 'd');
    }
    function defaults(a, b, c) {
      if (a != null) {
        return a;
      }
      if (b != null) {
        return b;
      }
      return c;
    }
    function currentDateArray(config) {
      var now = new Date();
      if (config._useUTC) {
        return [now.getUTCFullYear(), now.getUTCMonth(), now.getUTCDate()];
      }
      return [now.getFullYear(), now.getMonth(), now.getDate()];
    }
    function configFromArray(config) {
      var i,
          date,
          input = [],
          currentDate,
          yearToUse;
      if (config._d) {
        return ;
      }
      currentDate = currentDateArray(config);
      if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
        dayOfYearFromWeekInfo(config);
      }
      if (config._dayOfYear) {
        yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);
        if (config._dayOfYear > daysInYear(yearToUse)) {
          getParsingFlags(config)._overflowDayOfYear = true;
        }
        date = createUTCDate(yearToUse, 0, config._dayOfYear);
        config._a[MONTH] = date.getUTCMonth();
        config._a[DATE] = date.getUTCDate();
      }
      for (i = 0; i < 3 && config._a[i] == null; ++i) {
        config._a[i] = input[i] = currentDate[i];
      }
      for (; i < 7; i++) {
        config._a[i] = input[i] = (config._a[i] == null) ? (i === 2 ? 1 : 0) : config._a[i];
      }
      if (config._a[HOUR] === 24 && config._a[MINUTE] === 0 && config._a[SECOND] === 0 && config._a[MILLISECOND] === 0) {
        config._nextDay = true;
        config._a[HOUR] = 0;
      }
      config._d = (config._useUTC ? createUTCDate : createDate).apply(null, input);
      if (config._tzm != null) {
        config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
      }
      if (config._nextDay) {
        config._a[HOUR] = 24;
      }
    }
    function dayOfYearFromWeekInfo(config) {
      var w,
          weekYear,
          week,
          weekday,
          dow,
          doy,
          temp;
      w = config._w;
      if (w.GG != null || w.W != null || w.E != null) {
        dow = 1;
        doy = 4;
        weekYear = defaults(w.GG, config._a[YEAR], weekOfYear(local__createLocal(), 1, 4).year);
        week = defaults(w.W, 1);
        weekday = defaults(w.E, 1);
      } else {
        dow = config._locale._week.dow;
        doy = config._locale._week.doy;
        weekYear = defaults(w.gg, config._a[YEAR], weekOfYear(local__createLocal(), dow, doy).year);
        week = defaults(w.w, 1);
        if (w.d != null) {
          weekday = w.d;
          if (weekday < dow) {
            ++week;
          }
        } else if (w.e != null) {
          weekday = w.e + dow;
        } else {
          weekday = dow;
        }
      }
      temp = dayOfYearFromWeeks(weekYear, week, weekday, doy, dow);
      config._a[YEAR] = temp.year;
      config._dayOfYear = temp.dayOfYear;
    }
    utils_hooks__hooks.ISO_8601 = function() {};
    function configFromStringAndFormat(config) {
      if (config._f === utils_hooks__hooks.ISO_8601) {
        configFromISO(config);
        return ;
      }
      config._a = [];
      getParsingFlags(config).empty = true;
      var string = '' + config._i,
          i,
          parsedInput,
          tokens,
          token,
          skipped,
          stringLength = string.length,
          totalParsedInputLength = 0;
      tokens = expandFormat(config._f, config._locale).match(formattingTokens) || [];
      for (i = 0; i < tokens.length; i++) {
        token = tokens[i];
        parsedInput = (string.match(getParseRegexForToken(token, config)) || [])[0];
        if (parsedInput) {
          skipped = string.substr(0, string.indexOf(parsedInput));
          if (skipped.length > 0) {
            getParsingFlags(config).unusedInput.push(skipped);
          }
          string = string.slice(string.indexOf(parsedInput) + parsedInput.length);
          totalParsedInputLength += parsedInput.length;
        }
        if (formatTokenFunctions[token]) {
          if (parsedInput) {
            getParsingFlags(config).empty = false;
          } else {
            getParsingFlags(config).unusedTokens.push(token);
          }
          addTimeToArrayFromToken(token, parsedInput, config);
        } else if (config._strict && !parsedInput) {
          getParsingFlags(config).unusedTokens.push(token);
        }
      }
      getParsingFlags(config).charsLeftOver = stringLength - totalParsedInputLength;
      if (string.length > 0) {
        getParsingFlags(config).unusedInput.push(string);
      }
      if (getParsingFlags(config).bigHour === true && config._a[HOUR] <= 12 && config._a[HOUR] > 0) {
        getParsingFlags(config).bigHour = undefined;
      }
      config._a[HOUR] = meridiemFixWrap(config._locale, config._a[HOUR], config._meridiem);
      configFromArray(config);
      checkOverflow(config);
    }
    function meridiemFixWrap(locale, hour, meridiem) {
      var isPm;
      if (meridiem == null) {
        return hour;
      }
      if (locale.meridiemHour != null) {
        return locale.meridiemHour(hour, meridiem);
      } else if (locale.isPM != null) {
        isPm = locale.isPM(meridiem);
        if (isPm && hour < 12) {
          hour += 12;
        }
        if (!isPm && hour === 12) {
          hour = 0;
        }
        return hour;
      } else {
        return hour;
      }
    }
    function configFromStringAndArray(config) {
      var tempConfig,
          bestMoment,
          scoreToBeat,
          i,
          currentScore;
      if (config._f.length === 0) {
        getParsingFlags(config).invalidFormat = true;
        config._d = new Date(NaN);
        return ;
      }
      for (i = 0; i < config._f.length; i++) {
        currentScore = 0;
        tempConfig = copyConfig({}, config);
        if (config._useUTC != null) {
          tempConfig._useUTC = config._useUTC;
        }
        tempConfig._f = config._f[i];
        configFromStringAndFormat(tempConfig);
        if (!valid__isValid(tempConfig)) {
          continue;
        }
        currentScore += getParsingFlags(tempConfig).charsLeftOver;
        currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;
        getParsingFlags(tempConfig).score = currentScore;
        if (scoreToBeat == null || currentScore < scoreToBeat) {
          scoreToBeat = currentScore;
          bestMoment = tempConfig;
        }
      }
      extend(config, bestMoment || tempConfig);
    }
    function configFromObject(config) {
      if (config._d) {
        return ;
      }
      var i = normalizeObjectUnits(config._i);
      config._a = [i.year, i.month, i.day || i.date, i.hour, i.minute, i.second, i.millisecond];
      configFromArray(config);
    }
    function createFromConfig(config) {
      var input = config._i,
          format = config._f,
          res;
      config._locale = config._locale || locale_locales__getLocale(config._l);
      if (input === null || (format === undefined && input === '')) {
        return valid__createInvalid({nullInput: true});
      }
      if (typeof input === 'string') {
        config._i = input = config._locale.preparse(input);
      }
      if (isMoment(input)) {
        return new Moment(checkOverflow(input));
      } else if (isArray(format)) {
        configFromStringAndArray(config);
      } else if (format) {
        configFromStringAndFormat(config);
      } else if (isDate(input)) {
        config._d = input;
      } else {
        configFromInput(config);
      }
      res = new Moment(checkOverflow(config));
      if (res._nextDay) {
        res.add(1, 'd');
        res._nextDay = undefined;
      }
      return res;
    }
    function configFromInput(config) {
      var input = config._i;
      if (input === undefined) {
        config._d = new Date();
      } else if (isDate(input)) {
        config._d = new Date(+input);
      } else if (typeof input === 'string') {
        configFromString(config);
      } else if (isArray(input)) {
        config._a = map(input.slice(0), function(obj) {
          return parseInt(obj, 10);
        });
        configFromArray(config);
      } else if (typeof(input) === 'object') {
        configFromObject(config);
      } else if (typeof(input) === 'number') {
        config._d = new Date(input);
      } else {
        utils_hooks__hooks.createFromInputFallback(config);
      }
    }
    function createLocalOrUTC(input, format, locale, strict, isUTC) {
      var c = {};
      if (typeof(locale) === 'boolean') {
        strict = locale;
        locale = undefined;
      }
      c._isAMomentObject = true;
      c._useUTC = c._isUTC = isUTC;
      c._l = locale;
      c._i = input;
      c._f = format;
      c._strict = strict;
      return createFromConfig(c);
    }
    function local__createLocal(input, format, locale, strict) {
      return createLocalOrUTC(input, format, locale, strict, false);
    }
    var prototypeMin = deprecate('moment().min is deprecated, use moment.min instead. https://github.com/moment/moment/issues/1548', function() {
      var other = local__createLocal.apply(null, arguments);
      return other < this ? this : other;
    });
    var prototypeMax = deprecate('moment().max is deprecated, use moment.max instead. https://github.com/moment/moment/issues/1548', function() {
      var other = local__createLocal.apply(null, arguments);
      return other > this ? this : other;
    });
    function pickBy(fn, moments) {
      var res,
          i;
      if (moments.length === 1 && isArray(moments[0])) {
        moments = moments[0];
      }
      if (!moments.length) {
        return local__createLocal();
      }
      res = moments[0];
      for (i = 1; i < moments.length; ++i) {
        if (moments[i][fn](res)) {
          res = moments[i];
        }
      }
      return res;
    }
    function min() {
      var args = [].slice.call(arguments, 0);
      return pickBy('isBefore', args);
    }
    function max() {
      var args = [].slice.call(arguments, 0);
      return pickBy('isAfter', args);
    }
    function Duration(duration) {
      var normalizedInput = normalizeObjectUnits(duration),
          years = normalizedInput.year || 0,
          quarters = normalizedInput.quarter || 0,
          months = normalizedInput.month || 0,
          weeks = normalizedInput.week || 0,
          days = normalizedInput.day || 0,
          hours = normalizedInput.hour || 0,
          minutes = normalizedInput.minute || 0,
          seconds = normalizedInput.second || 0,
          milliseconds = normalizedInput.millisecond || 0;
      this._milliseconds = +milliseconds + seconds * 1e3 + minutes * 6e4 + hours * 36e5;
      this._days = +days + weeks * 7;
      this._months = +months + quarters * 3 + years * 12;
      this._data = {};
      this._locale = locale_locales__getLocale();
      this._bubble();
    }
    function isDuration(obj) {
      return obj instanceof Duration;
    }
    function offset(token, separator) {
      addFormatToken(token, 0, 0, function() {
        var offset = this.utcOffset();
        var sign = '+';
        if (offset < 0) {
          offset = -offset;
          sign = '-';
        }
        return sign + zeroFill(~~(offset / 60), 2) + separator + zeroFill(~~(offset) % 60, 2);
      });
    }
    offset('Z', ':');
    offset('ZZ', '');
    addRegexToken('Z', matchOffset);
    addRegexToken('ZZ', matchOffset);
    addParseToken(['Z', 'ZZ'], function(input, array, config) {
      config._useUTC = true;
      config._tzm = offsetFromString(input);
    });
    var chunkOffset = /([\+\-]|\d\d)/gi;
    function offsetFromString(string) {
      var matches = ((string || '').match(matchOffset) || []);
      var chunk = matches[matches.length - 1] || [];
      var parts = (chunk + '').match(chunkOffset) || ['-', 0, 0];
      var minutes = +(parts[1] * 60) + toInt(parts[2]);
      return parts[0] === '+' ? minutes : -minutes;
    }
    function cloneWithOffset(input, model) {
      var res,
          diff;
      if (model._isUTC) {
        res = model.clone();
        diff = (isMoment(input) || isDate(input) ? +input : +local__createLocal(input)) - (+res);
        res._d.setTime(+res._d + diff);
        utils_hooks__hooks.updateOffset(res, false);
        return res;
      } else {
        return local__createLocal(input).local();
      }
      return model._isUTC ? local__createLocal(input).zone(model._offset || 0) : local__createLocal(input).local();
    }
    function getDateOffset(m) {
      return -Math.round(m._d.getTimezoneOffset() / 15) * 15;
    }
    utils_hooks__hooks.updateOffset = function() {};
    function getSetOffset(input, keepLocalTime) {
      var offset = this._offset || 0,
          localAdjust;
      if (input != null) {
        if (typeof input === 'string') {
          input = offsetFromString(input);
        }
        if (Math.abs(input) < 16) {
          input = input * 60;
        }
        if (!this._isUTC && keepLocalTime) {
          localAdjust = getDateOffset(this);
        }
        this._offset = input;
        this._isUTC = true;
        if (localAdjust != null) {
          this.add(localAdjust, 'm');
        }
        if (offset !== input) {
          if (!keepLocalTime || this._changeInProgress) {
            add_subtract__addSubtract(this, create__createDuration(input - offset, 'm'), 1, false);
          } else if (!this._changeInProgress) {
            this._changeInProgress = true;
            utils_hooks__hooks.updateOffset(this, true);
            this._changeInProgress = null;
          }
        }
        return this;
      } else {
        return this._isUTC ? offset : getDateOffset(this);
      }
    }
    function getSetZone(input, keepLocalTime) {
      if (input != null) {
        if (typeof input !== 'string') {
          input = -input;
        }
        this.utcOffset(input, keepLocalTime);
        return this;
      } else {
        return -this.utcOffset();
      }
    }
    function setOffsetToUTC(keepLocalTime) {
      return this.utcOffset(0, keepLocalTime);
    }
    function setOffsetToLocal(keepLocalTime) {
      if (this._isUTC) {
        this.utcOffset(0, keepLocalTime);
        this._isUTC = false;
        if (keepLocalTime) {
          this.subtract(getDateOffset(this), 'm');
        }
      }
      return this;
    }
    function setOffsetToParsedOffset() {
      if (this._tzm) {
        this.utcOffset(this._tzm);
      } else if (typeof this._i === 'string') {
        this.utcOffset(offsetFromString(this._i));
      }
      return this;
    }
    function hasAlignedHourOffset(input) {
      if (!input) {
        input = 0;
      } else {
        input = local__createLocal(input).utcOffset();
      }
      return (this.utcOffset() - input) % 60 === 0;
    }
    function isDaylightSavingTime() {
      return (this.utcOffset() > this.clone().month(0).utcOffset() || this.utcOffset() > this.clone().month(5).utcOffset());
    }
    function isDaylightSavingTimeShifted() {
      if (this._a) {
        var other = this._isUTC ? create_utc__createUTC(this._a) : local__createLocal(this._a);
        return this.isValid() && compareArrays(this._a, other.toArray()) > 0;
      }
      return false;
    }
    function isLocal() {
      return !this._isUTC;
    }
    function isUtcOffset() {
      return this._isUTC;
    }
    function isUtc() {
      return this._isUTC && this._offset === 0;
    }
    var aspNetRegex = /(\-)?(?:(\d*)\.)?(\d+)\:(\d+)(?:\:(\d+)\.?(\d{3})?)?/;
    var create__isoRegex = /^(-)?P(?:(?:([0-9,.]*)Y)?(?:([0-9,.]*)M)?(?:([0-9,.]*)D)?(?:T(?:([0-9,.]*)H)?(?:([0-9,.]*)M)?(?:([0-9,.]*)S)?)?|([0-9,.]*)W)$/;
    function create__createDuration(input, key) {
      var duration = input,
          match = null,
          sign,
          ret,
          diffRes;
      if (isDuration(input)) {
        duration = {
          ms: input._milliseconds,
          d: input._days,
          M: input._months
        };
      } else if (typeof input === 'number') {
        duration = {};
        if (key) {
          duration[key] = input;
        } else {
          duration.milliseconds = input;
        }
      } else if (!!(match = aspNetRegex.exec(input))) {
        sign = (match[1] === '-') ? -1 : 1;
        duration = {
          y: 0,
          d: toInt(match[DATE]) * sign,
          h: toInt(match[HOUR]) * sign,
          m: toInt(match[MINUTE]) * sign,
          s: toInt(match[SECOND]) * sign,
          ms: toInt(match[MILLISECOND]) * sign
        };
      } else if (!!(match = create__isoRegex.exec(input))) {
        sign = (match[1] === '-') ? -1 : 1;
        duration = {
          y: parseIso(match[2], sign),
          M: parseIso(match[3], sign),
          d: parseIso(match[4], sign),
          h: parseIso(match[5], sign),
          m: parseIso(match[6], sign),
          s: parseIso(match[7], sign),
          w: parseIso(match[8], sign)
        };
      } else if (duration == null) {
        duration = {};
      } else if (typeof duration === 'object' && ('from' in duration || 'to' in duration)) {
        diffRes = momentsDifference(local__createLocal(duration.from), local__createLocal(duration.to));
        duration = {};
        duration.ms = diffRes.milliseconds;
        duration.M = diffRes.months;
      }
      ret = new Duration(duration);
      if (isDuration(input) && hasOwnProp(input, '_locale')) {
        ret._locale = input._locale;
      }
      return ret;
    }
    create__createDuration.fn = Duration.prototype;
    function parseIso(inp, sign) {
      var res = inp && parseFloat(inp.replace(',', '.'));
      return (isNaN(res) ? 0 : res) * sign;
    }
    function positiveMomentsDifference(base, other) {
      var res = {
        milliseconds: 0,
        months: 0
      };
      res.months = other.month() - base.month() + (other.year() - base.year()) * 12;
      if (base.clone().add(res.months, 'M').isAfter(other)) {
        --res.months;
      }
      res.milliseconds = +other - +(base.clone().add(res.months, 'M'));
      return res;
    }
    function momentsDifference(base, other) {
      var res;
      other = cloneWithOffset(other, base);
      if (base.isBefore(other)) {
        res = positiveMomentsDifference(base, other);
      } else {
        res = positiveMomentsDifference(other, base);
        res.milliseconds = -res.milliseconds;
        res.months = -res.months;
      }
      return res;
    }
    function createAdder(direction, name) {
      return function(val, period) {
        var dur,
            tmp;
        if (period !== null && !isNaN(+period)) {
          deprecateSimple(name, 'moment().' + name + '(period, number) is deprecated. Please use moment().' + name + '(number, period).');
          tmp = val;
          val = period;
          period = tmp;
        }
        val = typeof val === 'string' ? +val : val;
        dur = create__createDuration(val, period);
        add_subtract__addSubtract(this, dur, direction);
        return this;
      };
    }
    function add_subtract__addSubtract(mom, duration, isAdding, updateOffset) {
      var milliseconds = duration._milliseconds,
          days = duration._days,
          months = duration._months;
      updateOffset = updateOffset == null ? true : updateOffset;
      if (milliseconds) {
        mom._d.setTime(+mom._d + milliseconds * isAdding);
      }
      if (days) {
        get_set__set(mom, 'Date', get_set__get(mom, 'Date') + days * isAdding);
      }
      if (months) {
        setMonth(mom, get_set__get(mom, 'Month') + months * isAdding);
      }
      if (updateOffset) {
        utils_hooks__hooks.updateOffset(mom, days || months);
      }
    }
    var add_subtract__add = createAdder(1, 'add');
    var add_subtract__subtract = createAdder(-1, 'subtract');
    function moment_calendar__calendar(time) {
      var now = time || local__createLocal(),
          sod = cloneWithOffset(now, this).startOf('day'),
          diff = this.diff(sod, 'days', true),
          format = diff < -6 ? 'sameElse' : diff < -1 ? 'lastWeek' : diff < 0 ? 'lastDay' : diff < 1 ? 'sameDay' : diff < 2 ? 'nextDay' : diff < 7 ? 'nextWeek' : 'sameElse';
      return this.format(this.localeData().calendar(format, this, local__createLocal(now)));
    }
    function clone() {
      return new Moment(this);
    }
    function isAfter(input, units) {
      var inputMs;
      units = normalizeUnits(typeof units !== 'undefined' ? units : 'millisecond');
      if (units === 'millisecond') {
        input = isMoment(input) ? input : local__createLocal(input);
        return +this > +input;
      } else {
        inputMs = isMoment(input) ? +input : +local__createLocal(input);
        return inputMs < +this.clone().startOf(units);
      }
    }
    function isBefore(input, units) {
      var inputMs;
      units = normalizeUnits(typeof units !== 'undefined' ? units : 'millisecond');
      if (units === 'millisecond') {
        input = isMoment(input) ? input : local__createLocal(input);
        return +this < +input;
      } else {
        inputMs = isMoment(input) ? +input : +local__createLocal(input);
        return +this.clone().endOf(units) < inputMs;
      }
    }
    function isBetween(from, to, units) {
      return this.isAfter(from, units) && this.isBefore(to, units);
    }
    function isSame(input, units) {
      var inputMs;
      units = normalizeUnits(units || 'millisecond');
      if (units === 'millisecond') {
        input = isMoment(input) ? input : local__createLocal(input);
        return +this === +input;
      } else {
        inputMs = +local__createLocal(input);
        return +(this.clone().startOf(units)) <= inputMs && inputMs <= +(this.clone().endOf(units));
      }
    }
    function absFloor(number) {
      if (number < 0) {
        return Math.ceil(number);
      } else {
        return Math.floor(number);
      }
    }
    function diff(input, units, asFloat) {
      var that = cloneWithOffset(input, this),
          zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4,
          delta,
          output;
      units = normalizeUnits(units);
      if (units === 'year' || units === 'month' || units === 'quarter') {
        output = monthDiff(this, that);
        if (units === 'quarter') {
          output = output / 3;
        } else if (units === 'year') {
          output = output / 12;
        }
      } else {
        delta = this - that;
        output = units === 'second' ? delta / 1e3 : units === 'minute' ? delta / 6e4 : units === 'hour' ? delta / 36e5 : units === 'day' ? (delta - zoneDelta) / 864e5 : units === 'week' ? (delta - zoneDelta) / 6048e5 : delta;
      }
      return asFloat ? output : absFloor(output);
    }
    function monthDiff(a, b) {
      var wholeMonthDiff = ((b.year() - a.year()) * 12) + (b.month() - a.month()),
          anchor = a.clone().add(wholeMonthDiff, 'months'),
          anchor2,
          adjust;
      if (b - anchor < 0) {
        anchor2 = a.clone().add(wholeMonthDiff - 1, 'months');
        adjust = (b - anchor) / (anchor - anchor2);
      } else {
        anchor2 = a.clone().add(wholeMonthDiff + 1, 'months');
        adjust = (b - anchor) / (anchor2 - anchor);
      }
      return -(wholeMonthDiff + adjust);
    }
    utils_hooks__hooks.defaultFormat = 'YYYY-MM-DDTHH:mm:ssZ';
    function toString() {
      return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');
    }
    function moment_format__toISOString() {
      var m = this.clone().utc();
      if (0 < m.year() && m.year() <= 9999) {
        if ('function' === typeof Date.prototype.toISOString) {
          return this.toDate().toISOString();
        } else {
          return formatMoment(m, 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]');
        }
      } else {
        return formatMoment(m, 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]');
      }
    }
    function format(inputString) {
      var output = formatMoment(this, inputString || utils_hooks__hooks.defaultFormat);
      return this.localeData().postformat(output);
    }
    function from(time, withoutSuffix) {
      if (!this.isValid()) {
        return this.localeData().invalidDate();
      }
      return create__createDuration({
        to: this,
        from: time
      }).locale(this.locale()).humanize(!withoutSuffix);
    }
    function fromNow(withoutSuffix) {
      return this.from(local__createLocal(), withoutSuffix);
    }
    function to(time, withoutSuffix) {
      if (!this.isValid()) {
        return this.localeData().invalidDate();
      }
      return create__createDuration({
        from: this,
        to: time
      }).locale(this.locale()).humanize(!withoutSuffix);
    }
    function toNow(withoutSuffix) {
      return this.to(local__createLocal(), withoutSuffix);
    }
    function locale(key) {
      var newLocaleData;
      if (key === undefined) {
        return this._locale._abbr;
      } else {
        newLocaleData = locale_locales__getLocale(key);
        if (newLocaleData != null) {
          this._locale = newLocaleData;
        }
        return this;
      }
    }
    var lang = deprecate('moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.', function(key) {
      if (key === undefined) {
        return this.localeData();
      } else {
        return this.locale(key);
      }
    });
    function localeData() {
      return this._locale;
    }
    function startOf(units) {
      units = normalizeUnits(units);
      switch (units) {
        case 'year':
          this.month(0);
        case 'quarter':
        case 'month':
          this.date(1);
        case 'week':
        case 'isoWeek':
        case 'day':
          this.hours(0);
        case 'hour':
          this.minutes(0);
        case 'minute':
          this.seconds(0);
        case 'second':
          this.milliseconds(0);
      }
      if (units === 'week') {
        this.weekday(0);
      }
      if (units === 'isoWeek') {
        this.isoWeekday(1);
      }
      if (units === 'quarter') {
        this.month(Math.floor(this.month() / 3) * 3);
      }
      return this;
    }
    function endOf(units) {
      units = normalizeUnits(units);
      if (units === undefined || units === 'millisecond') {
        return this;
      }
      return this.startOf(units).add(1, (units === 'isoWeek' ? 'week' : units)).subtract(1, 'ms');
    }
    function to_type__valueOf() {
      return +this._d - ((this._offset || 0) * 60000);
    }
    function unix() {
      return Math.floor(+this / 1000);
    }
    function toDate() {
      return this._offset ? new Date(+this) : this._d;
    }
    function toArray() {
      var m = this;
      return [m.year(), m.month(), m.date(), m.hour(), m.minute(), m.second(), m.millisecond()];
    }
    function moment_valid__isValid() {
      return valid__isValid(this);
    }
    function parsingFlags() {
      return extend({}, getParsingFlags(this));
    }
    function invalidAt() {
      return getParsingFlags(this).overflow;
    }
    addFormatToken(0, ['gg', 2], 0, function() {
      return this.weekYear() % 100;
    });
    addFormatToken(0, ['GG', 2], 0, function() {
      return this.isoWeekYear() % 100;
    });
    function addWeekYearFormatToken(token, getter) {
      addFormatToken(0, [token, token.length], 0, getter);
    }
    addWeekYearFormatToken('gggg', 'weekYear');
    addWeekYearFormatToken('ggggg', 'weekYear');
    addWeekYearFormatToken('GGGG', 'isoWeekYear');
    addWeekYearFormatToken('GGGGG', 'isoWeekYear');
    addUnitAlias('weekYear', 'gg');
    addUnitAlias('isoWeekYear', 'GG');
    addRegexToken('G', matchSigned);
    addRegexToken('g', matchSigned);
    addRegexToken('GG', match1to2, match2);
    addRegexToken('gg', match1to2, match2);
    addRegexToken('GGGG', match1to4, match4);
    addRegexToken('gggg', match1to4, match4);
    addRegexToken('GGGGG', match1to6, match6);
    addRegexToken('ggggg', match1to6, match6);
    addWeekParseToken(['gggg', 'ggggg', 'GGGG', 'GGGGG'], function(input, week, config, token) {
      week[token.substr(0, 2)] = toInt(input);
    });
    addWeekParseToken(['gg', 'GG'], function(input, week, config, token) {
      week[token] = utils_hooks__hooks.parseTwoDigitYear(input);
    });
    function weeksInYear(year, dow, doy) {
      return weekOfYear(local__createLocal([year, 11, 31 + dow - doy]), dow, doy).week;
    }
    function getSetWeekYear(input) {
      var year = weekOfYear(this, this.localeData()._week.dow, this.localeData()._week.doy).year;
      return input == null ? year : this.add((input - year), 'y');
    }
    function getSetISOWeekYear(input) {
      var year = weekOfYear(this, 1, 4).year;
      return input == null ? year : this.add((input - year), 'y');
    }
    function getISOWeeksInYear() {
      return weeksInYear(this.year(), 1, 4);
    }
    function getWeeksInYear() {
      var weekInfo = this.localeData()._week;
      return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
    }
    addFormatToken('Q', 0, 0, 'quarter');
    addUnitAlias('quarter', 'Q');
    addRegexToken('Q', match1);
    addParseToken('Q', function(input, array) {
      array[MONTH] = (toInt(input) - 1) * 3;
    });
    function getSetQuarter(input) {
      return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3);
    }
    addFormatToken('D', ['DD', 2], 'Do', 'date');
    addUnitAlias('date', 'D');
    addRegexToken('D', match1to2);
    addRegexToken('DD', match1to2, match2);
    addRegexToken('Do', function(isStrict, locale) {
      return isStrict ? locale._ordinalParse : locale._ordinalParseLenient;
    });
    addParseToken(['D', 'DD'], DATE);
    addParseToken('Do', function(input, array) {
      array[DATE] = toInt(input.match(match1to2)[0], 10);
    });
    var getSetDayOfMonth = makeGetSet('Date', true);
    addFormatToken('d', 0, 'do', 'day');
    addFormatToken('dd', 0, 0, function(format) {
      return this.localeData().weekdaysMin(this, format);
    });
    addFormatToken('ddd', 0, 0, function(format) {
      return this.localeData().weekdaysShort(this, format);
    });
    addFormatToken('dddd', 0, 0, function(format) {
      return this.localeData().weekdays(this, format);
    });
    addFormatToken('e', 0, 0, 'weekday');
    addFormatToken('E', 0, 0, 'isoWeekday');
    addUnitAlias('day', 'd');
    addUnitAlias('weekday', 'e');
    addUnitAlias('isoWeekday', 'E');
    addRegexToken('d', match1to2);
    addRegexToken('e', match1to2);
    addRegexToken('E', match1to2);
    addRegexToken('dd', matchWord);
    addRegexToken('ddd', matchWord);
    addRegexToken('dddd', matchWord);
    addWeekParseToken(['dd', 'ddd', 'dddd'], function(input, week, config) {
      var weekday = config._locale.weekdaysParse(input);
      if (weekday != null) {
        week.d = weekday;
      } else {
        getParsingFlags(config).invalidWeekday = input;
      }
    });
    addWeekParseToken(['d', 'e', 'E'], function(input, week, config, token) {
      week[token] = toInt(input);
    });
    function parseWeekday(input, locale) {
      if (typeof input === 'string') {
        if (!isNaN(input)) {
          input = parseInt(input, 10);
        } else {
          input = locale.weekdaysParse(input);
          if (typeof input !== 'number') {
            return null;
          }
        }
      }
      return input;
    }
    var defaultLocaleWeekdays = 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_');
    function localeWeekdays(m) {
      return this._weekdays[m.day()];
    }
    var defaultLocaleWeekdaysShort = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_');
    function localeWeekdaysShort(m) {
      return this._weekdaysShort[m.day()];
    }
    var defaultLocaleWeekdaysMin = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_');
    function localeWeekdaysMin(m) {
      return this._weekdaysMin[m.day()];
    }
    function localeWeekdaysParse(weekdayName) {
      var i,
          mom,
          regex;
      if (!this._weekdaysParse) {
        this._weekdaysParse = [];
      }
      for (i = 0; i < 7; i++) {
        if (!this._weekdaysParse[i]) {
          mom = local__createLocal([2000, 1]).day(i);
          regex = '^' + this.weekdays(mom, '') + '|^' + this.weekdaysShort(mom, '') + '|^' + this.weekdaysMin(mom, '');
          this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');
        }
        if (this._weekdaysParse[i].test(weekdayName)) {
          return i;
        }
      }
    }
    function getSetDayOfWeek(input) {
      var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
      if (input != null) {
        input = parseWeekday(input, this.localeData());
        return this.add(input - day, 'd');
      } else {
        return day;
      }
    }
    function getSetLocaleDayOfWeek(input) {
      var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
      return input == null ? weekday : this.add(input - weekday, 'd');
    }
    function getSetISODayOfWeek(input) {
      return input == null ? this.day() || 7 : this.day(this.day() % 7 ? input : input - 7);
    }
    addFormatToken('H', ['HH', 2], 0, 'hour');
    addFormatToken('h', ['hh', 2], 0, function() {
      return this.hours() % 12 || 12;
    });
    function meridiem(token, lowercase) {
      addFormatToken(token, 0, 0, function() {
        return this.localeData().meridiem(this.hours(), this.minutes(), lowercase);
      });
    }
    meridiem('a', true);
    meridiem('A', false);
    addUnitAlias('hour', 'h');
    function matchMeridiem(isStrict, locale) {
      return locale._meridiemParse;
    }
    addRegexToken('a', matchMeridiem);
    addRegexToken('A', matchMeridiem);
    addRegexToken('H', match1to2);
    addRegexToken('h', match1to2);
    addRegexToken('HH', match1to2, match2);
    addRegexToken('hh', match1to2, match2);
    addParseToken(['H', 'HH'], HOUR);
    addParseToken(['a', 'A'], function(input, array, config) {
      config._isPm = config._locale.isPM(input);
      config._meridiem = input;
    });
    addParseToken(['h', 'hh'], function(input, array, config) {
      array[HOUR] = toInt(input);
      getParsingFlags(config).bigHour = true;
    });
    function localeIsPM(input) {
      return ((input + '').toLowerCase().charAt(0) === 'p');
    }
    var defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i;
    function localeMeridiem(hours, minutes, isLower) {
      if (hours > 11) {
        return isLower ? 'pm' : 'PM';
      } else {
        return isLower ? 'am' : 'AM';
      }
    }
    var getSetHour = makeGetSet('Hours', true);
    addFormatToken('m', ['mm', 2], 0, 'minute');
    addUnitAlias('minute', 'm');
    addRegexToken('m', match1to2);
    addRegexToken('mm', match1to2, match2);
    addParseToken(['m', 'mm'], MINUTE);
    var getSetMinute = makeGetSet('Minutes', false);
    addFormatToken('s', ['ss', 2], 0, 'second');
    addUnitAlias('second', 's');
    addRegexToken('s', match1to2);
    addRegexToken('ss', match1to2, match2);
    addParseToken(['s', 'ss'], SECOND);
    var getSetSecond = makeGetSet('Seconds', false);
    addFormatToken('S', 0, 0, function() {
      return ~~(this.millisecond() / 100);
    });
    addFormatToken(0, ['SS', 2], 0, function() {
      return ~~(this.millisecond() / 10);
    });
    function millisecond__milliseconds(token) {
      addFormatToken(0, [token, 3], 0, 'millisecond');
    }
    millisecond__milliseconds('SSS');
    millisecond__milliseconds('SSSS');
    addUnitAlias('millisecond', 'ms');
    addRegexToken('S', match1to3, match1);
    addRegexToken('SS', match1to3, match2);
    addRegexToken('SSS', match1to3, match3);
    addRegexToken('SSSS', matchUnsigned);
    addParseToken(['S', 'SS', 'SSS', 'SSSS'], function(input, array) {
      array[MILLISECOND] = toInt(('0.' + input) * 1000);
    });
    var getSetMillisecond = makeGetSet('Milliseconds', false);
    addFormatToken('z', 0, 0, 'zoneAbbr');
    addFormatToken('zz', 0, 0, 'zoneName');
    function getZoneAbbr() {
      return this._isUTC ? 'UTC' : '';
    }
    function getZoneName() {
      return this._isUTC ? 'Coordinated Universal Time' : '';
    }
    var momentPrototype__proto = Moment.prototype;
    momentPrototype__proto.add = add_subtract__add;
    momentPrototype__proto.calendar = moment_calendar__calendar;
    momentPrototype__proto.clone = clone;
    momentPrototype__proto.diff = diff;
    momentPrototype__proto.endOf = endOf;
    momentPrototype__proto.format = format;
    momentPrototype__proto.from = from;
    momentPrototype__proto.fromNow = fromNow;
    momentPrototype__proto.to = to;
    momentPrototype__proto.toNow = toNow;
    momentPrototype__proto.get = getSet;
    momentPrototype__proto.invalidAt = invalidAt;
    momentPrototype__proto.isAfter = isAfter;
    momentPrototype__proto.isBefore = isBefore;
    momentPrototype__proto.isBetween = isBetween;
    momentPrototype__proto.isSame = isSame;
    momentPrototype__proto.isValid = moment_valid__isValid;
    momentPrototype__proto.lang = lang;
    momentPrototype__proto.locale = locale;
    momentPrototype__proto.localeData = localeData;
    momentPrototype__proto.max = prototypeMax;
    momentPrototype__proto.min = prototypeMin;
    momentPrototype__proto.parsingFlags = parsingFlags;
    momentPrototype__proto.set = getSet;
    momentPrototype__proto.startOf = startOf;
    momentPrototype__proto.subtract = add_subtract__subtract;
    momentPrototype__proto.toArray = toArray;
    momentPrototype__proto.toDate = toDate;
    momentPrototype__proto.toISOString = moment_format__toISOString;
    momentPrototype__proto.toJSON = moment_format__toISOString;
    momentPrototype__proto.toString = toString;
    momentPrototype__proto.unix = unix;
    momentPrototype__proto.valueOf = to_type__valueOf;
    momentPrototype__proto.year = getSetYear;
    momentPrototype__proto.isLeapYear = getIsLeapYear;
    momentPrototype__proto.weekYear = getSetWeekYear;
    momentPrototype__proto.isoWeekYear = getSetISOWeekYear;
    momentPrototype__proto.quarter = momentPrototype__proto.quarters = getSetQuarter;
    momentPrototype__proto.month = getSetMonth;
    momentPrototype__proto.daysInMonth = getDaysInMonth;
    momentPrototype__proto.week = momentPrototype__proto.weeks = getSetWeek;
    momentPrototype__proto.isoWeek = momentPrototype__proto.isoWeeks = getSetISOWeek;
    momentPrototype__proto.weeksInYear = getWeeksInYear;
    momentPrototype__proto.isoWeeksInYear = getISOWeeksInYear;
    momentPrototype__proto.date = getSetDayOfMonth;
    momentPrototype__proto.day = momentPrototype__proto.days = getSetDayOfWeek;
    momentPrototype__proto.weekday = getSetLocaleDayOfWeek;
    momentPrototype__proto.isoWeekday = getSetISODayOfWeek;
    momentPrototype__proto.dayOfYear = getSetDayOfYear;
    momentPrototype__proto.hour = momentPrototype__proto.hours = getSetHour;
    momentPrototype__proto.minute = momentPrototype__proto.minutes = getSetMinute;
    momentPrototype__proto.second = momentPrototype__proto.seconds = getSetSecond;
    momentPrototype__proto.millisecond = momentPrototype__proto.milliseconds = getSetMillisecond;
    momentPrototype__proto.utcOffset = getSetOffset;
    momentPrototype__proto.utc = setOffsetToUTC;
    momentPrototype__proto.local = setOffsetToLocal;
    momentPrototype__proto.parseZone = setOffsetToParsedOffset;
    momentPrototype__proto.hasAlignedHourOffset = hasAlignedHourOffset;
    momentPrototype__proto.isDST = isDaylightSavingTime;
    momentPrototype__proto.isDSTShifted = isDaylightSavingTimeShifted;
    momentPrototype__proto.isLocal = isLocal;
    momentPrototype__proto.isUtcOffset = isUtcOffset;
    momentPrototype__proto.isUtc = isUtc;
    momentPrototype__proto.isUTC = isUtc;
    momentPrototype__proto.zoneAbbr = getZoneAbbr;
    momentPrototype__proto.zoneName = getZoneName;
    momentPrototype__proto.dates = deprecate('dates accessor is deprecated. Use date instead.', getSetDayOfMonth);
    momentPrototype__proto.months = deprecate('months accessor is deprecated. Use month instead', getSetMonth);
    momentPrototype__proto.years = deprecate('years accessor is deprecated. Use year instead', getSetYear);
    momentPrototype__proto.zone = deprecate('moment().zone is deprecated, use moment().utcOffset instead. https://github.com/moment/moment/issues/1779', getSetZone);
    var momentPrototype = momentPrototype__proto;
    function moment__createUnix(input) {
      return local__createLocal(input * 1000);
    }
    function moment__createInZone() {
      return local__createLocal.apply(null, arguments).parseZone();
    }
    var defaultCalendar = {
      sameDay: '[Today at] LT',
      nextDay: '[Tomorrow at] LT',
      nextWeek: 'dddd [at] LT',
      lastDay: '[Yesterday at] LT',
      lastWeek: '[Last] dddd [at] LT',
      sameElse: 'L'
    };
    function locale_calendar__calendar(key, mom, now) {
      var output = this._calendar[key];
      return typeof output === 'function' ? output.call(mom, now) : output;
    }
    var defaultLongDateFormat = {
      LTS: 'h:mm:ss A',
      LT: 'h:mm A',
      L: 'MM/DD/YYYY',
      LL: 'MMMM D, YYYY',
      LLL: 'MMMM D, YYYY LT',
      LLLL: 'dddd, MMMM D, YYYY LT'
    };
    function longDateFormat(key) {
      var output = this._longDateFormat[key];
      if (!output && this._longDateFormat[key.toUpperCase()]) {
        output = this._longDateFormat[key.toUpperCase()].replace(/MMMM|MM|DD|dddd/g, function(val) {
          return val.slice(1);
        });
        this._longDateFormat[key] = output;
      }
      return output;
    }
    var defaultInvalidDate = 'Invalid date';
    function invalidDate() {
      return this._invalidDate;
    }
    var defaultOrdinal = '%d';
    var defaultOrdinalParse = /\d{1,2}/;
    function ordinal(number) {
      return this._ordinal.replace('%d', number);
    }
    function preParsePostFormat(string) {
      return string;
    }
    var defaultRelativeTime = {
      future: 'in %s',
      past: '%s ago',
      s: 'a few seconds',
      m: 'a minute',
      mm: '%d minutes',
      h: 'an hour',
      hh: '%d hours',
      d: 'a day',
      dd: '%d days',
      M: 'a month',
      MM: '%d months',
      y: 'a year',
      yy: '%d years'
    };
    function relative__relativeTime(number, withoutSuffix, string, isFuture) {
      var output = this._relativeTime[string];
      return (typeof output === 'function') ? output(number, withoutSuffix, string, isFuture) : output.replace(/%d/i, number);
    }
    function pastFuture(diff, output) {
      var format = this._relativeTime[diff > 0 ? 'future' : 'past'];
      return typeof format === 'function' ? format(output) : format.replace(/%s/i, output);
    }
    function locale_set__set(config) {
      var prop,
          i;
      for (i in config) {
        prop = config[i];
        if (typeof prop === 'function') {
          this[i] = prop;
        } else {
          this['_' + i] = prop;
        }
      }
      this._ordinalParseLenient = new RegExp(this._ordinalParse.source + '|' + (/\d{1,2}/).source);
    }
    var prototype__proto = Locale.prototype;
    prototype__proto._calendar = defaultCalendar;
    prototype__proto.calendar = locale_calendar__calendar;
    prototype__proto._longDateFormat = defaultLongDateFormat;
    prototype__proto.longDateFormat = longDateFormat;
    prototype__proto._invalidDate = defaultInvalidDate;
    prototype__proto.invalidDate = invalidDate;
    prototype__proto._ordinal = defaultOrdinal;
    prototype__proto.ordinal = ordinal;
    prototype__proto._ordinalParse = defaultOrdinalParse;
    prototype__proto.preparse = preParsePostFormat;
    prototype__proto.postformat = preParsePostFormat;
    prototype__proto._relativeTime = defaultRelativeTime;
    prototype__proto.relativeTime = relative__relativeTime;
    prototype__proto.pastFuture = pastFuture;
    prototype__proto.set = locale_set__set;
    prototype__proto.months = localeMonths;
    prototype__proto._months = defaultLocaleMonths;
    prototype__proto.monthsShort = localeMonthsShort;
    prototype__proto._monthsShort = defaultLocaleMonthsShort;
    prototype__proto.monthsParse = localeMonthsParse;
    prototype__proto.week = localeWeek;
    prototype__proto._week = defaultLocaleWeek;
    prototype__proto.firstDayOfYear = localeFirstDayOfYear;
    prototype__proto.firstDayOfWeek = localeFirstDayOfWeek;
    prototype__proto.weekdays = localeWeekdays;
    prototype__proto._weekdays = defaultLocaleWeekdays;
    prototype__proto.weekdaysMin = localeWeekdaysMin;
    prototype__proto._weekdaysMin = defaultLocaleWeekdaysMin;
    prototype__proto.weekdaysShort = localeWeekdaysShort;
    prototype__proto._weekdaysShort = defaultLocaleWeekdaysShort;
    prototype__proto.weekdaysParse = localeWeekdaysParse;
    prototype__proto.isPM = localeIsPM;
    prototype__proto._meridiemParse = defaultLocaleMeridiemParse;
    prototype__proto.meridiem = localeMeridiem;
    function lists__get(format, index, field, setter) {
      var locale = locale_locales__getLocale();
      var utc = create_utc__createUTC().set(setter, index);
      return locale[field](utc, format);
    }
    function list(format, index, field, count, setter) {
      if (typeof format === 'number') {
        index = format;
        format = undefined;
      }
      format = format || '';
      if (index != null) {
        return lists__get(format, index, field, setter);
      }
      var i;
      var out = [];
      for (i = 0; i < count; i++) {
        out[i] = lists__get(format, i, field, setter);
      }
      return out;
    }
    function lists__listMonths(format, index) {
      return list(format, index, 'months', 12, 'month');
    }
    function lists__listMonthsShort(format, index) {
      return list(format, index, 'monthsShort', 12, 'month');
    }
    function lists__listWeekdays(format, index) {
      return list(format, index, 'weekdays', 7, 'day');
    }
    function lists__listWeekdaysShort(format, index) {
      return list(format, index, 'weekdaysShort', 7, 'day');
    }
    function lists__listWeekdaysMin(format, index) {
      return list(format, index, 'weekdaysMin', 7, 'day');
    }
    locale_locales__getSetGlobalLocale('en', {
      ordinalParse: /\d{1,2}(th|st|nd|rd)/,
      ordinal: function(number) {
        var b = number % 10,
            output = (toInt(number % 100 / 10) === 1) ? 'th' : (b === 1) ? 'st' : (b === 2) ? 'nd' : (b === 3) ? 'rd' : 'th';
        return number + output;
      }
    });
    utils_hooks__hooks.lang = deprecate('moment.lang is deprecated. Use moment.locale instead.', locale_locales__getSetGlobalLocale);
    utils_hooks__hooks.langData = deprecate('moment.langData is deprecated. Use moment.localeData instead.', locale_locales__getLocale);
    var mathAbs = Math.abs;
    function duration_abs__abs() {
      var data = this._data;
      this._milliseconds = mathAbs(this._milliseconds);
      this._days = mathAbs(this._days);
      this._months = mathAbs(this._months);
      data.milliseconds = mathAbs(data.milliseconds);
      data.seconds = mathAbs(data.seconds);
      data.minutes = mathAbs(data.minutes);
      data.hours = mathAbs(data.hours);
      data.months = mathAbs(data.months);
      data.years = mathAbs(data.years);
      return this;
    }
    function duration_add_subtract__addSubtract(duration, input, value, direction) {
      var other = create__createDuration(input, value);
      duration._milliseconds += direction * other._milliseconds;
      duration._days += direction * other._days;
      duration._months += direction * other._months;
      return duration._bubble();
    }
    function duration_add_subtract__add(input, value) {
      return duration_add_subtract__addSubtract(this, input, value, 1);
    }
    function duration_add_subtract__subtract(input, value) {
      return duration_add_subtract__addSubtract(this, input, value, -1);
    }
    function bubble() {
      var milliseconds = this._milliseconds;
      var days = this._days;
      var months = this._months;
      var data = this._data;
      var seconds,
          minutes,
          hours,
          years = 0;
      data.milliseconds = milliseconds % 1000;
      seconds = absFloor(milliseconds / 1000);
      data.seconds = seconds % 60;
      minutes = absFloor(seconds / 60);
      data.minutes = minutes % 60;
      hours = absFloor(minutes / 60);
      data.hours = hours % 24;
      days += absFloor(hours / 24);
      years = absFloor(daysToYears(days));
      days -= absFloor(yearsToDays(years));
      months += absFloor(days / 30);
      days %= 30;
      years += absFloor(months / 12);
      months %= 12;
      data.days = days;
      data.months = months;
      data.years = years;
      return this;
    }
    function daysToYears(days) {
      return days * 400 / 146097;
    }
    function yearsToDays(years) {
      return years * 146097 / 400;
    }
    function as(units) {
      var days;
      var months;
      var milliseconds = this._milliseconds;
      units = normalizeUnits(units);
      if (units === 'month' || units === 'year') {
        days = this._days + milliseconds / 864e5;
        months = this._months + daysToYears(days) * 12;
        return units === 'month' ? months : months / 12;
      } else {
        days = this._days + Math.round(yearsToDays(this._months / 12));
        switch (units) {
          case 'week':
            return days / 7 + milliseconds / 6048e5;
          case 'day':
            return days + milliseconds / 864e5;
          case 'hour':
            return days * 24 + milliseconds / 36e5;
          case 'minute':
            return days * 1440 + milliseconds / 6e4;
          case 'second':
            return days * 86400 + milliseconds / 1000;
          case 'millisecond':
            return Math.floor(days * 864e5) + milliseconds;
          default:
            throw new Error('Unknown unit ' + units);
        }
      }
    }
    function duration_as__valueOf() {
      return (this._milliseconds + this._days * 864e5 + (this._months % 12) * 2592e6 + toInt(this._months / 12) * 31536e6);
    }
    function makeAs(alias) {
      return function() {
        return this.as(alias);
      };
    }
    var asMilliseconds = makeAs('ms');
    var asSeconds = makeAs('s');
    var asMinutes = makeAs('m');
    var asHours = makeAs('h');
    var asDays = makeAs('d');
    var asWeeks = makeAs('w');
    var asMonths = makeAs('M');
    var asYears = makeAs('y');
    function duration_get__get(units) {
      units = normalizeUnits(units);
      return this[units + 's']();
    }
    function makeGetter(name) {
      return function() {
        return this._data[name];
      };
    }
    var duration_get__milliseconds = makeGetter('milliseconds');
    var seconds = makeGetter('seconds');
    var minutes = makeGetter('minutes');
    var hours = makeGetter('hours');
    var days = makeGetter('days');
    var months = makeGetter('months');
    var years = makeGetter('years');
    function weeks() {
      return absFloor(this.days() / 7);
    }
    var round = Math.round;
    var thresholds = {
      s: 45,
      m: 45,
      h: 22,
      d: 26,
      M: 11
    };
    function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {
      return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
    }
    function duration_humanize__relativeTime(posNegDuration, withoutSuffix, locale) {
      var duration = create__createDuration(posNegDuration).abs();
      var seconds = round(duration.as('s'));
      var minutes = round(duration.as('m'));
      var hours = round(duration.as('h'));
      var days = round(duration.as('d'));
      var months = round(duration.as('M'));
      var years = round(duration.as('y'));
      var a = seconds < thresholds.s && ['s', seconds] || minutes === 1 && ['m'] || minutes < thresholds.m && ['mm', minutes] || hours === 1 && ['h'] || hours < thresholds.h && ['hh', hours] || days === 1 && ['d'] || days < thresholds.d && ['dd', days] || months === 1 && ['M'] || months < thresholds.M && ['MM', months] || years === 1 && ['y'] || ['yy', years];
      a[2] = withoutSuffix;
      a[3] = +posNegDuration > 0;
      a[4] = locale;
      return substituteTimeAgo.apply(null, a);
    }
    function duration_humanize__getSetRelativeTimeThreshold(threshold, limit) {
      if (thresholds[threshold] === undefined) {
        return false;
      }
      if (limit === undefined) {
        return thresholds[threshold];
      }
      thresholds[threshold] = limit;
      return true;
    }
    function humanize(withSuffix) {
      var locale = this.localeData();
      var output = duration_humanize__relativeTime(this, !withSuffix, locale);
      if (withSuffix) {
        output = locale.pastFuture(+this, output);
      }
      return locale.postformat(output);
    }
    var iso_string__abs = Math.abs;
    function iso_string__toISOString() {
      var Y = iso_string__abs(this.years());
      var M = iso_string__abs(this.months());
      var D = iso_string__abs(this.days());
      var h = iso_string__abs(this.hours());
      var m = iso_string__abs(this.minutes());
      var s = iso_string__abs(this.seconds() + this.milliseconds() / 1000);
      var total = this.asSeconds();
      if (!total) {
        return 'P0D';
      }
      return (total < 0 ? '-' : '') + 'P' + (Y ? Y + 'Y' : '') + (M ? M + 'M' : '') + (D ? D + 'D' : '') + ((h || m || s) ? 'T' : '') + (h ? h + 'H' : '') + (m ? m + 'M' : '') + (s ? s + 'S' : '');
    }
    var duration_prototype__proto = Duration.prototype;
    duration_prototype__proto.abs = duration_abs__abs;
    duration_prototype__proto.add = duration_add_subtract__add;
    duration_prototype__proto.subtract = duration_add_subtract__subtract;
    duration_prototype__proto.as = as;
    duration_prototype__proto.asMilliseconds = asMilliseconds;
    duration_prototype__proto.asSeconds = asSeconds;
    duration_prototype__proto.asMinutes = asMinutes;
    duration_prototype__proto.asHours = asHours;
    duration_prototype__proto.asDays = asDays;
    duration_prototype__proto.asWeeks = asWeeks;
    duration_prototype__proto.asMonths = asMonths;
    duration_prototype__proto.asYears = asYears;
    duration_prototype__proto.valueOf = duration_as__valueOf;
    duration_prototype__proto._bubble = bubble;
    duration_prototype__proto.get = duration_get__get;
    duration_prototype__proto.milliseconds = duration_get__milliseconds;
    duration_prototype__proto.seconds = seconds;
    duration_prototype__proto.minutes = minutes;
    duration_prototype__proto.hours = hours;
    duration_prototype__proto.days = days;
    duration_prototype__proto.weeks = weeks;
    duration_prototype__proto.months = months;
    duration_prototype__proto.years = years;
    duration_prototype__proto.humanize = humanize;
    duration_prototype__proto.toISOString = iso_string__toISOString;
    duration_prototype__proto.toString = iso_string__toISOString;
    duration_prototype__proto.toJSON = iso_string__toISOString;
    duration_prototype__proto.locale = locale;
    duration_prototype__proto.localeData = localeData;
    duration_prototype__proto.toIsoString = deprecate('toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)', iso_string__toISOString);
    duration_prototype__proto.lang = lang;
    addFormatToken('X', 0, 0, 'unix');
    addFormatToken('x', 0, 0, 'valueOf');
    addRegexToken('x', matchSigned);
    addRegexToken('X', matchTimestamp);
    addParseToken('X', function(input, array, config) {
      config._d = new Date(parseFloat(input, 10) * 1000);
    });
    addParseToken('x', function(input, array, config) {
      config._d = new Date(toInt(input));
    });
    utils_hooks__hooks.version = '2.10.3';
    setHookCallback(local__createLocal);
    utils_hooks__hooks.fn = momentPrototype;
    utils_hooks__hooks.min = min;
    utils_hooks__hooks.max = max;
    utils_hooks__hooks.utc = create_utc__createUTC;
    utils_hooks__hooks.unix = moment__createUnix;
    utils_hooks__hooks.months = lists__listMonths;
    utils_hooks__hooks.isDate = isDate;
    utils_hooks__hooks.locale = locale_locales__getSetGlobalLocale;
    utils_hooks__hooks.invalid = valid__createInvalid;
    utils_hooks__hooks.duration = create__createDuration;
    utils_hooks__hooks.isMoment = isMoment;
    utils_hooks__hooks.weekdays = lists__listWeekdays;
    utils_hooks__hooks.parseZone = moment__createInZone;
    utils_hooks__hooks.localeData = locale_locales__getLocale;
    utils_hooks__hooks.isDuration = isDuration;
    utils_hooks__hooks.monthsShort = lists__listMonthsShort;
    utils_hooks__hooks.weekdaysMin = lists__listWeekdaysMin;
    utils_hooks__hooks.defineLocale = defineLocale;
    utils_hooks__hooks.weekdaysShort = lists__listWeekdaysShort;
    utils_hooks__hooks.normalizeUnits = normalizeUnits;
    utils_hooks__hooks.relativeTimeThreshold = duration_humanize__getSetRelativeTimeThreshold;
    var _moment = utils_hooks__hooks;
    return _moment;
  }));
  global.define = __define;
  return module.exports;
});

System.register("promo-manager/partials/itemsearch.html!github:systemjs/plugin-text@0.0.2", [], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  module.exports = "<script type=\"text/ng-template\"  id=\"tree_item_selection_renderer.html\">\r\n\t<div ng-if=\"data.name\">\r\n\t    <button ng-click=\"ctrl.open(data)\" ng-if=\"data.childIdList.length > 0\" ng-hide=\"data.nodes.length > 0\">+</button>\r\n\t    <button ng-click=\"ctrl.delete(data)\" ng-if=\"data.childIdList.length > 0\" ng-show=\"data.nodes.length > 0\">-</button>\r\n\t    \t<span ng-click=\"ctrl.itemSelection(data)\" ng-class=\"{searchedItem:data.searched, selectedItem:ctrl.isSelectedItem(data)}\">{{::data.name}}</span>\r\n\t</div>\r\n    <ul class=\"item-search-ul\">\r\n        <li class=\"item-search-li\" ng-repeat=\"data in data.nodes\" ng-include=\"'tree_item_selection_renderer.html'\">\r\n\t    </li>\r\n    </ul>\r\n</script>\r\n\r\n<div class=\"layout-modal-header\">\r\n    <div class=\"layout-modal-title\" translate=\"ITEM_SEARCH_TITLE\"></div>\r\n    <div ng-click=\"ctrl.dismiss()\" class=\"layout-btn-close\">&times;</div>\r\n    <div class=\"layout-modal-body\">\r\n\t    <div>\r\n\t    \t<span ng-repeat=\"label in ctrl.defaultLabels\">\r\n\t      \t\t<input type=\"text\" ng-model=\"ctrl.search.itemSearch[$index]\" ng-model-options=\"{updateOn: 'default blur',debounce: {default: 500, blur: 0}, getterSetter: true, allowInvalid: true}\" placeholder={{::label}}>\r\n      \t\t</span>\r\n\t    </div>\r\n\r\n\t\t<ul class=\"item-search-ul\">\r\n\t\t    <li class=\"item-search-li\" ng-repeat=\"data in ctrl.itemTree\" ng-include=\"'tree_item_selection_renderer.html'\"></li>\r\n\t\t</ul>\r\n\t    <!--  table -->\r\n\t    <div ng-if=\"ctrl.itemSelections.length\">\r\n\t        <table class=\"table table-bordered table-striped\">\r\n\t            <tr>\r\n\t                <th colspan=\"5\">\r\n\t                    <div class=\"pull-left\" translate=\"ITEM_SEARCH_SELECTED_ITEMS_LABEL\"></div>\r\n\t                    &nbsp;{{ctrl.itemSelections.length}}\r\n\t                </th>\r\n\t            </tr>\r\n\t            <tr>\r\n\t                <th ng-repeat=\"label in ctrl.defaultLabels\">{{::label}}</th>\r\n\t                <th translate=\"ITEM_SEARCH_NAME_ITEMS_LABEL\"></th>\r\n\t                <th class=\"layout-btn-delete\">&times;</th>\r\n\t            </tr>\r\n\t            <tr ng-repeat=\"item in ctrl.itemSelections track by $index\">\r\n\t                <td ng-repeat=\" id in item.ids track by $index\">\r\n\t                \t<span class=\"hyperlink\" ng-click=\"ctrl.openSelection(item)\">{{id}}</span>\r\n\t                </td>\r\n\t                <td>\r\n\t                \t<span class=\"hyperlink\" ng-click=\"ctrl.openSelection(item)\">{{item.name}}</span>\r\n\t                </td>\r\n\t                <td>\r\n\t\t                <span ng-click=\"ctrl.deleteSelection(item)\" class=\"layout-btn-delete hyperlink\">&times;</span>\r\n\t                </td>\r\n\t            </tr>\r\n\t        </table>\r\n\t    </div>\r\n\r\n    </div>\r\n    <div class=\"layout-modal-footer\">\r\n        <span ng-click=\"ctrl.dismiss()\" class=\"layout-btn layout-btn-cancel\" translate=\"LAYOUT_VIEW_MODAL_BUTTON_CLOSE\"></span> \r\n        <span ng-click=\"ctrl.close()\" class=\"layout-btn\" translate=\"LAYOUT_VIEW_MODAL_BUTTON_OK\"></span> \r\n    </div>\r\n</div>\r\n";
  global.define = __define;
  return module.exports;
});

System.register("promo-manager/layout-view/partials/page-add-modal.html!github:systemjs/plugin-text@0.0.2", [], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  module.exports = "<div class=\"layout-modal-header\">\r\n    <div class=\"layout-modal-title\" translate=\"LAYOUT_VIEW_PAGE_ADD_TITLE\"></div>\r\n    <div ng-click=\"ctrl.dismiss()\" class=\"layout-btn-close\">&times;</div>\r\n    <div class=\"layout-modal-body\">\r\n        <label>{{::'LAYOUT_VIEW_PAGES_ADD_LABEL'|translate}}</label>\r\n        <input class=\"small-input\" type=\"text\" ng-change=\"ctrl.createGrid()\" ng-model=\"ctrl.count\" required>\r\n        <label>{{::'LAYOUT_VIEW_PAGES_HEIGHT_COLUMN'|translate}}</label>\r\n        <input class=\"small-input\" type=\"text\" ng-model=\"ctrl.h\" required>\r\n        <label>{{::'LAYOUT_VIEW_PAGES_WIDTH_COLUMN'|translate}}</label>\r\n        <input class=\"small-input\" type=\"text\" ng-model=\"ctrl.w\" required>\r\n        <table class=\"table table-striped table-condensed table-hover\">\r\n            <tr>\r\n                <th translate=\"LAYOUT_VIEW_PAGES_PAGE_COLUMN\"></th>\r\n                <th translate=\"LAYOUT_VIEW_PAGES_GRID_COLUMN\"></th>\r\n            </tr>\r\n            <tr ng-repeat=\"row in ctrl.grid\">\r\n                <td><input readonly class=\"small-input\" ng-model=\"row.index\"></td>\r\n                <td><input ng-model=\"row.pageVersionName\"></td>\r\n            </tr>        \r\n        </table>\r\n    </div>\r\n    <div class=\"layout-modal-footer\">\r\n        <span ng-click=\"ctrl.dismiss()\" class=\"layout-btn layout-btn-cancel\" translate=\"LAYOUT_VIEW_MODAL_BUTTON_CLOSE\"></span> \r\n        <span ng-click=\"ctrl.apply()\" class=\"layout-btn\" translate=\"LAYOUT_VIEW_MODAL_BUTTON_OK\"></span> \r\n    </div>\r\n</div>\r\n";
  global.define = __define;
  return module.exports;
});

System.register("promo-manager/layout-view/partials/page-index-modal.html!github:systemjs/plugin-text@0.0.2", [], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  module.exports = "<div class=\"layout-modal-header\">\r\n    <div class=\"layout-modal-title\" translate=\"LAYOUT_VIEW_PAGE_INDEX_TITLE\"></div>\r\n    <div ng-click=\"ctrl.dismiss()\" class=\"layout-btn-close\">&times;</div>\r\n    <div class=\"layout-modal-body\">\r\n        <table class=\"table table-striped table-condensed table-hover\">\r\n            <tr>\r\n                <th translate=\"LAYOUT_VIEW_PAGES_PAGE_COLUMN\"></th>\r\n                <th translate=\"LAYOUT_VIEW_PAGES_GRID_COLUMN\"></th>\r\n            </tr>\r\n            <tr ng-repeat=\"row in ctrl.grid\">\r\n                <td><input class=\"small-input\" ng-model=\"row.index\"></td>\r\n                <td><input readonly ng-model=\"row.name\"></td>\r\n           </tr>        \r\n        </table>\r\n    </div>\r\n    <div class=\"layout-modal-footer\">\r\n        <span ng-click=\"ctrl.dismiss()\" class=\"layout-btn layout-btn-cancel\" translate=\"LAYOUT_VIEW_MODAL_BUTTON_CLOSE\"></span> \r\n        <span ng-click=\"ctrl.apply()\" class=\"layout-btn\" translate=\"LAYOUT_VIEW_MODAL_BUTTON_OK\"></span> \r\n    </div>\r\n</div>\r\n";
  global.define = __define;
  return module.exports;
});

System.register("promo-manager/layout-view/partials/page-edit-modal.html!github:systemjs/plugin-text@0.0.2", [], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  module.exports = "<div class=\"layout-modal-header\">\r\n    <div class=\"layout-modal-title\">{{::ctrl.title}}</div>\r\n    <div ng-click=\"ctrl.dismiss()\" class=\"layout-btn-close\">&times;</div>\r\n    <div class=\"layout-modal-body\">\r\n        <label>{{::'LAYOUT_VIEW_PAGES_NAME_COLUMN' | translate}}</label>\r\n        <input type=\"text\" ng-model=\"ctrl.name\" required>\r\n        <label>{{::'LAYOUT_VIEW_PAGES_HEIGHT_COLUMN' | translate}}</label>\r\n        <input class=\"small-input\" type=\"text\" ng-model=\"ctrl.h\" required>\r\n        <label>{{::'LAYOUT_VIEW_PAGES_WIDTH_COLUMN' | translate}}</label>\r\n        <input class=\"small-input\" type=\"text\" ng-model=\"ctrl.w\" required>\r\n    </div>\r\n    <div class=\"layout-modal-body\">\r\n        <label>\r\n            <input type=\"checkbox\" ng-checked=\"ctrl.isCoop\" ng-model=\"ctrl.isCoop\"/> {{::'LAYOUT_VIEW_PAGES_EDIT_PAGE_IS_COOP' | translate}}\r\n        </label>       \r\n        <label>{{::'LAYOUT_VIEW_PAGES_EDIT_PAGE_THEME' | translate}}</label>\r\n        <input class=\"small-input\" type=\"text\" ng-model=\"ctrl.theme\" required>\r\n        <label>{{::'LAYOUT_VIEW_PAGES_EDIT_PAGE_NOTES' | translate}}</label>\r\n        <textarea rows=\"1\" ng-model=\"ctrl.notes\"></textarea>                 \r\n    </div>\r\n    <div class=\"layout-modal-body\">\r\n        <div merchandise-hierarchy-native-selection\r\n          ng-model=\"ctrl.hierarchyId\"\r\n          tree-map=\"ctrl.layoutView.merchandiseHierarchy\"\r\n          default-labels=\"ctrl.merchandiseHierarchySelectionLabels\"\r\n        >\r\n        </div>\r\n    </div>\r\n\r\n    <div class=\"layout-modal-footer\">\r\n        <span ng-click=\"ctrl.dismiss()\" class=\"layout-btn layout-btn-cancel\" translate=\"LAYOUT_VIEW_MODAL_BUTTON_CLOSE\"></span> \r\n        <span ng-click=\"ctrl.apply()\" class=\"layout-btn\" translate=\"LAYOUT_VIEW_MODAL_BUTTON_OK\"></span> \r\n    </div>\r\n</div>\r\n";
  global.define = __define;
  return module.exports;
});

System.register("promo-manager/layout-view/partials/page-delete-modal.html!github:systemjs/plugin-text@0.0.2", [], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  module.exports = "<div class=\"layout-modal-header\">\r\n    <div class=\"layout-modal-title\">{{::ctrl.title}}</div>\r\n    <div ng-click=\"ctrl.dismiss()\" class=\"layout-btn-close\">&times;</div>\r\n    <div class=\"layout-modal-body\">\r\n    <span class=\"msg\" translate=\"LAYOUT_VIEW_DELETE_PAGE\"></span>\r\n    </div>\r\n    <div class=\"layout-modal-body\">\r\n        <div>\r\n        \t{{::'LAYOUT_VIEW_PAGES_PAGE_COLUMN' | translate}}:&nbsp;\r\n            {{::ctrl.index}}\r\n        </div>\r\n        <label>\r\n            <input type=\"checkbox\" ng-checked=\"ctrl.moveOffers\" ng-model=\"ctrl.moveOffers\"/>{{::'OFFERS_LIST_MOVE_OFFERS_TO_PARKING_LOT_LABEL' | translate}}\r\n        </label>       \r\n    </div>\r\n\r\n    <div class=\"layout-modal-footer\">\r\n        <span ng-click=\"ctrl.dismiss()\" class=\"layout-btn layout-btn-cancel\" translate=\"LAYOUT_VIEW_MODAL_BUTTON_CLOSE\"></span> \r\n        <span ng-click=\"ctrl.apply()\" class=\"layout-btn\" translate=\"LAYOUT_VIEW_MODAL_BUTTON_OK\"></span> \r\n    </div>\r\n</div>\r\n";
  global.define = __define;
  return module.exports;
});

System.register("promo-manager/layout-view/partials/page-template-clear-modal.html!github:systemjs/plugin-text@0.0.2", [], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  module.exports = "<div class=\"layout-modal-header\">\r\n    <div class=\"layout-modal-title\">{{::ctrl.title}}</div>\r\n    <div ng-click=\"ctrl.dismiss()\" class=\"layout-btn-close\">&times;</div>\r\n    <div class=\"layout-modal-body\">\r\n    <span class=\"msg\" translate=\"LAYOUT_VIEW_CLEAR_TEMPLATE\"></span>\r\n    </div>\r\n    <div class=\"layout-modal-body\">\r\n        <div>\r\n        \t{{::'LAYOUT_VIEW_PAGES_NAME_COLUMN'|translate}}:&nbsp;\r\n            {{::ctrl.name}}\r\n        </div>\r\n        <div>\r\n        \t{{::'LAYOUT_VIEW_PAGES_HEIGHT_COLUMN'|translate}}:&nbsp;\r\n            {{::ctrl.h}}\r\n        </div>\r\n        <div>\r\n        \t{{::'LAYOUT_VIEW_PAGES_WIDTH_COLUMN'|translate}}:&nbsp;\r\n            {{::ctrl.w}}\r\n        </div>\r\n        <label><input type=\"checkbox\" ng-checked=\"ctrl.moveOffers\" ng-model=\"ctrl.moveOffers\"/> {{::'OFFERS_LIST_MOVE_OFFERS_TO_PARKING_LOT_LABEL'|translate}}\r\n        </label>       \r\n    </div>\r\n    <div class=\"layout-modal-footer\">\r\n        <span ng-click=\"ctrl.dismiss()\" class=\"layout-btn layout-btn-cancel\" translate=\"LAYOUT_VIEW_MODAL_BUTTON_CLOSE\"></span> \r\n        <span ng-click=\"ctrl.apply()\" class=\"layout-btn\" translate=\"LAYOUT_VIEW_MODAL_BUTTON_OK\"></span> \r\n    </div>\r\n</div>\r\n";
  global.define = __define;
  return module.exports;
});

System.register("promo-manager/layout-view/partials/page-template-apply-modal.html!github:systemjs/plugin-text@0.0.2", [], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  module.exports = "<div class=\"layout-modal-header\">\r\n    <div class=\"layout-modal-title\" translate=\"LAYOUT_VIEW_PAGES_APPLY_TEMPLATE_TITLE\"></div>\r\n    <div ng-click=\"ctrl.dismiss()\" class=\"layout-btn-close\">&times;</div>\r\n    <div class=\"layout-modal-body\">\r\n\t\t<div class=\"filter-Line\">\r\n\t\t\t{{::'CHANNEL_LABEL' | translate}}\r\n\t\t\t<select ng-options=\"channel.id as channel.name for channel in ctrl.channels\" ng-model=\"ctrl.channel\"></select>\r\n      \t\t{{::'SEARCH_LABEL' | translate}} \r\n      \t\t<input type=\"text\" ng-model=\"ctrl.search.templateSearch\" ng-model-options=\"{updateOn: 'default blur',debounce: {default: 500, blur: 0}, getterSetter: true, allowInvalid: true}\">\r\n\t        <span ng-disabled=\"ctrl.search.disabled\" ng-click=\"ctrl.loadTemplates()\" class=\"layout-btn\" translate=\"SEARCH_BUTTON_LABEL\"></span> \r\n\t\t</div>\r\n    </div>\r\n    <div class=\"layout-modal-body\">\r\n        <div>\r\n        \t{{::'LAYOUT_VIEW_PAGES_NAME_COLUMN'|translate}}:&nbsp;\r\n            {{::ctrl.name}}\r\n        \t{{::'LAYOUT_VIEW_PAGES_HEIGHT_COLUMN'|translate}}:&nbsp;\r\n            {{::ctrl.h}}\r\n        \t{{::'LAYOUT_VIEW_PAGES_WIDTH_COLUMN'|translate}}:&nbsp;\r\n            {{::ctrl.w}}\r\n        </div>\r\n   </div>\r\n    <div class=\"layout-modal-body\">\r\n        <div ng-show=\"ctrl.totalRecords > 0\" class=\"layout-view-pagination-control\">\r\n            <span class=\"hyperlink\" ng-click=\"ctrl.getPreviousPage(ctrl.numPerPage)\">&lt;</span>\r\n            <span class=\"hyperlink\" ng-click=\"ctrl.getNextPage(ctrl.numPerPage)\">&gt;</span>\r\n<!--             <span class=\"hyperlink\" ng-click=\"ctrl.getPreviousPage(ctrl.numPerPage)\"><i class=\"glyphicon glyphicon-chevron-left\"></i></span>\r\n            <span class=\"hyperlink\" ng-click=\"ctrl.getNextPage(ctrl.numPerPage)\"><i class=\"glyphicon glyphicon-chevron-right\" ></i></span>\r\n -->            <span>{{ctrl.offset}} &#45; {{ctrl.limit}} of {{ctrl.totalRecords}}</span>\r\n        </div>\r\n    \r\n\t    <div class=\"radio\" ng-repeat=\"template in ctrl.templates\">\r\n\t      \t<label>\r\n\t        \t<input type=\"radio\" name=\"template\" ng-click=\"ctrl.handleRadioClick(template)\">{{::template.name}}\r\n\t      \t</label>\r\n    \t\t{{::template.lastUsedDate | date:ctrl.dateFormat}}\r\n            <span thumbnail-canvas-renderer block-list=\"template.blockList\"></span>\r\n\t    </div>\r\n    </div>\r\n    <div class=\"layout-modal-footer\">\r\n        <button ng-click=\"ctrl.dismiss()\" class=\"layout-btn layout-btn-cancel\" translate=\"LAYOUT_VIEW_MODAL_BUTTON_CLOSE\"></button> \r\n        <button ng-disabled=\"ctrl.disabled\" ng-click=\"ctrl.apply()\" class=\"layout-btn\" translate=\"LAYOUT_VIEW_MODAL_BUTTON_OK\"></button> \r\n    </div>\r\n</div>\r\n";
  global.define = __define;
  return module.exports;
});

System.register("promo-manager/layout-view/partials/page-move-offers-to-parking-lot-modal.html!github:systemjs/plugin-text@0.0.2", [], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  module.exports = "<div class=\"layout-modal-header\">\r\n    <div class=\"layout-modal-title\">{{::ctrl.title}}</div>\r\n    <div ng-click=\"ctrl.dismiss()\" class=\"layout-btn-close\">&times;</div>\r\n    <div class=\"layout-modal-body\">\r\n        <span class=\"msg\" translate=\"LAYOUT_VIEW_MOVE_OFFERS_TO_PARKING_LOT\"></span>\r\n    </div>\r\n    <div class=\"layout-modal-body\">\r\n        <div>\r\n        \t{{::'LAYOUT_VIEW_PAGES_NAME_COLUMN'|translate}}:&nbsp;\r\n            {{::ctrl.name}}\r\n        </div>\r\n        <div>\r\n        \t{{::'LAYOUT_VIEW_PAGES_HEIGHT_COLUMN'|translate}}:&nbsp;\r\n            {{::ctrl.h}}\r\n        </div>\r\n        <div>\r\n        \t{{::'LAYOUT_VIEW_PAGES_WIDTH_COLUMN'|translate}}:&nbsp;\r\n            {{::ctrl.w}}\r\n        </div>\r\n    </div>\r\n\r\n    <div class=\"layout-modal-footer\">\r\n        <span ng-click=\"ctrl.dismiss()\" class=\"layout-btn layout-btn-cancel\" translate=\"LAYOUT_VIEW_MODAL_BUTTON_CLOSE\"></span> \r\n        <span ng-click=\"ctrl.apply()\" class=\"layout-btn\" translate=\"LAYOUT_VIEW_MODAL_BUTTON_OK\"></span> \r\n    </div>\r\n</div>\r\n";
  global.define = __define;
  return module.exports;
});

System.register("promo-manager/layout-view/partials/block-move-offers-to-basket-modal.html!github:systemjs/plugin-text@0.0.2", [], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  module.exports = "<div class=\"layout-modal-header\">\r\n    <div class=\"layout-modal-title\">{{::ctrl.title}}</div>\r\n    <div ng-click=\"ctrl.dismiss()\" class=\"layout-btn-close\">&times;</div>\r\n    <div class=\"layout-modal-body\">\r\n        <span class=\"msg\" translate=\"LAYOUT_VIEW_ADD_OFFERS_TO_BASKET\"></span>\r\n    </div>\r\n    <div class=\"layout-modal-body\">\r\n        <div>\r\n        \t{{::'LAYOUT_VIEW_BLOCK_NAME_COLUMN'|translate}}:&nbsp;\r\n            {{::ctrl.name}}\r\n        </div>\r\n    </div>\r\n\r\n    <div class=\"layout-modal-footer\">\r\n        <span ng-click=\"ctrl.dismiss()\" class=\"layout-btn layout-btn-cancel\" translate=\"LAYOUT_VIEW_MODAL_BUTTON_CLOSE\"></span> \r\n        <span ng-click=\"ctrl.apply()\" class=\"layout-btn\" translate=\"LAYOUT_VIEW_MODAL_BUTTON_OK\"></span> \r\n    </div>\r\n</div>\r\n";
  global.define = __define;
  return module.exports;
});

System.register("promo-manager/layout-view/partials/block-edit-modal.html!github:systemjs/plugin-text@0.0.2", [], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  module.exports = "<div class=\"layout-modal-header\">\r\n    <div class=\"layout-modal-title\">{{::ctrl.title}}</div>\r\n    <div ng-click=\"ctrl.dismiss()\" class=\"layout-btn-close\">&times;</div>\r\n    <div class=\"layout-modal-body\">\r\n        <label>{{::'LAYOUT_VIEW_BLOCK_EDIT_USER_DEFINED_NAME' | translate}}</label>\r\n        <input type=\"text\" ng-model=\"ctrl.userDefinedName\" required>\r\n    </div>\r\n    <div class=\"layout-modal-body\">\r\n        <label>\r\n            <input type=\"checkbox\" ng-checked=\"ctrl.isCoop\" ng-model=\"ctrl.isCoop\"/> {{::'LAYOUT_VIEW_PAGES_EDIT_PAGE_IS_COOP' | translate}}\r\n        </label>       \r\n    </div>\r\n    <div class=\"layout-modal-body\">\r\n        <label>{{::'LAYOUT_VIEW_PAGES_EDIT_PAGE_THEME' | translate}}</label>\r\n        <input type=\"text\" ng-model=\"ctrl.theme\" required>\r\n    </div>\r\n    <div class=\"layout-modal-body\">\r\n        <div merchandise-hierarchy-native-selection\r\n          ng-model=\"ctrl.hierarchyId\"\r\n          tree-map=\"ctrl.layoutView.merchandiseHierarchy\"\r\n          default-labels=\"ctrl.merchandiseHierarchySelectionLabels\"\r\n        >\r\n        </div>\r\n    </div>\r\n    <div class=\"layout-modal-body\">\r\n        <label>{{::'LAYOUT_VIEW_BLOCK_EDIT_COLOR' | translate}}</label>\r\n        <input type=\"text\" ng-model=\"ctrl.color\" required>\r\n    </div>\r\n\r\n    <div class=\"layout-modal-footer\">\r\n        <span ng-click=\"ctrl.dismiss()\" class=\"layout-btn layout-btn-cancel\" translate=\"LAYOUT_VIEW_MODAL_BUTTON_CLOSE\"></span> \r\n        <span ng-click=\"ctrl.apply()\" class=\"layout-btn\" translate=\"LAYOUT_VIEW_MODAL_BUTTON_OK\"></span> \r\n    </div>\r\n</div>\r\n";
  global.define = __define;
  return module.exports;
});

System.register("promo-manager/partials/multidropdownnativeselection.html!github:systemjs/plugin-text@0.0.2", [], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  module.exports = "<div ng-repeat=\"dropdown in ctrl.dropdowns\">\r\n\t<select ng-options=\"option.id as option.name for option in dropdown\"\r\n\t  ng-disabled=\"disableSelection\"\r\n\t  ng-model=\"ctrl.shadowModel[$index]\"\r\n\t  ng-change=\"ctrl.updateModel(ctrl.shadowModel[$index])\"\r\n\t>\r\n\t</select>\r\n</div>\r\n";
  global.define = __define;
  return module.exports;
});

System.register("promo-manager/layout-view/partials/layout-view.html!github:systemjs/plugin-text@0.0.2", [], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  module.exports = "<div id=\"layout-viewport\" ng-if=\"ctrl.layoutView.done\" class=\"viewport noclip\" tabindex=\"-1\" layout-view-input=\"ctrl.handleInputs($event)\" layout-view-events=\"ctrl.inputEvents\" >\r\n\t<div class=\"layoutview-header\">\r\n\t\t<ul>\r\n\t\t\t<li>\r\n\t\t\t\t<select ng-options=\"version.id as version.name for version in ctrl.layoutView.vehicleVersions\"\r\n\t\t\t\t  ng-model=\"ctrl.layoutView.selectedVehicleVersion.id\"\r\n\t\t\t\t  ng-change=\"ctrl.updateSelectedVehicleVersion(ctrl.layoutView.selectedVehicleVersion.id)\"\r\n\t\t\t\t>\r\n\t\t\t\t</select>\r\n\t\t\t</li>\r\n\t\t\t<li>\r\n\t\t\t\t<select ng-options=\"version as version for version in ctrl.layoutView.layoutModel.getLayoutVersionIdList()\"\r\n\t\t\t\t  ng-model=\"ctrl.layoutView.selectedLayoutVersionId\"\r\n\t\t\t\t  ng-change=\"ctrl.updateSelectedLayoutVersion(ctrl.layoutView.selectedLayoutVersionId)\"\r\n\t\t\t\t>\r\n\t\t\t\t</select>\r\n\t\t\t</li>\r\n\r\n\t\t\t<li>\r\n\t\t\t\t<div merchandise-hierarchy-native-selection\r\n\t\t\t\t  ng-model=\"ctrl.merchandiseHierarchyId\"\r\n\t\t\t\t  tree-map=\"ctrl.layoutView.merchandiseHierarchy\"\r\n\t\t\t\t  default-labels=\"ctrl.merchandiseHierarchySelectionLabelFilters\"\r\n\t\t\t\t  class=\"filter-mhList\"\r\n\t\t\t\t>\r\n\t\t\t\t</div>\r\n\t\t\t</li>\r\n\t\t</ul>\r\n\t</div>\r\n\t<div class=\"card\" ng-style=\"ctrl.cardObject._cameraSpaceStyles\" ng-if=\"ctrl.cardObject\">card: {{ctrl.cardObject.src.offerVersion.id}}</div>\r\n\t<div ng-repeat-start=\"pageVersion in ctrl.getPagesInViewport()\"></div>\r\n\t<div ng-switch=\"pageVersion.type\">\r\n\t\t<div ng-switch-when=\"page\">\r\n\t\t\t<div class=\"layoutview-pageversion\" ng-class=\"{'object-disabled': ctrl.isDisabled(pageVersion)}\"  ng-style=\"pageVersion._cameraSpaceStyles\"></div>\r\n\t\t</div>\r\n\t\t<div ng-switch-when=\"page-grip\">\r\n\t\t\t<div class=\"pageversion-grip\" ng-class=\"{'object-disabled': ctrl.isDisabled(pageVersion)}\" ng-style=\"pageVersion._cameraSpaceStyles\">\r\n\t\t\t\t<div class=\"grip-row\">\r\n\t\t\t\t\t<div class=\"grip-content\">\r\n\t\t\t\t\t\tPV id: {{pageVersion.pageVersion.id}}\r\n\t\t\t\t\t\t{{pageVersion.header}}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div class=\"grip-menu\" toggle-state=\"pageVersion.open\" toggle-unique=\"true\">\r\n\t\t\t\t\t\t<span>Menu</span>\r\n\t\t\t\t\t\t<div ng-show=\"pageVersion.open\" class=\"grip-menu-items\">\r\n\t\t\t\t\t\t    <div class=\"hyperlink\" ng-repeat=\"action in pageVersion.pageVersion.permittedActions\" ng-if=\"action.name\" ng-click=\"ctrl.getPageVersionModalHandler(action.id, pageVersion.pageVersion)\">{{action.name}}\r\n\t\t\t\t\t\t    </div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</div>\r\n\t<div ng-repeat-end ng-repeat=\"block in pageVersion.blockList\" ng-class=\"{'object-disabled': ctrl.isDisabled(block)}\" class=\"layoutview-block\" ng-style=\"block._cameraSpaceStyles\">\r\n\t\t<div class=\"block-grip\">\r\n\t\t\t<div class=\"grip-row\">\r\n\t\t\t\t<div class=\"grip-content\">\r\n\t\t\t\t\tB: {{block.id}} \r\n\t\t\t\t</div>\r\n\t\t\t\t<div class=\"grip-menu\" toggle-state=\"block.open\" toggle-unique=\"true\">\r\n\t\t\t\t  \t<span>bm</span>\r\n\t\t\t\t    <div ng-show=\"block.open\" class=\"grip-menu-items\">\r\n\t\t\t\t\t    <div class=\"hyperlink\" ng-repeat=\"action in block.permittedActions\" ng-if=\"action.name\" ng-click=\"ctrl.getBlockModalHandler(action.id, block, pageVersion)\">{{action.name}}\r\n\t\t\t\t\t    </div>\r\n\t\t\t    \t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t\t<span ng-class=\"{'object-disabled': ctrl.isDisabled(block.offerVersion)}\"  ng-if=\"block.offerVersion\">\r\n\t\t\t<div class=\"block-offer-grip drag-handle\">\r\n\t\t\t\t{{block.offerVersion.hierarchyId | merchandiseHierarchyNodePath:ctrl.layoutView.merchandiseHierarchy}}\r\n\t\t\t</div>\r\n\t\t</span>\r\n\t</div>\r\n\t<div class=\"layoutview-footer\">\r\n\t\t<ul>  \r\n\t\t    <li class=\"layout-btn\" ng-repeat=\"action in ctrl.layoutView.layoutModel.permittedActions\" ng-if=\"action.name\" ng-click=\"ctrl.getPageModalHandler(action.id)\">{{action.name}}\r\n\t\t    </li>\r\n\t\t</ul>\r\n\t</div>\r\n</div>\r\n";
  global.define = __define;
  return module.exports;
});

System.register("npm:core-js@0.9.13/library/modules/$", ["npm:core-js@0.9.13/library/modules/$.fw"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var global = typeof self != 'undefined' ? self : Function('return this')(),
      core = {},
      defineProperty = Object.defineProperty,
      hasOwnProperty = {}.hasOwnProperty,
      ceil = Math.ceil,
      floor = Math.floor,
      max = Math.max,
      min = Math.min;
  var DESC = !!function() {
    try {
      return defineProperty({}, 'a', {get: function() {
          return 2;
        }}).a == 2;
    } catch (e) {}
  }();
  var hide = createDefiner(1);
  function toInteger(it) {
    return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
  }
  function desc(bitmap, value) {
    return {
      enumerable: !(bitmap & 1),
      configurable: !(bitmap & 2),
      writable: !(bitmap & 4),
      value: value
    };
  }
  function simpleSet(object, key, value) {
    object[key] = value;
    return object;
  }
  function createDefiner(bitmap) {
    return DESC ? function(object, key, value) {
      return $.setDesc(object, key, desc(bitmap, value));
    } : simpleSet;
  }
  function isObject(it) {
    return it !== null && (typeof it == 'object' || typeof it == 'function');
  }
  function isFunction(it) {
    return typeof it == 'function';
  }
  function assertDefined(it) {
    if (it == undefined)
      throw TypeError("Can't call method on  " + it);
    return it;
  }
  var $ = module.exports = require("npm:core-js@0.9.13/library/modules/$.fw")({
    g: global,
    core: core,
    html: global.document && document.documentElement,
    isObject: isObject,
    isFunction: isFunction,
    that: function() {
      return this;
    },
    toInteger: toInteger,
    toLength: function(it) {
      return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0;
    },
    toIndex: function(index, length) {
      index = toInteger(index);
      return index < 0 ? max(index + length, 0) : min(index, length);
    },
    has: function(it, key) {
      return hasOwnProperty.call(it, key);
    },
    create: Object.create,
    getProto: Object.getPrototypeOf,
    DESC: DESC,
    desc: desc,
    getDesc: Object.getOwnPropertyDescriptor,
    setDesc: defineProperty,
    setDescs: Object.defineProperties,
    getKeys: Object.keys,
    getNames: Object.getOwnPropertyNames,
    getSymbols: Object.getOwnPropertySymbols,
    assertDefined: assertDefined,
    ES5Object: Object,
    toObject: function(it) {
      return $.ES5Object(assertDefined(it));
    },
    hide: hide,
    def: createDefiner(0),
    set: global.Symbol ? simpleSet : hide,
    each: [].forEach
  });
  if (typeof __e != 'undefined')
    __e = core;
  if (typeof __g != 'undefined')
    __g = global;
  global.define = __define;
  return module.exports;
});

System.register("npm:gl-matrix@2.3.1/src/gl-matrix/quat", ["npm:gl-matrix@2.3.1/src/gl-matrix/common", "npm:gl-matrix@2.3.1/src/gl-matrix/mat3", "npm:gl-matrix@2.3.1/src/gl-matrix/vec3", "npm:gl-matrix@2.3.1/src/gl-matrix/vec4"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  var glMatrix = require("npm:gl-matrix@2.3.1/src/gl-matrix/common");
  var mat3 = require("npm:gl-matrix@2.3.1/src/gl-matrix/mat3");
  var vec3 = require("npm:gl-matrix@2.3.1/src/gl-matrix/vec3");
  var vec4 = require("npm:gl-matrix@2.3.1/src/gl-matrix/vec4");
  var quat = {};
  quat.create = function() {
    var out = new glMatrix.ARRAY_TYPE(4);
    out[0] = 0;
    out[1] = 0;
    out[2] = 0;
    out[3] = 1;
    return out;
  };
  quat.rotationTo = (function() {
    var tmpvec3 = vec3.create();
    var xUnitVec3 = vec3.fromValues(1, 0, 0);
    var yUnitVec3 = vec3.fromValues(0, 1, 0);
    return function(out, a, b) {
      var dot = vec3.dot(a, b);
      if (dot < -0.999999) {
        vec3.cross(tmpvec3, xUnitVec3, a);
        if (vec3.length(tmpvec3) < 0.000001)
          vec3.cross(tmpvec3, yUnitVec3, a);
        vec3.normalize(tmpvec3, tmpvec3);
        quat.setAxisAngle(out, tmpvec3, Math.PI);
        return out;
      } else if (dot > 0.999999) {
        out[0] = 0;
        out[1] = 0;
        out[2] = 0;
        out[3] = 1;
        return out;
      } else {
        vec3.cross(tmpvec3, a, b);
        out[0] = tmpvec3[0];
        out[1] = tmpvec3[1];
        out[2] = tmpvec3[2];
        out[3] = 1 + dot;
        return quat.normalize(out, out);
      }
    };
  })();
  quat.setAxes = (function() {
    var matr = mat3.create();
    return function(out, view, right, up) {
      matr[0] = right[0];
      matr[3] = right[1];
      matr[6] = right[2];
      matr[1] = up[0];
      matr[4] = up[1];
      matr[7] = up[2];
      matr[2] = -view[0];
      matr[5] = -view[1];
      matr[8] = -view[2];
      return quat.normalize(out, quat.fromMat3(out, matr));
    };
  })();
  quat.clone = vec4.clone;
  quat.fromValues = vec4.fromValues;
  quat.copy = vec4.copy;
  quat.set = vec4.set;
  quat.identity = function(out) {
    out[0] = 0;
    out[1] = 0;
    out[2] = 0;
    out[3] = 1;
    return out;
  };
  quat.setAxisAngle = function(out, axis, rad) {
    rad = rad * 0.5;
    var s = Math.sin(rad);
    out[0] = s * axis[0];
    out[1] = s * axis[1];
    out[2] = s * axis[2];
    out[3] = Math.cos(rad);
    return out;
  };
  quat.add = vec4.add;
  quat.multiply = function(out, a, b) {
    var ax = a[0],
        ay = a[1],
        az = a[2],
        aw = a[3],
        bx = b[0],
        by = b[1],
        bz = b[2],
        bw = b[3];
    out[0] = ax * bw + aw * bx + ay * bz - az * by;
    out[1] = ay * bw + aw * by + az * bx - ax * bz;
    out[2] = az * bw + aw * bz + ax * by - ay * bx;
    out[3] = aw * bw - ax * bx - ay * by - az * bz;
    return out;
  };
  quat.mul = quat.multiply;
  quat.scale = vec4.scale;
  quat.rotateX = function(out, a, rad) {
    rad *= 0.5;
    var ax = a[0],
        ay = a[1],
        az = a[2],
        aw = a[3],
        bx = Math.sin(rad),
        bw = Math.cos(rad);
    out[0] = ax * bw + aw * bx;
    out[1] = ay * bw + az * bx;
    out[2] = az * bw - ay * bx;
    out[3] = aw * bw - ax * bx;
    return out;
  };
  quat.rotateY = function(out, a, rad) {
    rad *= 0.5;
    var ax = a[0],
        ay = a[1],
        az = a[2],
        aw = a[3],
        by = Math.sin(rad),
        bw = Math.cos(rad);
    out[0] = ax * bw - az * by;
    out[1] = ay * bw + aw * by;
    out[2] = az * bw + ax * by;
    out[3] = aw * bw - ay * by;
    return out;
  };
  quat.rotateZ = function(out, a, rad) {
    rad *= 0.5;
    var ax = a[0],
        ay = a[1],
        az = a[2],
        aw = a[3],
        bz = Math.sin(rad),
        bw = Math.cos(rad);
    out[0] = ax * bw + ay * bz;
    out[1] = ay * bw - ax * bz;
    out[2] = az * bw + aw * bz;
    out[3] = aw * bw - az * bz;
    return out;
  };
  quat.calculateW = function(out, a) {
    var x = a[0],
        y = a[1],
        z = a[2];
    out[0] = x;
    out[1] = y;
    out[2] = z;
    out[3] = Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));
    return out;
  };
  quat.dot = vec4.dot;
  quat.lerp = vec4.lerp;
  quat.slerp = function(out, a, b, t) {
    var ax = a[0],
        ay = a[1],
        az = a[2],
        aw = a[3],
        bx = b[0],
        by = b[1],
        bz = b[2],
        bw = b[3];
    var omega,
        cosom,
        sinom,
        scale0,
        scale1;
    cosom = ax * bx + ay * by + az * bz + aw * bw;
    if (cosom < 0.0) {
      cosom = -cosom;
      bx = -bx;
      by = -by;
      bz = -bz;
      bw = -bw;
    }
    if ((1.0 - cosom) > 0.000001) {
      omega = Math.acos(cosom);
      sinom = Math.sin(omega);
      scale0 = Math.sin((1.0 - t) * omega) / sinom;
      scale1 = Math.sin(t * omega) / sinom;
    } else {
      scale0 = 1.0 - t;
      scale1 = t;
    }
    out[0] = scale0 * ax + scale1 * bx;
    out[1] = scale0 * ay + scale1 * by;
    out[2] = scale0 * az + scale1 * bz;
    out[3] = scale0 * aw + scale1 * bw;
    return out;
  };
  quat.sqlerp = (function() {
    var temp1 = quat.create();
    var temp2 = quat.create();
    return function(out, a, b, c, d, t) {
      quat.slerp(temp1, a, d, t);
      quat.slerp(temp2, b, c, t);
      quat.slerp(out, temp1, temp2, 2 * t * (1 - t));
      return out;
    };
  }());
  quat.invert = function(out, a) {
    var a0 = a[0],
        a1 = a[1],
        a2 = a[2],
        a3 = a[3],
        dot = a0 * a0 + a1 * a1 + a2 * a2 + a3 * a3,
        invDot = dot ? 1.0 / dot : 0;
    out[0] = -a0 * invDot;
    out[1] = -a1 * invDot;
    out[2] = -a2 * invDot;
    out[3] = a3 * invDot;
    return out;
  };
  quat.conjugate = function(out, a) {
    out[0] = -a[0];
    out[1] = -a[1];
    out[2] = -a[2];
    out[3] = a[3];
    return out;
  };
  quat.length = vec4.length;
  quat.len = quat.length;
  quat.squaredLength = vec4.squaredLength;
  quat.sqrLen = quat.squaredLength;
  quat.normalize = vec4.normalize;
  quat.fromMat3 = function(out, m) {
    var fTrace = m[0] + m[4] + m[8];
    var fRoot;
    if (fTrace > 0.0) {
      fRoot = Math.sqrt(fTrace + 1.0);
      out[3] = 0.5 * fRoot;
      fRoot = 0.5 / fRoot;
      out[0] = (m[5] - m[7]) * fRoot;
      out[1] = (m[6] - m[2]) * fRoot;
      out[2] = (m[1] - m[3]) * fRoot;
    } else {
      var i = 0;
      if (m[4] > m[0])
        i = 1;
      if (m[8] > m[i * 3 + i])
        i = 2;
      var j = (i + 1) % 3;
      var k = (i + 2) % 3;
      fRoot = Math.sqrt(m[i * 3 + i] - m[j * 3 + j] - m[k * 3 + k] + 1.0);
      out[i] = 0.5 * fRoot;
      fRoot = 0.5 / fRoot;
      out[3] = (m[j * 3 + k] - m[k * 3 + j]) * fRoot;
      out[j] = (m[j * 3 + i] + m[i * 3 + j]) * fRoot;
      out[k] = (m[k * 3 + i] + m[i * 3 + k]) * fRoot;
    }
    return out;
  };
  quat.str = function(a) {
    return 'quat(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';
  };
  module.exports = quat;
  global.define = __define;
  return module.exports;
});

(function() {
function define(){};  define.amd = {};
System.register("github:andris9/simpleStorage@0.1.3", ["github:andris9/simpleStorage@0.1.3/simpleStorage"], false, function(__require, __exports, __module) {
  return (function(main) {
    return main;
  }).call(this, __require('github:andris9/simpleStorage@0.1.3/simpleStorage'));
});
})();
System.register("npm:core-js@0.9.13/library/modules/$.wks", ["npm:core-js@0.9.13/library/modules/$", "npm:core-js@0.9.13/library/modules/$.shared", "npm:core-js@0.9.13/library/modules/$.uid"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  var global = require("npm:core-js@0.9.13/library/modules/$").g,
      store = require("npm:core-js@0.9.13/library/modules/$.shared")('wks');
  module.exports = function(name) {
    return store[name] || (store[name] = global.Symbol && global.Symbol[name] || require("npm:core-js@0.9.13/library/modules/$.uid").safe('Symbol.' + name));
  };
  global.define = __define;
  return module.exports;
});

System.register("npm:core-js@0.9.13/library/modules/$.iter", ["npm:core-js@0.9.13/library/modules/$", "npm:core-js@0.9.13/library/modules/$.cof", "npm:core-js@0.9.13/library/modules/$.assert", "npm:core-js@0.9.13/library/modules/$.wks", "npm:core-js@0.9.13/library/modules/$.shared"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var $ = require("npm:core-js@0.9.13/library/modules/$"),
      cof = require("npm:core-js@0.9.13/library/modules/$.cof"),
      assertObject = require("npm:core-js@0.9.13/library/modules/$.assert").obj,
      SYMBOL_ITERATOR = require("npm:core-js@0.9.13/library/modules/$.wks")('iterator'),
      FF_ITERATOR = '@@iterator',
      Iterators = require("npm:core-js@0.9.13/library/modules/$.shared")('iterators'),
      IteratorPrototype = {};
  setIterator(IteratorPrototype, $.that);
  function setIterator(O, value) {
    $.hide(O, SYMBOL_ITERATOR, value);
    if (FF_ITERATOR in [])
      $.hide(O, FF_ITERATOR, value);
  }
  module.exports = {
    BUGGY: 'keys' in [] && !('next' in [].keys()),
    Iterators: Iterators,
    step: function(done, value) {
      return {
        value: value,
        done: !!done
      };
    },
    is: function(it) {
      var O = Object(it),
          Symbol = $.g.Symbol,
          SYM = Symbol && Symbol.iterator || FF_ITERATOR;
      return SYM in O || SYMBOL_ITERATOR in O || $.has(Iterators, cof.classof(O));
    },
    get: function(it) {
      var Symbol = $.g.Symbol,
          ext = it[Symbol && Symbol.iterator || FF_ITERATOR],
          getIter = ext || it[SYMBOL_ITERATOR] || Iterators[cof.classof(it)];
      return assertObject(getIter.call(it));
    },
    set: setIterator,
    create: function(Constructor, NAME, next, proto) {
      Constructor.prototype = $.create(proto || IteratorPrototype, {next: $.desc(1, next)});
      cof.set(Constructor, NAME + ' Iterator');
    }
  };
  global.define = __define;
  return module.exports;
});

System.register("npm:core-js@0.9.13/library/modules/$.iter-define", ["npm:core-js@0.9.13/library/modules/$.def", "npm:core-js@0.9.13/library/modules/$.redef", "npm:core-js@0.9.13/library/modules/$", "npm:core-js@0.9.13/library/modules/$.cof", "npm:core-js@0.9.13/library/modules/$.iter", "npm:core-js@0.9.13/library/modules/$.wks"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  var $def = require("npm:core-js@0.9.13/library/modules/$.def"),
      $redef = require("npm:core-js@0.9.13/library/modules/$.redef"),
      $ = require("npm:core-js@0.9.13/library/modules/$"),
      cof = require("npm:core-js@0.9.13/library/modules/$.cof"),
      $iter = require("npm:core-js@0.9.13/library/modules/$.iter"),
      SYMBOL_ITERATOR = require("npm:core-js@0.9.13/library/modules/$.wks")('iterator'),
      FF_ITERATOR = '@@iterator',
      KEYS = 'keys',
      VALUES = 'values',
      Iterators = $iter.Iterators;
  module.exports = function(Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCE) {
    $iter.create(Constructor, NAME, next);
    function createMethod(kind) {
      function $$(that) {
        return new Constructor(that, kind);
      }
      switch (kind) {
        case KEYS:
          return function keys() {
            return $$(this);
          };
        case VALUES:
          return function values() {
            return $$(this);
          };
      }
      return function entries() {
        return $$(this);
      };
    }
    var TAG = NAME + ' Iterator',
        proto = Base.prototype,
        _native = proto[SYMBOL_ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT],
        _default = _native || createMethod(DEFAULT),
        methods,
        key;
    if (_native) {
      var IteratorPrototype = $.getProto(_default.call(new Base));
      cof.set(IteratorPrototype, TAG, true);
      if ($.FW && $.has(proto, FF_ITERATOR))
        $iter.set(IteratorPrototype, $.that);
    }
    if ($.FW)
      $iter.set(proto, _default);
    Iterators[NAME] = _default;
    Iterators[TAG] = $.that;
    if (DEFAULT) {
      methods = {
        keys: IS_SET ? _default : createMethod(KEYS),
        values: DEFAULT == VALUES ? _default : createMethod(VALUES),
        entries: DEFAULT != VALUES ? _default : createMethod('entries')
      };
      if (FORCE)
        for (key in methods) {
          if (!(key in proto))
            $redef(proto, key, methods[key]);
        }
      else
        $def($def.P + $def.F * $iter.BUGGY, NAME, methods);
    }
  };
  global.define = __define;
  return module.exports;
});

System.register("npm:core-js@0.9.13/library/modules/es6.array.iterator", ["npm:core-js@0.9.13/library/modules/$", "npm:core-js@0.9.13/library/modules/$.unscope", "npm:core-js@0.9.13/library/modules/$.uid", "npm:core-js@0.9.13/library/modules/$.iter", "npm:core-js@0.9.13/library/modules/$.iter-define"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  var $ = require("npm:core-js@0.9.13/library/modules/$"),
      setUnscope = require("npm:core-js@0.9.13/library/modules/$.unscope"),
      ITER = require("npm:core-js@0.9.13/library/modules/$.uid").safe('iter'),
      $iter = require("npm:core-js@0.9.13/library/modules/$.iter"),
      step = $iter.step,
      Iterators = $iter.Iterators;
  require("npm:core-js@0.9.13/library/modules/$.iter-define")(Array, 'Array', function(iterated, kind) {
    $.set(this, ITER, {
      o: $.toObject(iterated),
      i: 0,
      k: kind
    });
  }, function() {
    var iter = this[ITER],
        O = iter.o,
        kind = iter.k,
        index = iter.i++;
    if (!O || index >= O.length) {
      iter.o = undefined;
      return step(1);
    }
    if (kind == 'keys')
      return step(0, index);
    if (kind == 'values')
      return step(0, O[index]);
    return step(0, [index, O[index]]);
  }, 'values');
  Iterators.Arguments = Iterators.Array;
  setUnscope('keys');
  setUnscope('values');
  setUnscope('entries');
  global.define = __define;
  return module.exports;
});

System.register("npm:core-js@0.9.13/library/modules/$.for-of", ["npm:core-js@0.9.13/library/modules/$.ctx", "npm:core-js@0.9.13/library/modules/$.iter", "npm:core-js@0.9.13/library/modules/$.iter-call"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  var ctx = require("npm:core-js@0.9.13/library/modules/$.ctx"),
      get = require("npm:core-js@0.9.13/library/modules/$.iter").get,
      call = require("npm:core-js@0.9.13/library/modules/$.iter-call");
  module.exports = function(iterable, entries, fn, that) {
    var iterator = get(iterable),
        f = ctx(fn, that, entries ? 2 : 1),
        step;
    while (!(step = iterator.next()).done) {
      if (call(iterator, f, step.value, entries) === false) {
        return call.close(iterator);
      }
    }
  };
  global.define = __define;
  return module.exports;
});

System.register("npm:core-js@0.9.13/library/modules/$.collection", ["npm:core-js@0.9.13/library/modules/$", "npm:core-js@0.9.13/library/modules/$.def", "npm:core-js@0.9.13/library/modules/$.iter", "npm:core-js@0.9.13/library/modules/$.for-of", "npm:core-js@0.9.13/library/modules/$.species", "npm:core-js@0.9.13/library/modules/$.assert", "npm:core-js@0.9.13/library/modules/$.redef", "npm:core-js@0.9.13/library/modules/$.mix", "npm:core-js@0.9.13/library/modules/$.iter-detect", "npm:core-js@0.9.13/library/modules/$.cof"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var $ = require("npm:core-js@0.9.13/library/modules/$"),
      $def = require("npm:core-js@0.9.13/library/modules/$.def"),
      BUGGY = require("npm:core-js@0.9.13/library/modules/$.iter").BUGGY,
      forOf = require("npm:core-js@0.9.13/library/modules/$.for-of"),
      species = require("npm:core-js@0.9.13/library/modules/$.species"),
      assertInstance = require("npm:core-js@0.9.13/library/modules/$.assert").inst;
  module.exports = function(NAME, methods, common, IS_MAP, IS_WEAK) {
    var Base = $.g[NAME],
        C = Base,
        ADDER = IS_MAP ? 'set' : 'add',
        proto = C && C.prototype,
        O = {};
    function fixMethod(KEY, CHAIN) {
      if ($.FW) {
        var method = proto[KEY];
        require("npm:core-js@0.9.13/library/modules/$.redef")(proto, KEY, function(a, b) {
          var result = method.call(this, a === 0 ? 0 : a, b);
          return CHAIN ? this : result;
        });
      }
    }
    if (!$.isFunction(C) || !(IS_WEAK || !BUGGY && proto.forEach && proto.entries)) {
      C = common.getConstructor(NAME, IS_MAP, ADDER);
      require("npm:core-js@0.9.13/library/modules/$.mix")(C.prototype, methods);
    } else {
      var inst = new C,
          chain = inst[ADDER](IS_WEAK ? {} : -0, 1),
          buggyZero;
      if (!require("npm:core-js@0.9.13/library/modules/$.iter-detect")(function(iter) {
        new C(iter);
      })) {
        C = function() {
          assertInstance(this, C, NAME);
          var that = new Base,
              iterable = arguments[0];
          if (iterable != undefined)
            forOf(iterable, IS_MAP, that[ADDER], that);
          return that;
        };
        C.prototype = proto;
        if ($.FW)
          proto.constructor = C;
      }
      IS_WEAK || inst.forEach(function(val, key) {
        buggyZero = 1 / key === -Infinity;
      });
      if (buggyZero) {
        fixMethod('delete');
        fixMethod('has');
        IS_MAP && fixMethod('get');
      }
      if (buggyZero || chain !== inst)
        fixMethod(ADDER, true);
    }
    require("npm:core-js@0.9.13/library/modules/$.cof").set(C, NAME);
    O[NAME] = C;
    $def($def.G + $def.W + $def.F * (C != Base), O);
    species(C);
    species($.core[NAME]);
    if (!IS_WEAK)
      common.setIter(C, NAME, IS_MAP);
    return C;
  };
  global.define = __define;
  return module.exports;
});

System.register("npm:core-js@0.9.13/library/modules/es7.map.to-json", ["npm:core-js@0.9.13/library/modules/$.collection-to-json"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  require("npm:core-js@0.9.13/library/modules/$.collection-to-json")('Map');
  global.define = __define;
  return module.exports;
});

System.register("npm:core-js@0.9.13/library/fn/is-iterable", ["npm:core-js@0.9.13/library/modules/web.dom.iterable", "npm:core-js@0.9.13/library/modules/es6.string.iterator", "npm:core-js@0.9.13/library/modules/core.iter-helpers", "npm:core-js@0.9.13/library/modules/$"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  require("npm:core-js@0.9.13/library/modules/web.dom.iterable");
  require("npm:core-js@0.9.13/library/modules/es6.string.iterator");
  require("npm:core-js@0.9.13/library/modules/core.iter-helpers");
  module.exports = require("npm:core-js@0.9.13/library/modules/$").core.isIterable;
  global.define = __define;
  return module.exports;
});

System.register("npm:babel-runtime@5.4.3/core-js/get-iterator", ["npm:core-js@0.9.13/library/fn/get-iterator"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  module.exports = {
    "default": require("npm:core-js@0.9.13/library/fn/get-iterator"),
    __esModule: true
  };
  global.define = __define;
  return module.exports;
});

System.register("npm:rbush@1.4.0", ["npm:rbush@1.4.0/rbush"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  module.exports = require("npm:rbush@1.4.0/rbush");
  global.define = __define;
  return module.exports;
});

System.register("npm:babel-runtime@5.4.3/core-js/object/create", ["npm:core-js@0.9.13/library/fn/object/create"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  module.exports = {
    "default": require("npm:core-js@0.9.13/library/fn/object/create"),
    __esModule: true
  };
  global.define = __define;
  return module.exports;
});

System.register("npm:core-js@0.9.13/library/fn/object/get-own-property-descriptor", ["npm:core-js@0.9.13/library/modules/$", "npm:core-js@0.9.13/library/modules/es6.object.statics-accept-primitives"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  var $ = require("npm:core-js@0.9.13/library/modules/$");
  require("npm:core-js@0.9.13/library/modules/es6.object.statics-accept-primitives");
  module.exports = function getOwnPropertyDescriptor(it, key) {
    return $.getDesc(it, key);
  };
  global.define = __define;
  return module.exports;
});

System.register("npm:moment@2.10.3", ["npm:moment@2.10.3/moment"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  module.exports = require("npm:moment@2.10.3/moment");
  global.define = __define;
  return module.exports;
});

System.register("npm:core-js@0.9.13/library/fn/object/define-property", ["npm:core-js@0.9.13/library/modules/$"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  var $ = require("npm:core-js@0.9.13/library/modules/$");
  module.exports = function defineProperty(it, key, desc) {
    return $.setDesc(it, key, desc);
  };
  global.define = __define;
  return module.exports;
});

System.register("npm:gl-matrix@2.3.1/src/gl-matrix", ["npm:gl-matrix@2.3.1/src/gl-matrix/common", "npm:gl-matrix@2.3.1/src/gl-matrix/mat2", "npm:gl-matrix@2.3.1/src/gl-matrix/mat2d", "npm:gl-matrix@2.3.1/src/gl-matrix/mat3", "npm:gl-matrix@2.3.1/src/gl-matrix/mat4", "npm:gl-matrix@2.3.1/src/gl-matrix/quat", "npm:gl-matrix@2.3.1/src/gl-matrix/vec2", "npm:gl-matrix@2.3.1/src/gl-matrix/vec3", "npm:gl-matrix@2.3.1/src/gl-matrix/vec4"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  exports.glMatrix = require("npm:gl-matrix@2.3.1/src/gl-matrix/common");
  exports.mat2 = require("npm:gl-matrix@2.3.1/src/gl-matrix/mat2");
  exports.mat2d = require("npm:gl-matrix@2.3.1/src/gl-matrix/mat2d");
  exports.mat3 = require("npm:gl-matrix@2.3.1/src/gl-matrix/mat3");
  exports.mat4 = require("npm:gl-matrix@2.3.1/src/gl-matrix/mat4");
  exports.quat = require("npm:gl-matrix@2.3.1/src/gl-matrix/quat");
  exports.vec2 = require("npm:gl-matrix@2.3.1/src/gl-matrix/vec2");
  exports.vec3 = require("npm:gl-matrix@2.3.1/src/gl-matrix/vec3");
  exports.vec4 = require("npm:gl-matrix@2.3.1/src/gl-matrix/vec4");
  global.define = __define;
  return module.exports;
});

System.register("npm:core-js@0.9.13/library/modules/$.cof", ["npm:core-js@0.9.13/library/modules/$", "npm:core-js@0.9.13/library/modules/$.wks"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  var $ = require("npm:core-js@0.9.13/library/modules/$"),
      TAG = require("npm:core-js@0.9.13/library/modules/$.wks")('toStringTag'),
      toString = {}.toString;
  function cof(it) {
    return toString.call(it).slice(8, -1);
  }
  cof.classof = function(it) {
    var O,
        T;
    return it == undefined ? it === undefined ? 'Undefined' : 'Null' : typeof(T = (O = Object(it))[TAG]) == 'string' ? T : cof(O);
  };
  cof.set = function(it, tag, stat) {
    if (it && !$.has(it = stat ? it : it.prototype, TAG))
      $.hide(it, TAG, tag);
  };
  module.exports = cof;
  global.define = __define;
  return module.exports;
});

System.register("npm:core-js@0.9.13/library/modules/es6.string.iterator", ["npm:core-js@0.9.13/library/modules/$", "npm:core-js@0.9.13/library/modules/$.string-at", "npm:core-js@0.9.13/library/modules/$.uid", "npm:core-js@0.9.13/library/modules/$.iter", "npm:core-js@0.9.13/library/modules/$.iter-define"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  var set = require("npm:core-js@0.9.13/library/modules/$").set,
      $at = require("npm:core-js@0.9.13/library/modules/$.string-at")(true),
      ITER = require("npm:core-js@0.9.13/library/modules/$.uid").safe('iter'),
      $iter = require("npm:core-js@0.9.13/library/modules/$.iter"),
      step = $iter.step;
  require("npm:core-js@0.9.13/library/modules/$.iter-define")(String, 'String', function(iterated) {
    set(this, ITER, {
      o: String(iterated),
      i: 0
    });
  }, function() {
    var iter = this[ITER],
        O = iter.o,
        index = iter.i,
        point;
    if (index >= O.length)
      return step(1);
    point = $at(O, index);
    iter.i += point.length;
    return step(0, point);
  });
  global.define = __define;
  return module.exports;
});

System.register("npm:core-js@0.9.13/library/modules/web.dom.iterable", ["npm:core-js@0.9.13/library/modules/es6.array.iterator", "npm:core-js@0.9.13/library/modules/$", "npm:core-js@0.9.13/library/modules/$.iter", "npm:core-js@0.9.13/library/modules/$.wks"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  require("npm:core-js@0.9.13/library/modules/es6.array.iterator");
  var $ = require("npm:core-js@0.9.13/library/modules/$"),
      Iterators = require("npm:core-js@0.9.13/library/modules/$.iter").Iterators,
      ITERATOR = require("npm:core-js@0.9.13/library/modules/$.wks")('iterator'),
      ArrayValues = Iterators.Array,
      NL = $.g.NodeList,
      HTC = $.g.HTMLCollection,
      NLProto = NL && NL.prototype,
      HTCProto = HTC && HTC.prototype;
  if ($.FW) {
    if (NL && !(ITERATOR in NLProto))
      $.hide(NLProto, ITERATOR, ArrayValues);
    if (HTC && !(ITERATOR in HTCProto))
      $.hide(HTCProto, ITERATOR, ArrayValues);
  }
  Iterators.NodeList = Iterators.HTMLCollection = ArrayValues;
  global.define = __define;
  return module.exports;
});

System.register("npm:core-js@0.9.13/library/modules/$.collection-strong", ["npm:core-js@0.9.13/library/modules/$", "npm:core-js@0.9.13/library/modules/$.ctx", "npm:core-js@0.9.13/library/modules/$.uid", "npm:core-js@0.9.13/library/modules/$.assert", "npm:core-js@0.9.13/library/modules/$.for-of", "npm:core-js@0.9.13/library/modules/$.iter", "npm:core-js@0.9.13/library/modules/$.mix", "npm:core-js@0.9.13/library/modules/$.iter-define"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var $ = require("npm:core-js@0.9.13/library/modules/$"),
      ctx = require("npm:core-js@0.9.13/library/modules/$.ctx"),
      safe = require("npm:core-js@0.9.13/library/modules/$.uid").safe,
      assert = require("npm:core-js@0.9.13/library/modules/$.assert"),
      forOf = require("npm:core-js@0.9.13/library/modules/$.for-of"),
      step = require("npm:core-js@0.9.13/library/modules/$.iter").step,
      has = $.has,
      set = $.set,
      isObject = $.isObject,
      hide = $.hide,
      isExtensible = Object.isExtensible || isObject,
      ID = safe('id'),
      O1 = safe('O1'),
      LAST = safe('last'),
      FIRST = safe('first'),
      ITER = safe('iter'),
      SIZE = $.DESC ? safe('size') : 'size',
      id = 0;
  function fastKey(it, create) {
    if (!isObject(it))
      return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
    if (!has(it, ID)) {
      if (!isExtensible(it))
        return 'F';
      if (!create)
        return 'E';
      hide(it, ID, ++id);
    }
    return 'O' + it[ID];
  }
  function getEntry(that, key) {
    var index = fastKey(key),
        entry;
    if (index !== 'F')
      return that[O1][index];
    for (entry = that[FIRST]; entry; entry = entry.n) {
      if (entry.k == key)
        return entry;
    }
  }
  module.exports = {
    getConstructor: function(NAME, IS_MAP, ADDER) {
      function C() {
        var that = assert.inst(this, C, NAME),
            iterable = arguments[0];
        set(that, O1, $.create(null));
        set(that, SIZE, 0);
        set(that, LAST, undefined);
        set(that, FIRST, undefined);
        if (iterable != undefined)
          forOf(iterable, IS_MAP, that[ADDER], that);
      }
      require("npm:core-js@0.9.13/library/modules/$.mix")(C.prototype, {
        clear: function clear() {
          for (var that = this,
              data = that[O1],
              entry = that[FIRST]; entry; entry = entry.n) {
            entry.r = true;
            if (entry.p)
              entry.p = entry.p.n = undefined;
            delete data[entry.i];
          }
          that[FIRST] = that[LAST] = undefined;
          that[SIZE] = 0;
        },
        'delete': function(key) {
          var that = this,
              entry = getEntry(that, key);
          if (entry) {
            var next = entry.n,
                prev = entry.p;
            delete that[O1][entry.i];
            entry.r = true;
            if (prev)
              prev.n = next;
            if (next)
              next.p = prev;
            if (that[FIRST] == entry)
              that[FIRST] = next;
            if (that[LAST] == entry)
              that[LAST] = prev;
            that[SIZE]--;
          }
          return !!entry;
        },
        forEach: function forEach(callbackfn) {
          var f = ctx(callbackfn, arguments[1], 3),
              entry;
          while (entry = entry ? entry.n : this[FIRST]) {
            f(entry.v, entry.k, this);
            while (entry && entry.r)
              entry = entry.p;
          }
        },
        has: function has(key) {
          return !!getEntry(this, key);
        }
      });
      if ($.DESC)
        $.setDesc(C.prototype, 'size', {get: function() {
            return assert.def(this[SIZE]);
          }});
      return C;
    },
    def: function(that, key, value) {
      var entry = getEntry(that, key),
          prev,
          index;
      if (entry) {
        entry.v = value;
      } else {
        that[LAST] = entry = {
          i: index = fastKey(key, true),
          k: key,
          v: value,
          p: prev = that[LAST],
          n: undefined,
          r: false
        };
        if (!that[FIRST])
          that[FIRST] = entry;
        if (prev)
          prev.n = entry;
        that[SIZE]++;
        if (index !== 'F')
          that[O1][index] = entry;
      }
      return that;
    },
    getEntry: getEntry,
    setIter: function(C, NAME, IS_MAP) {
      require("npm:core-js@0.9.13/library/modules/$.iter-define")(C, NAME, function(iterated, kind) {
        set(this, ITER, {
          o: iterated,
          k: kind
        });
      }, function() {
        var iter = this[ITER],
            kind = iter.k,
            entry = iter.l;
        while (entry && entry.r)
          entry = entry.p;
        if (!iter.o || !(iter.l = entry = entry ? entry.n : iter.o[FIRST])) {
          iter.o = undefined;
          return step(1);
        }
        if (kind == 'keys')
          return step(0, entry.k);
        if (kind == 'values')
          return step(0, entry.v);
        return step(0, [entry.k, entry.v]);
      }, IS_MAP ? 'entries' : 'values', !IS_MAP, true);
    }
  };
  global.define = __define;
  return module.exports;
});

System.register("npm:babel-runtime@5.4.3/core-js/is-iterable", ["npm:core-js@0.9.13/library/fn/is-iterable"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  module.exports = {
    "default": require("npm:core-js@0.9.13/library/fn/is-iterable"),
    __esModule: true
  };
  global.define = __define;
  return module.exports;
});

System.register("npm:babel-runtime@5.4.3/helpers/inherits", ["npm:babel-runtime@5.4.3/core-js/object/create"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  "use strict";
  var _Object$create = require("npm:babel-runtime@5.4.3/core-js/object/create")["default"];
  exports["default"] = function(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    }
    subClass.prototype = _Object$create(superClass && superClass.prototype, {constructor: {
        value: subClass,
        enumerable: false,
        writable: true,
        configurable: true
      }});
    if (superClass)
      subClass.__proto__ = superClass;
  };
  exports.__esModule = true;
  global.define = __define;
  return module.exports;
});

System.register("npm:babel-runtime@5.4.3/core-js/object/get-own-property-descriptor", ["npm:core-js@0.9.13/library/fn/object/get-own-property-descriptor"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  module.exports = {
    "default": require("npm:core-js@0.9.13/library/fn/object/get-own-property-descriptor"),
    __esModule: true
  };
  global.define = __define;
  return module.exports;
});

System.register("npm:babel-runtime@5.4.3/core-js/object/define-property", ["npm:core-js@0.9.13/library/fn/object/define-property"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  module.exports = {
    "default": require("npm:core-js@0.9.13/library/fn/object/define-property"),
    __esModule: true
  };
  global.define = __define;
  return module.exports;
});

System.register("npm:gl-matrix@2.3.1", ["npm:gl-matrix@2.3.1/src/gl-matrix"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  module.exports = require("npm:gl-matrix@2.3.1/src/gl-matrix");
  global.define = __define;
  return module.exports;
});

System.register("npm:core-js@0.9.13/library/modules/es6.object.to-string", ["npm:core-js@0.9.13/library/modules/$.cof", "npm:core-js@0.9.13/library/modules/$.wks", "npm:core-js@0.9.13/library/modules/$", "npm:core-js@0.9.13/library/modules/$.redef"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var cof = require("npm:core-js@0.9.13/library/modules/$.cof"),
      tmp = {};
  tmp[require("npm:core-js@0.9.13/library/modules/$.wks")('toStringTag')] = 'z';
  if (require("npm:core-js@0.9.13/library/modules/$").FW && cof(tmp) != 'z') {
    require("npm:core-js@0.9.13/library/modules/$.redef")(Object.prototype, 'toString', function toString() {
      return '[object ' + cof.classof(this) + ']';
    }, true);
  }
  global.define = __define;
  return module.exports;
});

System.register("npm:core-js@0.9.13/library/modules/es6.map", ["npm:core-js@0.9.13/library/modules/$.collection-strong", "npm:core-js@0.9.13/library/modules/$.collection"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var strong = require("npm:core-js@0.9.13/library/modules/$.collection-strong");
  require("npm:core-js@0.9.13/library/modules/$.collection")('Map', {
    get: function get(key) {
      var entry = strong.getEntry(this, key);
      return entry && entry.v;
    },
    set: function set(key, value) {
      return strong.def(this, key === 0 ? 0 : key, value);
    }
  }, strong, true);
  global.define = __define;
  return module.exports;
});

System.register("npm:babel-runtime@5.4.3/helpers/sliced-to-array", ["npm:babel-runtime@5.4.3/core-js/is-iterable", "npm:babel-runtime@5.4.3/core-js/get-iterator"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  "use strict";
  var _isIterable = require("npm:babel-runtime@5.4.3/core-js/is-iterable")["default"];
  var _getIterator = require("npm:babel-runtime@5.4.3/core-js/get-iterator")["default"];
  exports["default"] = function(arr, i) {
    if (Array.isArray(arr)) {
      return arr;
    } else if (_isIterable(Object(arr))) {
      var _arr = [];
      var _n = true;
      var _d = false;
      var _e = undefined;
      try {
        for (var _i = _getIterator(arr),
            _s; !(_n = (_s = _i.next()).done); _n = true) {
          _arr.push(_s.value);
          if (i && _arr.length === i)
            break;
        }
      } catch (err) {
        _d = true;
        _e = err;
      } finally {
        try {
          if (!_n && _i["return"])
            _i["return"]();
        } finally {
          if (_d)
            throw _e;
        }
      }
      return _arr;
    } else {
      throw new TypeError("Invalid attempt to destructure non-iterable instance");
    }
  };
  exports.__esModule = true;
  global.define = __define;
  return module.exports;
});

System.register("npm:babel-runtime@5.4.3/helpers/get", ["npm:babel-runtime@5.4.3/core-js/object/get-own-property-descriptor"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  "use strict";
  var _Object$getOwnPropertyDescriptor = require("npm:babel-runtime@5.4.3/core-js/object/get-own-property-descriptor")["default"];
  exports["default"] = function get(_x, _x2, _x3) {
    var _again = true;
    _function: while (_again) {
      var object = _x,
          property = _x2,
          receiver = _x3;
      desc = parent = getter = undefined;
      _again = false;
      var desc = _Object$getOwnPropertyDescriptor(object, property);
      if (desc === undefined) {
        var parent = Object.getPrototypeOf(object);
        if (parent === null) {
          return undefined;
        } else {
          _x = parent;
          _x2 = property;
          _x3 = receiver;
          _again = true;
          continue _function;
        }
      } else if ("value" in desc) {
        return desc.value;
      } else {
        var getter = desc.get;
        if (getter === undefined) {
          return undefined;
        }
        return getter.call(receiver);
      }
    }
  };
  exports.__esModule = true;
  global.define = __define;
  return module.exports;
});

System.register("npm:babel-runtime@5.4.3/helpers/create-class", ["npm:babel-runtime@5.4.3/core-js/object/define-property"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  "use strict";
  var _Object$defineProperty = require("npm:babel-runtime@5.4.3/core-js/object/define-property")["default"];
  exports["default"] = (function() {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        _Object$defineProperty(target, descriptor.key, descriptor);
      }
    }
    return function(Constructor, protoProps, staticProps) {
      if (protoProps)
        defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        defineProperties(Constructor, staticProps);
      return Constructor;
    };
  })();
  exports.__esModule = true;
  global.define = __define;
  return module.exports;
});

System.register("npm:core-js@0.9.13/library/fn/map", ["npm:core-js@0.9.13/library/modules/es6.object.to-string", "npm:core-js@0.9.13/library/modules/es6.string.iterator", "npm:core-js@0.9.13/library/modules/web.dom.iterable", "npm:core-js@0.9.13/library/modules/es6.map", "npm:core-js@0.9.13/library/modules/es7.map.to-json", "npm:core-js@0.9.13/library/modules/$"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  require("npm:core-js@0.9.13/library/modules/es6.object.to-string");
  require("npm:core-js@0.9.13/library/modules/es6.string.iterator");
  require("npm:core-js@0.9.13/library/modules/web.dom.iterable");
  require("npm:core-js@0.9.13/library/modules/es6.map");
  require("npm:core-js@0.9.13/library/modules/es7.map.to-json");
  module.exports = require("npm:core-js@0.9.13/library/modules/$").core.Map;
  global.define = __define;
  return module.exports;
});

System.register("npm:babel-runtime@5.4.3/core-js/map", ["npm:core-js@0.9.13/library/fn/map"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  module.exports = {
    "default": require("npm:core-js@0.9.13/library/fn/map"),
    __esModule: true
  };
  global.define = __define;
  return module.exports;
});

System.register('promo-manager/layout-view/layout-view-consts', [], function (_export) {
	'use strict';

	return {
		setters: [],
		execute: function () {
			_export('default', {
				// 0 represents Centimeters
				// 1 represents Inches
				LAYOUT_VIEW_UNITS: {
					0: 15,
					1: 15 * 2.54
				},
				LAYOUT_VIEW_UNIT_CENTIMETERS: 0,
				LAYOUT_VIEW_DATE_FORMAT: 'MM/dd/yyyy',
				RFC_CHANGE_REQUEST_STATUS_ACTIVE_LIST_LABELS: ['0-rejected', '1-approver', '2-approver'],
				RFC_CHANGE_REQUEST_STATUS_ACTIVE_LIST: [0, 1, 2],
				DELTA_AMOUNT_WHEEL: 1.2,
				DELTA_AMOUNT_KEY: 20,
				MODE_CAMERA: 'camera',
				MODE_PAGE_DRAG: 'page-drag',
				MODE_OFFER_DRAG: 'offer-drag',
				INT_32_MAX: Math.pow(2, 32 - 1) - 1,
				DRAGCARD_WIDTH: 150,
				DRAGCARD_HEIGHT: 50,
				PAGE_GRIP_HEIGHT_FACTOR: 0.05,
				TYPE_PAGE: 'page',
				TYPE_PAGE_GRIP: 'page-grip',
				TYPE_BLOCK: 'block',
				ADD_PAGE_X_OFFSET: 20,
				ADD_PAGE_Y_OFFSET: 20,
				ADD_PAGE_X_INITIAL_POSITION_DEFAULT: 10,
				ADD_PAGE_Y_INITIAL_POSITION_DEFAULT: 200,
				ADD_PAGE_Y_PAGE_GRIP_OFFSET: 20,
				LAYOUT_VIEW_PAGE_GRID_VERSION_HEIGHT_DEFAULT: 11,
				LAYOUT_VIEW_PAGE_GRID_VERSION_WIDTH_DEFAULT: 8.5,
				LAYOUT_VIEW_UNIT_DEFAULT: 1,
				EDIT_MODE: 'edit',
				DELETE_MODE: 'delete',
				TEMPLATE_CLEAR_MODE: 'template_clear',
				TEMPLATE_APPLY_MODE: 'template_apply',
				MOVE_OFFERS_MODE: 'move_offers',
				ADD_TO_BASKET_MODE: 'add_to_basket',
				LAYOUT_PAGE_VERSION_TEMPLATE_RECORDS_REQUEST: 5 });
		}
	};
});
System.register('helpers/consts', [], function (_export) {
	'use strict';

	return {
		setters: [],
		execute: function () {
			_export('default', {
				STRING_COMPARATOR_FUNCTION: 'stringComparator'

			});
		}
	};
});
System.register('promo-manager/layout-view/change-request', ['npm:babel-runtime@5.4.3/helpers/create-class', 'npm:babel-runtime@5.4.3/helpers/class-call-check', 'promo-manager/layout-view/layout-view-consts'], function (_export) {
	var _createClass, _classCallCheck, LayoutViewConsts, ChangeRequest;

	return {
		setters: [function (_npmBabelRuntime543HelpersCreateClass) {
			_createClass = _npmBabelRuntime543HelpersCreateClass['default'];
		}, function (_npmBabelRuntime543HelpersClassCallCheck) {
			_classCallCheck = _npmBabelRuntime543HelpersClassCallCheck['default'];
		}, function (_promoManagerLayoutViewLayoutViewConsts) {
			LayoutViewConsts = _promoManagerLayoutViewLayoutViewConsts['default'];
		}],
		execute: function () {
			'use strict';

			ChangeRequest = (function () {
				function ChangeRequest(data) {
					_classCallCheck(this, ChangeRequest);

					this.rfcId = data.id;
					this.changeStatusId = angular.isObject(data.changeStatus) ? data.changeStatus.id : -1;
				}

				_createClass(ChangeRequest, [{
					key: 'isActive',
					value: function isActive(rfcStatusMap) {
						var activeStatuses = LayoutViewConsts.RFC_CHANGE_REQUEST_STATUS_ACTIVE_LIST.join('|');
						var regex = new RegExp('^(' + activeStatuses + ')$');
						return regex.test(rfcStatusMap.get(this.changeStatusId));
					}
				}]);

				return ChangeRequest;
			})();

			_export('default', ChangeRequest);
		}
	};
});
System.register("promo-manager/layout-view/offer-version-manager", ["npm:babel-runtime@5.4.3/helpers/create-class", "npm:babel-runtime@5.4.3/helpers/class-call-check"], function (_export) {
  var _createClass, _classCallCheck, OfferVersionManager;

  return {
    setters: [function (_npmBabelRuntime543HelpersCreateClass) {
      _createClass = _npmBabelRuntime543HelpersCreateClass["default"];
    }, function (_npmBabelRuntime543HelpersClassCallCheck) {
      _classCallCheck = _npmBabelRuntime543HelpersClassCallCheck["default"];
    }],
    execute: function () {
      "use strict";

      OfferVersionManager = (function () {
        function OfferVersionManager(data) {
          _classCallCheck(this, OfferVersionManager);

          var offer = data.offer;
          var offerVersionFeaturedSku = data.offerVersionFeaturedSku;
          //context menu
          this.open = false;

          this.id = data.id;
          this.offer = angular.isObject(offer) ? offer : null;
          this.offerVersionFeaturedSku = angular.isObject(offerVersionFeaturedSku) ? offerVersionFeaturedSku : null;
          this.name = data.name;
          this.hierarchyId = data.merchandiseHierarchy ? data.merchandiseHierarchy.id : -1;
        }

        _createClass(OfferVersionManager, [{
          key: "getOffer",
          value: function getOffer() {
            return this.offer;
          }
        }, {
          key: "getOfferVersionFeaturedSku",
          value: function getOfferVersionFeaturedSku() {
            return this.offerVersionFeaturedSku;
          }
        }]);

        return OfferVersionManager;
      })();

      _export("default", OfferVersionManager);
    }
  };
});
System.register('promo-manager/layout-view/block-group-to-blockId-manager', ['npm:babel-runtime@5.4.3/helpers/create-class', 'npm:babel-runtime@5.4.3/helpers/class-call-check', 'npm:babel-runtime@5.4.3/core-js/map', 'helpers/util'], function (_export) {
	var _createClass, _classCallCheck, _Map, Util, BlockGroupToBlockIdManager;

	return {
		setters: [function (_npmBabelRuntime543HelpersCreateClass) {
			_createClass = _npmBabelRuntime543HelpersCreateClass['default'];
		}, function (_npmBabelRuntime543HelpersClassCallCheck) {
			_classCallCheck = _npmBabelRuntime543HelpersClassCallCheck['default'];
		}, function (_npmBabelRuntime543CoreJsMap) {
			_Map = _npmBabelRuntime543CoreJsMap['default'];
		}, function (_helpersUtil) {
			Util = _helpersUtil['default'];
		}],
		execute: function () {
			'use strict';

			BlockGroupToBlockIdManager = (function () {
				function BlockGroupToBlockIdManager() {
					_classCallCheck(this, BlockGroupToBlockIdManager);

					this.blockGroups = new _Map();
				}

				_createClass(BlockGroupToBlockIdManager, [{
					key: 'addBlockGroup',
					value: function addBlockGroup(groupId, groupName, blockIds) {
						this.removeBlockGroup(groupId);
						this.blockGroups.set(groupId, {
							name: groupName,
							ids: blockIds
						});
					}
				}, {
					key: 'addBlockId',
					value: function addBlockId(blockGroupId, blockId) {
						this.removeBlockId(blockGroupId, blockId);
						this.getBlockIds(blockGroupId).push(blockId);
					}
				}, {
					key: 'removeBlockId',
					value: function removeBlockId(blockGroupId, blockId) {
						var blockIds = this.getBlockIds(blockGroupId);
						Util.removeFromUnsortedArray(blockIds, blockId);
					}
				}, {
					key: 'removeBlockGroup',
					value: function removeBlockGroup(blockGroupId) {
						this.blockGroups['delete'](blockGroupId);
					}
				}, {
					key: 'removeAllBlockGroups',
					value: function removeAllBlockGroups(blockGroupId) {
						this.blockGroups.clear();
					}
				}, {
					key: 'getBlockGroupBlockIdSet',
					value: function getBlockGroupBlockIdSet(blockGroupId) {
						return this.blockGroups.get(blockGroupId);
					}
				}, {
					key: 'getBlockIds',
					value: function getBlockIds(blockGroupId) {
						return this.getBlockGroupBlockIdSet(blockGroupId).ids;
					}
					// (the order of the block list may potentially
					// be rendered as useful information)

				}]);

				return BlockGroupToBlockIdManager;
			})();

			_export('default', BlockGroupToBlockIdManager);
		}
	};
});
System.register("promo-manager/layout-view/permitted-action", ["npm:babel-runtime@5.4.3/helpers/class-call-check"], function (_export) {
	var _classCallCheck, PermittedAction;

	return {
		setters: [function (_npmBabelRuntime543HelpersClassCallCheck) {
			_classCallCheck = _npmBabelRuntime543HelpersClassCallCheck["default"];
		}],
		execute: function () {
			"use strict";

			PermittedAction = function PermittedAction(name, action) {
				_classCallCheck(this, PermittedAction);

				this.id = action;
				this.name = name ? name : action;
			};

			_export("default", PermittedAction);
		}
	};
});
System.register("promo-manager/layout-view/helpers/layout-view-ui-element", ["npm:babel-runtime@5.4.3/helpers/create-class", "npm:babel-runtime@5.4.3/helpers/class-call-check"], function (_export) {
	var _createClass, _classCallCheck, LayoutViewUiElement;

	return {
		setters: [function (_npmBabelRuntime543HelpersCreateClass) {
			_createClass = _npmBabelRuntime543HelpersCreateClass["default"];
		}, function (_npmBabelRuntime543HelpersClassCallCheck) {
			_classCallCheck = _npmBabelRuntime543HelpersClassCallCheck["default"];
		}],
		execute: function () {
			"use strict";

			LayoutViewUiElement = (function () {
				function LayoutViewUiElement() {
					_classCallCheck(this, LayoutViewUiElement);

					this._worldVec0 = null;
					this._worldVec1 = null;
					this._cameraSpaceStyles = {};
				}

				_createClass(LayoutViewUiElement, [{
					key: "updateStyles",
					value: function updateStyles(cameraMat4) {}
				}, {
					key: "getObjectSpacePoints",
					value: function getObjectSpacePoints() {}
				}, {
					key: "calculateWorldSpaceCoordinates",
					value: function calculateWorldSpaceCoordinates() {}
				}]);

				return LayoutViewUiElement;
			})();

			_export("default", LayoutViewUiElement);
		}
	};
});
System.register("promo-manager/layout-view/vehicle-version", ["npm:babel-runtime@5.4.3/helpers/class-call-check"], function (_export) {
	var _classCallCheck, VehicleVersion;

	return {
		setters: [function (_npmBabelRuntime543HelpersClassCallCheck) {
			_classCallCheck = _npmBabelRuntime543HelpersClassCallCheck["default"];
		}],
		execute: function () {
			"use strict";

			VehicleVersion = function VehicleVersion(data) {
				_classCallCheck(this, VehicleVersion);

				this.id = data.id;
				this.name = data.name;
			};

			_export("default", VehicleVersion);
		}
	};
});
System.register('promo-manager/layout-view/spreads-group', ['npm:babel-runtime@5.4.3/helpers/create-class', 'npm:babel-runtime@5.4.3/helpers/class-call-check', 'helpers/util'], function (_export) {
	var _createClass, _classCallCheck, Util, SpreadsGroup;

	return {
		setters: [function (_npmBabelRuntime543HelpersCreateClass) {
			_createClass = _npmBabelRuntime543HelpersCreateClass['default'];
		}, function (_npmBabelRuntime543HelpersClassCallCheck) {
			_classCallCheck = _npmBabelRuntime543HelpersClassCallCheck['default'];
		}, function (_helpersUtil) {
			Util = _helpersUtil['default'];
		}],
		execute: function () {
			'use strict';

			SpreadsGroup = (function () {
				function SpreadsGroup(data) {
					_classCallCheck(this, SpreadsGroup);

					this.pageIds = data;
					this.pageToIndexMap = Util.arrayAsMap(this.pageIds);
				}

				_createClass(SpreadsGroup, [{
					key: 'getPageIdFromIndex',
					value: function getPageIdFromIndex(index) {
						return this.pageIds[index];
					}
				}, {
					key: 'getIndexFromPageId',
					value: function getIndexFromPageId(pageId) {
						return this.pageToIndexMap.get(pageId);
					}

					// Also we have to be careful about deleting or
					// invalidating removed assets since we are
					// scattering references to them all over

				}]);

				return SpreadsGroup;
			})();

			_export('default', SpreadsGroup);
		}
	};
});
System.register("promo-manager/layout-view/page", ["npm:babel-runtime@5.4.3/helpers/create-class", "npm:babel-runtime@5.4.3/helpers/class-call-check"], function (_export) {
	var _createClass, _classCallCheck, Page;

	return {
		setters: [function (_npmBabelRuntime543HelpersCreateClass) {
			_createClass = _npmBabelRuntime543HelpersCreateClass["default"];
		}, function (_npmBabelRuntime543HelpersClassCallCheck) {
			_classCallCheck = _npmBabelRuntime543HelpersClassCallCheck["default"];
		}],
		execute: function () {
			"use strict";

			Page = (function () {
				function Page(data, xPos, yPos, zPos) {
					_classCallCheck(this, Page);

					if (!xPos) {
						xPos = 0;
					}
					if (!yPos) {
						yPos = 0;
					}
					if (!zPos) {
						zPos = 0;
					}

					this.id = data.id;
					this.spreadId = null;
					if (data.spread) {
						this.spreadId = angular.isObject(data.spread) ? data.spread.id : null;
					}
					this.index = data.position;
					this.position = {
						x: data.x ? data.x : xPos, // Make sure to modify by reference regardless of
						y: data.y ? data.y : yPos, // which layout or page version is being manipulated
						z: data.z ? data.z : zPos // so the value is shared across all dependents
					};
				}

				_createClass(Page, [{
					key: "getPageNumber",
					value: function getPageNumber() {
						return this.index;
					}
				}, {
					key: "getPageId",
					value: function getPageId() {
						return this.id;
					}
				}, {
					key: "getZindex",
					value: function getZindex() {
						return this.position.z;
					}
				}, {
					key: "getPosX",
					value: function getPosX() {
						return this.position.x;
					}
				}, {
					key: "getPosY",
					value: function getPosY() {
						return this.position.y;
					}
				}, {
					key: "getPos",
					value: function getPos() {
						return this.position;
					}
				}, {
					key: "isInSpreadGroup",
					value: function isInSpreadGroup() {
						if (this.spreadId) {
							return true;
						}
						return false;
					}
				}]);

				return Page;
			})();

			_export("default", Page);
		}
	};
});
System.register('promo-manager/layout-view/helpers/page-ui', ['npm:babel-runtime@5.4.3/helpers/create-class', 'npm:babel-runtime@5.4.3/helpers/class-call-check', 'promo-manager/layout-view/layout-view-consts', 'npm:gl-matrix@2.3.1', 'promo-manager/layout-view/page-version', 'promo-manager/layout-view/block'], function (_export) {
    var _createClass, _classCallCheck, LayoutConsts, glMatrix, PageVersion, Block, vec4, mat4, PageUi;

    return {
        setters: [function (_npmBabelRuntime543HelpersCreateClass) {
            _createClass = _npmBabelRuntime543HelpersCreateClass['default'];
        }, function (_npmBabelRuntime543HelpersClassCallCheck) {
            _classCallCheck = _npmBabelRuntime543HelpersClassCallCheck['default'];
        }, function (_promoManagerLayoutViewLayoutViewConsts) {
            LayoutConsts = _promoManagerLayoutViewLayoutViewConsts['default'];
        }, function (_npmGlMatrix231) {
            glMatrix = _npmGlMatrix231['default'];
        }, function (_promoManagerLayoutViewPageVersion) {
            PageVersion = _promoManagerLayoutViewPageVersion['default'];
        }, function (_promoManagerLayoutViewBlock) {
            Block = _promoManagerLayoutViewBlock['default'];
        }],
        execute: function () {
            'use strict';

            vec4 = glMatrix.vec4;
            mat4 = glMatrix.mat4;

            PageUi = (function () {
                function PageUi(selectedLayoutVersionIndex, layoutModel, marketToPageVersionIdManager, pageVersions, viewport) {
                    _classCallCheck(this, PageUi);

                    this.selectedLayoutVersionIndex = selectedLayoutVersionIndex;
                    this.layoutModel = layoutModel;
                    this.marketToPageVersionIdManager = marketToPageVersionIdManager;
                    this.pageVersions = pageVersions;
                    this.viewport = viewport;
                }

                _createClass(PageUi, [{
                    key: 'movePageToTop',
                    value: function movePageToTop(topPageVersion) {
                        if (!topPageVersion) {
                            return;
                        }
                        var pageVersionList = this.getPageVersionsForSelectedLayoutVersion();
                        pageVersionList.filter(function (pageVersion) {
                            return pageVersion.position.z > topPageVersion.position.z;
                        }).map(function (pageVersion) {
                            return --pageVersion.position.z;
                        });
                        topPageVersion.position.z = pageVersionList.length - 1;
                    }
                }, {
                    key: 'updateCameraSpaceCoordinates',
                    value: function updateCameraSpaceCoordinates() {
                        for (var _len = arguments.length, objects = Array(_len), _key = 0; _key < _len; _key++) {
                            objects[_key] = arguments[_key];
                        }

                        var camera = objects.pop();
                        var camMat4 = camera.getMatrix();
                        (objects.length > 0 ? objects : this.getPageVersionsForSelectedLayoutVersion()).forEach(function (obj) {
                            if (angular.isFunction(obj.calculateCameraSpaceCoordinates)) {
                                obj.calculateCameraSpaceCoordinates(camMat4);
                            } else {
                                obj.forEach(function (o) {
                                    o.calculateCameraSpaceCoordinates(camMat4);
                                });
                            }
                        });
                    }
                }, {
                    key: 'updateWorldSpaceCoordinates',
                    value: function updateWorldSpaceCoordinates() {
                        for (var _len2 = arguments.length, objects = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
                            objects[_key2] = arguments[_key2];
                        }

                        var camera = objects.pop();
                        (objects.length > 0 ? objects : this.getPageVersionsForSelectedLayoutVersion()).forEach(function (obj) {
                            if (angular.isFunction(obj.calculateWorldSpaceCoordinates)) {
                                obj.calculateWorldSpaceCoordinates();
                            } else {
                                obj.forEach(function (o) {
                                    o.calculateWorldSpaceCoordinates();
                                });
                            }
                        });
                        objects.push(camera);
                        this.updateCameraSpaceCoordinates.apply(this, objects);
                    }
                }, {
                    key: 'setPageIndex',
                    value: function setPageIndex(pageVersion, camera) {
                        if (!pageVersion) {
                            return;
                        }
                        var pageVersions = this.getPageVersionsForSelectedLayoutVersion();
                        var affectedPageVersions = this.getPageVersionsAbove(pageVersion);
                        affectedPageVersions.push(pageVersion);
                        this.viewport.removeRtreeObjects(affectedPageVersions);
                        this.movePageToTop(pageVersion);
                        this.updateWorldSpaceCoordinates(affectedPageVersions, camera);
                        this.viewport.insertRtreeObjects(affectedPageVersions);
                    }
                }, {
                    key: 'getPageVersionsForSelectedLayoutVersion',
                    value: function getPageVersionsForSelectedLayoutVersion() {
                        var _this = this;

                        var layoutVersionIndex = this.selectedLayoutVersionIndex;
                        var marketId = this.layoutModel.getFirstMarketByIndex(layoutVersionIndex);
                        var pageVersionIds = this.marketToPageVersionIdManager.getPageVersionIds(marketId);
                        var pageVersions = pageVersionIds.map(function (pageVersionId) {
                            var pv = _this.pageVersions.get(pageVersionId);
                            if (pv) {
                                return pv;
                            }
                        });
                        return pageVersions;
                    }
                }, {
                    key: 'getPageVersionsAbove',
                    value: function getPageVersionsAbove(topPageVersion) {
                        if (!topPageVersion) {
                            return;
                        }
                        var z = topPageVersion.position.z;
                        var pageVersionList = this.getPageVersionsForSelectedLayoutVersion();
                        return pageVersionList.filter(function (pageVersion) {
                            return pageVersion.position.z > topPageVersion.position.z;
                        });
                    }
                }, {
                    key: 'getLastPageNumber',
                    value: function getLastPageNumber() {
                        var max = [];
                        var pageVersionList = this.getPageVersionsForSelectedLayoutVersion();
                        pageVersionList.forEach(function (pageVersion) {
                            max.push(pageVersion.getPageNumber());
                        });
                        // de-facto resig
                        return Math.max.apply(Math, max);
                    }
                }, {
                    key: 'getLastZindexNumber',
                    value: function getLastZindexNumber() {
                        var max = [];
                        var pageVersionList = this.getPageVersionsForSelectedLayoutVersion();
                        pageVersionList.forEach(function (pageVersion) {
                            max.push(pageVersion.getZindex());
                        });
                        // de-facto resig
                        return Math.max.apply(Math, max);
                    }
                }, {
                    key: 'getPageVersionDetails',
                    value: function getPageVersionDetails() {
                        var ids = [];
                        var pageVersionList = this.getPageVersionsForSelectedLayoutVersion();
                        pageVersionList.forEach(function (pageVersion) {
                            ids.push({ id: pageVersion.getPageId(), index: pageVersion.getPageNumber(), name: pageVersion.getPageName(), position: pageVersion.getPos() });
                        });
                        return ids;
                    }
                }, {
                    key: 'getPageVersionDetailsForVersionId',
                    value: function getPageVersionDetailsForVersionId(pageVersionId) {
                        var pageInformation = {};
                        var pageVersionList = this.getPageVersionsForSelectedLayoutVersion();
                        pageVersionList.forEach(function (pageVersion) {
                            if (pageVersionId == pageVersion.id) {
                                pageInformation.id = pageVersion.getPageId();
                                pageInformation.index = pageVersion.getPageNumber();
                                pageInformation.name = pageVersion.getPageName();
                                pageInformation.position = pageVersion.getPos();
                            }
                        });
                        return pageInformation;
                    }
                }]);

                return PageUi;
            })();

            _export('default', PageUi);
        }
    };
});
System.register('promo-manager/layout-view/market-to-page-versionId-manager', ['npm:babel-runtime@5.4.3/helpers/create-class', 'npm:babel-runtime@5.4.3/helpers/class-call-check', 'npm:babel-runtime@5.4.3/core-js/map', 'helpers/util'], function (_export) {
	var _createClass, _classCallCheck, _Map, Util, MarketToPageVersionIdManager;

	return {
		setters: [function (_npmBabelRuntime543HelpersCreateClass) {
			_createClass = _npmBabelRuntime543HelpersCreateClass['default'];
		}, function (_npmBabelRuntime543HelpersClassCallCheck) {
			_classCallCheck = _npmBabelRuntime543HelpersClassCallCheck['default'];
		}, function (_npmBabelRuntime543CoreJsMap) {
			_Map = _npmBabelRuntime543CoreJsMap['default'];
		}, function (_helpersUtil) {
			Util = _helpersUtil['default'];
		}],
		execute: function () {
			'use strict';

			MarketToPageVersionIdManager = (function () {
				function MarketToPageVersionIdManager() {
					_classCallCheck(this, MarketToPageVersionIdManager);

					this.marketPageVersions = new _Map();
				}

				_createClass(MarketToPageVersionIdManager, [{
					key: 'getMarketPageVersionIdSet',
					value: function getMarketPageVersionIdSet(marketId) {
						var mpv = this.marketPageVersions;
						return mpv.get(marketId) || mpv.set(marketId, []).get(marketId);
					}
				}, {
					key: 'add',
					value: function add(pageVersion) {
						var _this = this;

						pageVersion.marketIds.forEach(function (marketId) {
							var pageVersionIdList = _this.getMarketPageVersionIdSet(marketId);
							Util.insertIntoUniqueSortedArray(pageVersionIdList, pageVersion.id);
						});
					}
				}, {
					key: 'remove',
					value: function remove(pageVersion) {
						var _this2 = this;

						pageVersion.marketIds.forEach(function (marketId) {
							var pageVersionIdList = _this2.getMarketPageVersionIdSet(marketId);
							Util.removeFromSortedArray(pageVersionIdList, pageVersion.id);
						});
					}
				}, {
					key: 'getPageVersionIds',
					value: function getPageVersionIds(marketId) {
						return this.getMarketPageVersionIdSet(marketId);
					}
				}]);

				return MarketToPageVersionIdManager;
			})();

			_export('default', MarketToPageVersionIdManager);
		}
	};
});
System.register('helpers/notifier', ['npm:babel-runtime@5.4.3/helpers/create-class', 'npm:babel-runtime@5.4.3/helpers/class-call-check'], function (_export) {
    var _createClass, _classCallCheck, Notifier;

    return {
        setters: [function (_npmBabelRuntime543HelpersCreateClass) {
            _createClass = _npmBabelRuntime543HelpersCreateClass['default'];
        }, function (_npmBabelRuntime543HelpersClassCallCheck) {
            _classCallCheck = _npmBabelRuntime543HelpersClassCallCheck['default'];
        }],
        execute: function () {
            //import toastr from 'toastr/toastr';
            //import 'toastr/toastr.css!';
            'use strict';

            Notifier = (function () {
                function Notifier($translate) {
                    _classCallCheck(this, Notifier);

                    // toastr.options = {
                    //         "closeButton": false,
                    //         "debug": false,
                    //         "positionClass": "toast-bottom-right",
                    //         "onclick": null,
                    //         "showDuration": "1000",
                    //         "hideDuration": "1000",
                    //         "timeOut": "5000",
                    //         "extendedTimeOut": "1000",
                    //         "showEasing": "swing",
                    //         "hideEasing": "linear",
                    //         "showMethod": "fadeIn",
                    //         "hideMethod": "fadeOut"
                    // };
                    //        this.toastr = toastr;
                    this.$translate = $translate;
                }

                _createClass(Notifier, [{
                    key: 'notify',
                    value: function notify(body, title, severity) {
                        //        this.toastr[severity || 'info']( body, title );
                        console.log(title + ' ' + body);
                    }
                }, {
                    key: 'errorWith',
                    value: function errorWith(message) {
                        //        this.toastr['error']( this.$translate.instant(message) );
                        console.log(this.$translate.instant(message));
                    }
                }, {
                    key: 'error',
                    value: function error(message) {
                        //        this.toastr['error']( this.$translate.instant(message) );       
                        console.log(this.$translate.instant(message));
                    }
                }, {
                    key: 'info',
                    value: function info(message) {
                        //        this.toastr['info']( this.$translate.instant(message)  );       
                        console.log(this.$translate.instant(message));
                    }
                }, {
                    key: 'warn',
                    value: function warn(message) {
                        //        this.toastr['warning']( this.$translate.instant(message)  );       
                        console.log(this.$translate.instant(message));
                    }
                }]);

                return Notifier;
            })();

            _export('default', Notifier);
        }
    };
});
System.register("promo-manager/layout-view/helpers/math-util", ["npm:babel-runtime@5.4.3/helpers/create-class", "npm:babel-runtime@5.4.3/helpers/class-call-check"], function (_export) {
	var _createClass, _classCallCheck, MathUtil;

	return {
		setters: [function (_npmBabelRuntime543HelpersCreateClass) {
			_createClass = _npmBabelRuntime543HelpersCreateClass["default"];
		}, function (_npmBabelRuntime543HelpersClassCallCheck) {
			_classCallCheck = _npmBabelRuntime543HelpersClassCallCheck["default"];
		}],
		execute: function () {
			"use strict";

			MathUtil = (function () {
				function MathUtil() {
					_classCallCheck(this, MathUtil);
				}

				_createClass(MathUtil, null, [{
					key: "lerp",
					value: function lerp(i, a, b) {
						return (1 - i) * a + i * b;
					}
				}, {
					key: "sinEasing",

					// i=0.00 => (1-0   )*a + 0.00*b => a
					// i=0.25 => (1-0.25)*a + 0.25*b => 0.75*a + 0.25*b
					// i=1.00 => (1-1   )*a + 1.00*b => b
					value: function sinEasing(t) {
						return 0.5 * (Math.sin(t * Math.PI - 0.5 * Math.PI) + 1);
					}
				}, {
					key: "linearTween",

					// t = current time
					// b = start value
					// c = change in value
					// d = duration
					// not tested !
					// simple linear tweening - no easing, no acceleration
					value: function linearTween(t, b, c, d) {
						return c * t / d + b;
					}
				}, {
					key: "easeInQuad",

					// quadratic easing in - accelerating from zero velocity
					// (I think the way to do squared is to mult by itselsf)
					value: function easeInQuad(t, b, c, d) {
						t /= d;
						return c * t * t + b;
					}
				}, {
					key: "easeOutQuad",

					// quadratic easing out - decelerating to zero velocity
					value: function easeOutQuad(t, b, c, d) {
						t /= d;
						return -c * t * (t - 2) + b;
					}
				}, {
					key: "easeInOutQuad",

					// quadratic easing in/out - acceleration until halfway, then deceleration
					value: function easeInOutQuad(t, b, c, d) {
						t /= d / 2;
						if (t < 1) {
							return c / 2 * t * t + b;
						}
						t--;
						return -c / 2 * (t * (t - 2) - 1) + b;
					}
				}, {
					key: "easeInCubic",

					// cubic easing in - accelerating from zero velocity
					value: function easeInCubic(t, b, c, d) {
						t /= d;
						return c * t * t * t + b;
					}
				}, {
					key: "easeOutCubic",

					// cubic easing out - decelerating to zero velocity
					value: function easeOutCubic(t, b, c, d) {
						t /= d;
						t--;
						return c * (t * t * t + 1) + b;
					}
				}, {
					key: "easeInOutCubic",

					// cubic easing in/out - acceleration until halfway, then deceleration
					value: function easeInOutCubic(t, b, c, d) {
						t /= d / 2;
						if (t < 1) {
							return c / 2 * t * t * t + b;
						}
						t -= 2;
						return c / 2 * (t * t * t + 2) + b;
					}
				}]);

				return MathUtil;
			})();

			_export("default", MathUtil);
		}
	};
});
System.register('promo-manager/layout-view/helpers/card-ui', ['npm:babel-runtime@5.4.3/helpers/create-class', 'npm:babel-runtime@5.4.3/helpers/class-call-check', 'promo-manager/layout-view/layout-view-consts', 'npm:gl-matrix@2.3.1', 'promo-manager/layout-view/page-version', 'promo-manager/layout-view/block'], function (_export) {
    var _createClass, _classCallCheck, LayoutConsts, glMatrix, PageVersion, Block, vec4, mat4, CardUi;

    return {
        setters: [function (_npmBabelRuntime543HelpersCreateClass) {
            _createClass = _npmBabelRuntime543HelpersCreateClass['default'];
        }, function (_npmBabelRuntime543HelpersClassCallCheck) {
            _classCallCheck = _npmBabelRuntime543HelpersClassCallCheck['default'];
        }, function (_promoManagerLayoutViewLayoutViewConsts) {
            LayoutConsts = _promoManagerLayoutViewLayoutViewConsts['default'];
        }, function (_npmGlMatrix231) {
            glMatrix = _npmGlMatrix231['default'];
        }, function (_promoManagerLayoutViewPageVersion) {
            PageVersion = _promoManagerLayoutViewPageVersion['default'];
        }, function (_promoManagerLayoutViewBlock) {
            Block = _promoManagerLayoutViewBlock['default'];
        }],
        execute: function () {
            'use strict';

            vec4 = glMatrix.vec4;
            mat4 = glMatrix.mat4;

            CardUi = (function () {
                function CardUi(viewportTarget, originalEvent, src, type, camera, viewport) {
                    _classCallCheck(this, CardUi);

                    this.type = type;
                    this.src = src;
                    this.viewport = viewport;
                    this.updateWorldCoordEndVector(viewportTarget, originalEvent, camera);
                    this.worldCoordStartVec4 = angular.copy(this.worldCoordEndVec4);
                    this.update(camera);
                }

                _createClass(CardUi, [{
                    key: 'move',
                    value: function move(viewportTarget, originalEvent, camera) {
                        this.updateWorldCoordEndVector(viewportTarget, originalEvent, camera);
                        this.update(camera);
                        var pageVersion = this.updateHoverState(this.viewport);
                        return pageVersion;
                    }
                }, {
                    key: 'drop',
                    value: function drop(viewportTarget, originalEvent, camera) {
                        this.update(camera);
                        this.dropCard(viewportTarget, originalEvent, camera);
                    }
                }, {
                    key: 'update',
                    value: function update(camera) {

                        var worldToCameraMat4 = camera.getMatrix();
                        var cameraSpaceCursorVec4 = vec4.transformMat4(vec4.create(), this.worldCoordEndVec4, worldToCameraMat4);
                        var cameraSpaceCardTopLeftVec4 = vec4.fromValues(-0.5 * LayoutConsts.DRAGCARD_WIDTH, -0.5 * LayoutConsts.DRAGCARD_HEIGHT, LayoutConsts.INT_32_MAX, 0);
                        var c0 = vec4.add(cameraSpaceCardTopLeftVec4, cameraSpaceCardTopLeftVec4, cameraSpaceCursorVec4);

                        this._cameraSpaceStyles = {
                            'transform': 'translate(' + c0[0] + 'px, ' + c0[1] + 'px)',
                            '-ms-transform': 'translate(' + c0[0] + 'px, ' + c0[1] + 'px)',
                            '-webkit-transform': 'translate(' + c0[0] + 'px, ' + c0[1] + 'px)' };
                    }
                }, {
                    key: 'dropCard',

                    /*
                    On resolving card action:
                      Perform rtree search on worldCoordEndVec4 +/- hitbox depending on the initiated action (i.e. 'type')
                        usually this will be a single point (x, y, w=0~1, h=0~1) directly under the cursor
                      Dispatch to an appropriate handler based on source object logic (e.g. PageVersion or Offer)
                        Dispatch provides a function which takes 'hitboxX', 'hitboxY' as parameters and returns the
                        search results around the worldCoordEndVec4 which the handler can sort (e.g. z-position) and
                        filter by type (e.g. only interested in PageVersions) to decide whether the target is a valid
                        destination
                        If handler finds a valid destination, execute the action
                          e.g. copy offer, move offer, replace offer, copy to clipboard
                          Also update the rtree if any object was moved/relocated
                          Update styles on modified objects
                        If handler finds no valid destination, revert the action (e.g. same as escape)
                      // Future: queue up an animation show revert of the card back to original location fading to opacity: 0
                       */
                    value: function dropCard(viewportTarget, originalEvent, camera) {
                        this.updateWorldCoordEndVector(viewportTarget, originalEvent, camera);

                        var v = this.worldCoordEndVec4;
                        var contains = this.viewport.contains(v);

                        if (!contains.length) {
                            return;
                        }
                        // determine if target is an eligible drop candidate
                        var target = this.selectCardDropTarget(contains);
                        if (target) {
                            //transfer the content contained in the card to the the new home
                            // and send to server
                            this.transferCardContents(target);
                        }
                    }
                }, {
                    key: 'updateHoverState',
                    value: function updateHoverState() {
                        var v = this.worldCoordEndVec4;
                        var contains = this.viewport.contains(v);

                        if (!contains.length) {
                            return;
                        }
                        var pageVersion = contains.filter(function (page) {
                            return page instanceof PageVersion;
                        });
                        if (!pageVersion.length) {
                            return;
                        }
                        pageVersion.sort(function (a, b) {
                            return a._worldZ1 < b._worldZ1;
                        });
                        // if more than one, select the page with the highest z-index
                        return pageVersion[0];
                    }
                }, {
                    key: 'updateWorldCoordEndVector',

                    /*
                    On card dragging:
                      Project camera-space coordinates (pageX, pageY) minus viewport offset (top,left) multiplied by cameraInverse
                        to get updated world space coordinates of cursor
                      set drag-action object's worldCoordEndVec4
                      // Future: screen-edge panning
                      // Future: page-stack reordering based on user dragging over an object
                       */

                    // Calculate camera-space extent of the drag card centered around the cursor
                    value: function updateWorldCoordEndVector(viewportTarget, originalEvent, camera) {
                        var viewportOffset = viewportTarget.offset();
                        var cameraToWorldMat4 = camera.getInverse();
                        var viewportX = originalEvent.pageX - viewportOffset.left;
                        var viewportY = originalEvent.pageY - viewportOffset.top;
                        var cameraSpaceCursorVec4 = vec4.fromValues(viewportX, viewportY, 0, 1);
                        var worldSpaceCursorVec4 = vec4.transformMat4(vec4.create(), cameraSpaceCursorVec4, cameraToWorldMat4);
                        this.worldCoordEndVec4 = worldSpaceCursorVec4;
                    }
                }, {
                    key: 'selectCardDropTarget',
                    value: function selectCardDropTarget(dropZone) {
                        //currently only offers are dropped, and are dropped into a block
                        if (!dropZone) {
                            return;
                        }
                        // get card content type;
                        // offer can be dropped into a block
                        var type = this.type;
                        if (type == LayoutConsts.MODE_OFFER_DRAG) {
                            var offer = this.src.offerVersion;
                            //filter blocks only
                            var blocks = dropZone.filter(function (block) {
                                return block instanceof Block;
                            });
                            if (!blocks.length) {
                                return;
                            }
                            blocks.sort(function (a, b) {
                                return a._worldZ1 < b._worldZ1;
                            });
                            var block = blocks[0];
                            if (block.hierarchyId != -1 && block.hierarchyId != offer.hierarchyId) {
                                return;
                            }
                            if (block.offerVersion && block.offerVersion.id) {
                                return;
                            }
                            return block;
                        }
                    }
                }, {
                    key: 'transferCardContents',
                    value: function transferCardContents(target) {
                        var offer = angular.copy(this.src.offerVersion);
                        delete this.src.offerVersion;
                        target.offerVersion = offer;

                        //updating the block hierarchy leave the problem of what to do if the offer is
                        //moved (has implications for filtering)
                        //        target.hierarchyId = offer.hierarchyId;

                        //send to server
                    }
                }]);

                return CardUi;
            })();

            _export('default', CardUi);
        }
    };
});

//        'z-index': `${c0[2]}`
System.register('promo-manager/layout-view/helpers/layout-version-formatter', ['npm:babel-runtime@5.4.3/helpers/create-class', 'npm:babel-runtime@5.4.3/helpers/class-call-check', 'npm:babel-runtime@5.4.3/helpers/sliced-to-array', 'npm:babel-runtime@5.4.3/core-js/get-iterator'], function (_export) {
				var _createClass, _classCallCheck, _slicedToArray, _getIterator, LayoutVersionFormatter;

				return {
								setters: [function (_npmBabelRuntime543HelpersCreateClass) {
												_createClass = _npmBabelRuntime543HelpersCreateClass['default'];
								}, function (_npmBabelRuntime543HelpersClassCallCheck) {
												_classCallCheck = _npmBabelRuntime543HelpersClassCallCheck['default'];
								}, function (_npmBabelRuntime543HelpersSlicedToArray) {
												_slicedToArray = _npmBabelRuntime543HelpersSlicedToArray['default'];
								}, function (_npmBabelRuntime543CoreJsGetIterator) {
												_getIterator = _npmBabelRuntime543CoreJsGetIterator['default'];
								}],
								execute: function () {
												'use strict';

												LayoutVersionFormatter = (function () {
																function LayoutVersionFormatter() {
																				_classCallCheck(this, LayoutVersionFormatter);
																}

																_createClass(LayoutVersionFormatter, null, [{
																				key: 'out',
																				value: function out(page) {
																								var blocks = page.blockList.map(function (block) {

																												var output = {
																																id: block.id,
																																name: block.name,
																																color: block.color,
																																theme: block.theme,
																																u1: block.u1,
																																u2: block.u2,
																																v1: block.v1,
																																v2: block.v2,
																																merchandiseHierarchy: {
																																				id: block.hierarchyId
																																},
																																blockGroupList: [{ id: block.blockGroupId }]

																												};
																												if (block.offerVersion) {
																																output.offerVersion = {
																																				id: block.offerVersion.id,
																																				name: block.offerVersion.name,
																																				merchandiseHierarchy: {
																																								id: block.offerVersion.hierarchyId
																																				},
																																				offer: block.offerVersion.offer,
																																				offerVersionFeaturedSku: block.offerVersion.offerVersionFeaturedSku
																																};
																												}
																												if (block.changeRequest) {
																																output.changeRequest = {
																																				id: block.changeRequest.rfcId,
																																				changeStatus: { id: block.changeRequest.changeStatusId }
																																};
																												}
																												if (block.blockGroupMap.blockGroups.size) {
																																output.blockGroupMap = {};
																																var _iteratorNormalCompletion = true;
																																var _didIteratorError = false;
																																var _iteratorError = undefined;

																																try {
																																				for (var _iterator = _getIterator(block.blockGroupMap.blockGroups.entries()), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
																																								var _step$value = _slicedToArray(_step.value, 2);

																																								var key = _step$value[0];
																																								var value = _step$value[1];

																																								output.blockGroupMap[key] = {
																																												id: key,
																																												name: value.name,
																																												blockIdList: value.ids
																																								};
																																				}
																																} catch (err) {
																																				_didIteratorError = true;
																																				_iteratorError = err;
																																} finally {
																																				try {
																																								if (!_iteratorNormalCompletion && _iterator['return']) {
																																												_iterator['return']();
																																								}
																																				} finally {
																																								if (_didIteratorError) {
																																												throw _iteratorError;
																																								}
																																				}
																																}
																												}
																												return output;
																								});

																								var format = {
																												'gridVersionMap': {
																																page: page.id,
																																name: page.name,
																																description: page.description,
																																pageWidth: page.dimension.w,
																																pageHeight: page.dimension.h,
																																unit: page.unit,
																																versionMarketIdList: page.marketIds,
																																blockList: blocks
																												}

																								};
																								return format;
																				}
																}, {
																				key: 'gridVersionMap',
																				value: function gridVersionMap(_gridVersionMap, id, page, h, w, unit, marketList) {
																								_gridVersionMap[id] = {
																												id: null,
																												description: null,
																												pageWidth: w,
																												pageHeight: h,
																												unit: unit,
																												name: page.gridVersionName,
																												versionMarketIdList: marketList
																								};
																								return _gridVersionMap;
																				}
																}, {
																				key: 'pageVersionUpdate',
																				value: function pageVersionUpdate(pageGridVersion, originalPageGridVersion) {
																								var dataChange = false;
																								var gridVersion = {
																												id: pageGridVersion.id
																								};
																								var x = undefined;
																								for (x in pageGridVersion) {
																												if (originalPageGridVersion[x] != pageGridVersion[x] && x != 'merchandiseHierarchyList') {
																																dataChange = true;
																																gridVersion[x] = pageGridVersion[x];
																												}
																												if (x == 'merchandiseHierarchyList' && originalPageGridVersion[x].id != pageGridVersion[x].id) {
																																dataChange = true;
																																gridVersion[x] = pageGridVersion[x];
																												}
																								}
																								if (!dataChange) {
																												return null;
																								}

																								return { pageGridVersionList: [gridVersion] };
																				}
																}, {
																				key: 'pageVersionDelete',
																				value: function pageVersionDelete(pageId, moveOffers) {
																								var format = {
																												layoutPageList: [{
																																id: pageId
																												}],
																												moveOffersToParkingLot: moveOffers
																								};
																								return format;
																				}
																}, {
																				key: 'pageVersionClearTemplate',
																				value: function pageVersionClearTemplate(pageVersionId, moveOffers) {
																								var format = {
																												pageGridVersionList: [{
																																id: pageVersionId
																												}],
																												moveOffersToParkingLot: moveOffers
																								};
																								return format;
																				}
																}, {
																				key: 'pageVersionApplyTemplate',
																				value: function pageVersionApplyTemplate(template, pageVersionId, moveOffers) {
																								var format = {
																												pageLayoutTempate: {
																																id: template
																												},
																												pageGridVersionList: [{
																																id: pageVersionId
																												}],
																												moveOffersToParkingLot: moveOffers
																								};
																								return format;
																				}
																}]);

																return LayoutVersionFormatter;
												})();

												_export('default', LayoutVersionFormatter);
								}
				};
});
System.register('helpers/toggle-state', [], function (_export) {
    'use strict';

    function toggleState($document, $parse) {
        var serialNum = 0;
        return {
            link: function link($scope, $ele, $attr) {
                // Make sure we can differentiate between different instances
                // of the directive so we can cleanly create/destroy them
                var namespace = '.toggleState' + ++serialNum;

                // Per-instance state
                var isOpen = false;
                var inProgress = false;

                // On a click bubbling up to the document, clear the toggle
                // state IF it is marked as a unique toggleable and also
                // did not originate from the element
                $document.on('click' + namespace, function () {
                    if ($parse($attr.toggleUnique)($scope) && !inProgress) {
                        isOpen = false;
                        $scope.$digest();
                    }
                    inProgress = false;
                });

                // On a click, toggle the state but raise a flag so
                // the document click handler silently ignores it
                $ele.on('click' + namespace, function ($event) {
                    isOpen = !isOpen;
                    inProgress = true;
                    $scope.$digest();
                });

                // On an update of the toggle state, write the
                // value back to the lval expression
                $scope.$watch(function () {
                    return isOpen;
                }, function (newVal, oldVal) {
                    $parse($attr.toggleState).assign($scope, newVal);
                });

                // Remember to clean up our event handlers
                $scope.$on('$destroy', function () {
                    $ele.off('click' + namespace);
                    $document.off('click' + namespace);
                });
            }
        };
    }

    return {
        setters: [],
        execute: function () {
            toggleState.$inject = ['$document', '$parse'];
            _export('default', toggleState);
        }
    };
});
System.register('promo-manager/helpers/merchandise-hierarchy-selection', ['npm:babel-runtime@5.4.3/helpers/create-class', 'npm:babel-runtime@5.4.3/helpers/class-call-check'], function (_export) {
	var _createClass, _classCallCheck, MerchandiseHierarchySelection;

	return {
		setters: [function (_npmBabelRuntime543HelpersCreateClass) {
			_createClass = _npmBabelRuntime543HelpersCreateClass['default'];
		}, function (_npmBabelRuntime543HelpersClassCallCheck) {
			_classCallCheck = _npmBabelRuntime543HelpersClassCallCheck['default'];
		}],
		execute: function () {
			'use strict';

			MerchandiseHierarchySelection = (function () {
				function MerchandiseHierarchySelection($scope) {
					var _this = this;

					_classCallCheck(this, MerchandiseHierarchySelection);

					this.shadowModel = [];
					$scope.$watch(function () {
						return _this.ngModel;
					}, function (newVal, oldVal) {
						_this.update();
					});
					$scope.$watch(function () {
						return _this.treeMap;
					}, function (newVal, oldVal) {
						_this.update();
					});
				}

				_createClass(MerchandiseHierarchySelection, [{
					key: 'update',
					value: function update() {
						var _this2 = this;

						if (!this.treeMap) {
							return;
						}
						var node = this.treeMap.getNode(this.ngModel);
						if (node) {
							(function () {
								var path = node.getPath();
								_this2.dropdowns = _this2.defaultLabels.map(function (defaultLabel, i) {
									var options = [];
									var parentNode = null;
									if (i == 0) {
										// Root parent
										parentNode = _this2.treeMap.getRootNode();
										options = parentNode.getChildren();
										options.unshift({ id: parentNode.id, name: defaultLabel });
									} else if (i <= path.length) {
										// Defined parent
										parentNode = path[i - 1];
										options = parentNode.getChildren();
										options.unshift({ id: parentNode.id, name: defaultLabel });
									} else {
										// Wildcard parent
										options.unshift({ id: _this2.ngModel, name: defaultLabel });
									}
									return options;
								});
								_this2.shadowModel = path.map(function (ele) {
									return ele.id;
								});
								if (_this2.shadowModel.length != _this2.defaultLabels.length) {
									for (var i = _this2.shadowModel.length; i < _this2.defaultLabels.length; ++i) {
										_this2.shadowModel[i] = _this2.ngModel;
									}
								}
							})();
						}
					}
				}, {
					key: 'getSelectedName',
					value: function getSelectedName(dropdownIndex) {
						var path = this.treeMap.getNode(this.ngModel).getPath();
						if (dropdownIndex < path.length) {
							// Dropdown has a selected value
							return path[dropdownIndex].name;
						}
						// Dropdown doesn't have a selected value - show the default
						return this.dropdowns[dropdownIndex][0].name;
					}
				}, {
					key: 'updateModel',
					value: function updateModel(value, callback) {
						// Update the value
						this.ngModel = value;
					}
				}]);

				return MerchandiseHierarchySelection;
			})();

			_export('default', MerchandiseHierarchySelection);

			MerchandiseHierarchySelection.$inject = ['$scope'];
		}
	};
});
System.register('promo-manager/helpers/merchandise-hierarchy-node-path', [], function (_export) {
	'use strict';

	_export('default', merchandiseHierarchyNodePath);

	function merchandiseHierarchyNodePath() {
		return function (hierarchyId, merchandiseHierarchy) {
			if (!merchandiseHierarchy) {
				return;
			}
			var node = merchandiseHierarchy.getNode(hierarchyId);
			var path = node.getPath();
			var pathName = '';
			angular.forEach(path, function (treeNode, i) {
				if (i + 1 == path.length) {
					pathName += treeNode.name;
				} else {
					pathName += treeNode.name + ' > ';
				}
			});
			return pathName;
		};
	}

	return {
		setters: [],
		execute: function () {}
	};
});
System.register('api/api-configurator', [], function (_export) {
	'use strict';

	_export('default', onConfig);

	function onConfig($provide) {

		$provide.decorator('API', function ($delegate) {
			var API = {
				Common: {}
			};

			// Common Calls
			API.Common.getChannelList = function () {
				return $delegate.get('vehicle.channel.getChannelListByUser.action');
			};
			API.Common.getChangeTypeList = function () {
				return $delegate.get('promo.lock.getAllChangeTypes.action');
			};
			API.Common.getMerchandiseHierarchyTreeMap = function (options) {
				return $delegate.post('vehicle.promoMgr.loadMerchandiseMap.action', angular.extend({
					excludeDeleted: true
				}, options));
			};
			API.Common.getMerchandiseHierarchy = function (options) {
				return $delegate.post('merchandisehierarchy.getMerchandiseHierarchy.action', angular.extend({}, options));
			};
			API.Common.getUsers = function (userIdList) {
				return $delegate.post('common.user.getUsersById.action', {
					userIdList: userIdList
				});
			};
			API.Common.getUserDepartmentMap = function (userIdList) {
				return $delegate.post('common.user.getUserDepartmentsMap.action');
			};
			API.Common.postMerchandiseHierarchyTreeMap = function (options) {
				return $delegate.post('vehicle.promoMgr.loadMerchandiseMap.action', options);
			};
			API.Common.getStoreMap = function (vehicle) {
				return $delegate.post('vehicle.promoMgr.cpp.json.smd.loadStoreMap.action', {
					vehicleVersionId: vehicle.vehicleVersionId
				});
			};

			angular.element.extend(true, $delegate, API);
			return $delegate;
		});
	}

	return {
		setters: [],
		execute: function () {
			onConfig.$inject = ['$provide'];
		}
	};
});
System.register('promo-manager/api/promo-manager-api-configurator', [], function (_export) {
	'use strict';

	_export('default', onConfig);

	function onConfig($provide) {

		$provide.decorator('API', function ($delegate) {
			var API = {
				PromoManager: {
					Common: {} }
			};

			API.PromoManager.Common.getVehicleVersionList = function (vehicleId) {
				return $delegate.get('vehicle.version.json.clientVehicleVersionList.action', {
					vehicleId: vehicleId
				});
			};
			API.PromoManager.Common.getChannelList = function () {
				return $delegate.get('promo.planning.getAllImplTypeChannels.action');
			};

			angular.element.extend(true, $delegate, API);
			return $delegate;
		});
	}

	return {
		setters: [],
		execute: function () {
			onConfig.$inject = ['$provide'];
		}
	};
});
System.register('promo-manager/layout-view/api/layout-view-api-configurator', [], function (_export) {
    'use strict';

    _export('default', onConfig);

    function onConfig($provide) {

        $provide.decorator('API', function ($delegate) {
            var API = {
                PromoManager: {
                    LayoutView: {} }
            };

            API.PromoManager.LayoutView.getLayoutVersion = function (layoutId, layoutMarketsList) {
                return $delegate.post('layout-view/layout.getLayoutVersion.action', {
                    layout: {
                        id: layoutId
                    },
                    marketList: layoutMarketsList
                });
            };
            API.PromoManager.LayoutView.getLayout = function (vehicleId) {
                return $delegate.post('layout-view/layout.loadLayout.action', {
                    vehicleVersion: {
                        id: vehicleId
                    }
                });
            };
            API.PromoManager.LayoutView.addPages = function (layoutId, pageList) {
                return $delegate.post('layout-view/layout.addPagesToLayout.action', {
                    layout: {
                        id: layoutId
                    },
                    pageList: pageList
                });
            };
            API.PromoManager.LayoutView.haveOffers = function (layoutPageList) {
                return $delegate.post('layout-view/page.haveOffers.action', {
                    layoutPageList: layoutPageList
                });
            };
            API.PromoManager.LayoutView.haveChangeRequestAssociations = function (layoutPageList) {
                return $delegate.post('layout-view/page.haveChangeRequestAssociations.action', {
                    layoutPageList: layoutPageList
                });
            };
            API.PromoManager.LayoutView.moveOffersToParkingLot = function (pageGridId) {
                return $delegate.post('layout-view/page.moveOffersToParkingLot.action', {
                    layoutPageList: pageGridId
                });
            };
            API.PromoManager.LayoutView.removePages = function (pages) {
                return $delegate.post('layout-view/page.removePages.action', {
                    layoutPageList: pages.layoutPageList,
                    moveOffersToParkingLot: pages.moveOffersToParkingLot

                });
            };
            API.PromoManager.LayoutView.updatePages = function (pagelist) {
                var layoutPageList = pagelist.layoutPageList;
                return $delegate.post('layout-view/page.updatePages.action', {
                    layoutPageList: layoutPageList
                });
            };
            API.PromoManager.LayoutView.getPageVersion = function (layoutPageList, marketList) {
                return $delegate.post('layout-view/page.getPageVersion.action', {
                    layoutPageList: layoutPageList,
                    marketList: marketList
                });
            };
            API.PromoManager.LayoutView.loadPageGridVersion = function (pageVersionId) {
                return $delegate.post('layout-view/grid.loadPageGridVersion.action', {
                    pageGridVersion: {
                        id: pageVersionId
                    }
                });
            };
            API.PromoManager.LayoutView.updatePageGridVersions = function (pageGrid) {
                var pageGridVersionList = pageGrid.pageGridVersionList;
                return $delegate.post('layout-view/grid.updatePageGridVersions.action', {
                    pageGridVersionList: pageGridVersionList
                });
            };
            API.PromoManager.LayoutView.haveChangeRequestAssociationsGrid = function (pageGridId) {
                return $delegate.post('layout-view/grid.haveChangeRequestAssociations.action', {
                    pageGridVersionList: pageGridId
                });
            };
            API.PromoManager.LayoutView.moveOffersToParkingLotGrid = function (pageGridId) {
                return $delegate.post('layout-view/grid.moveOffersToParkingLot.action', {
                    pageGridVersionList: pageGridId
                });
            };
            API.PromoManager.LayoutView.clearTemplates = function (pageGrid) {
                return $delegate.post('layout-view/grid.clearTemplates.action', {
                    pageGridVersionList: pageGrid.pageGridVersionList,
                    moveOffersToParkingLot: pageGrid.moveOffersToParkingLot
                });
            };
            API.PromoManager.LayoutView.applyTemplate = function (pageGrid) {
                return $delegate.post('layout-view/grid.applyTemplate.action', {
                    pageLayoutTemplate: pageGrid.pageLayoutTemplate,
                    pageGridVersionList: pageGrid.pageGridVersionList,
                    moveOffersToParkingLot: pageGrid.moveOffersToParkingLot
                });
            };
            API.PromoManager.LayoutView.loadTemplates = function (qry) {
                return $delegate.post('layout-view/pagetemplate.loadTemplates.action', {
                    startingIndex: qry.startingIndex,
                    limit: qry.limit,
                    channel: {
                        id: qry.channel
                    },
                    templateNameSearchString: qry.templateNameSearchString

                });
            };
            API.PromoManager.LayoutView.loadGridVersionBlock = function (blockId) {
                return $delegate.post('layout-view/block.loadGridVersionBlock.action', {
                    block: {
                        id: blockId
                    }
                });
            };
            API.PromoManager.LayoutView.updateGridVersionBlocks = function (blockList) {
                return $delegate.post('layout-view/block.updateGridVersionBlocks.action', {
                    blockList: blockList.blockList
                });
            };

            angular.element.extend(true, $delegate, API);
            return $delegate;
        });
    }

    return {
        setters: [],
        execute: function () {
            onConfig.$inject = ['$provide'];
        }
    };
});
System.register('promo-manager/layout-view/layout-view-input-directive', [], function (_export) {
    'use strict';

    return {
        setters: [],
        execute: function () {
            _export('default', function () {
                return {
                    restrict: 'A',
                    scope: {
                        expression: '&layoutViewInput',
                        listenEvents: '=layoutViewEvents',
                        propagateEvent: '=',
                        cancelEvent: '='
                    },
                    link: function link(scope, element, attrs) {
                        var directiveNs = '.layoutviewinput';
                        scope.$watchCollection(function () {
                            return scope.listenEvents;
                        }, function (newVal, oldVal) {
                            var oldEvents = oldVal.map(function (oldListenEvents) {
                                return oldListenEvents + directiveNs;
                            }).join(' ');
                            var newEvents = newVal.map(function (newListenEvents) {
                                return newListenEvents + directiveNs;
                            }).join(' ');

                            if (angular.isArray(oldVal)) {
                                element.off(oldEvents);
                            }
                            if (angular.isArray(newVal)) {
                                element.on(newEvents, function (e) {
                                    scope.$apply(function () {
                                        scope.expression({ '$event': e });
                                    });
                                    if (scope.propagateEvent) {
                                        e.stopPropagation();
                                    }
                                    if (scope.cancelEvent) {
                                        e.preventDefault();
                                    }
                                });
                            }
                        });
                        scope.$on('$destroy', function () {
                            element.off(directiveNs);
                        });
                    }
                };
            });
        }
    };
});
System.register('promo-manager/layout-view/helpers/thumbnail-canvas-renderer', [], function (_export) {
	'use strict';

	_export('default', thumbnailCanvasRenderer);

	function thumbnailCanvasRenderer() {
		return {
			restrict: 'EA',
			scope: {
				'blockList': '=' },
			template: '<canvas width=\'30\' height=\'50\'  style=\'border:1px solid #000000;\'/>',
			link: function link(scope, element, attrs) {
				scope.canvas = element.find('canvas')[0];
				scope.context = scope.canvas.getContext('2d');
				scope.blockList.forEach(function (block) {
					var w = 30;
					var h = 50;
					var x = block.u1;
					var y = block.v1;
					var width = Math.floor(block.u2 * w);
					var height = Math.floor(block.v2 * h);
					scope.context.strokeStyle = '#0000ff';
					scope.context.strokeRect(x, y, width, height);
				});
			}
		};
	}

	return {
		setters: [],
		execute: function () {}
	};
});
System.register('promo-manager/layout-view/block', ['npm:babel-runtime@5.4.3/helpers/create-class', 'npm:babel-runtime@5.4.3/helpers/class-call-check', 'npm:babel-runtime@5.4.3/helpers/sliced-to-array', 'promo-manager/layout-view/change-request', 'promo-manager/layout-view/offer-version-manager', 'promo-manager/layout-view/block-group-to-blockId-manager', 'helpers/util', 'npm:gl-matrix@2.3.1', 'promo-manager/layout-view/layout-view-consts', 'promo-manager/layout-view/permitted-action'], function (_export) {
	var _createClass, _classCallCheck, _slicedToArray, ChangeRequest, OfferVersionManager, BlockGroupToBlockIdManager, Util, glMatrix, LayoutViewConsts, PermittedAction, vec4, mat4, Block;

	return {
		setters: [function (_npmBabelRuntime543HelpersCreateClass) {
			_createClass = _npmBabelRuntime543HelpersCreateClass['default'];
		}, function (_npmBabelRuntime543HelpersClassCallCheck) {
			_classCallCheck = _npmBabelRuntime543HelpersClassCallCheck['default'];
		}, function (_npmBabelRuntime543HelpersSlicedToArray) {
			_slicedToArray = _npmBabelRuntime543HelpersSlicedToArray['default'];
		}, function (_promoManagerLayoutViewChangeRequest) {
			ChangeRequest = _promoManagerLayoutViewChangeRequest['default'];
		}, function (_promoManagerLayoutViewOfferVersionManager) {
			OfferVersionManager = _promoManagerLayoutViewOfferVersionManager['default'];
		}, function (_promoManagerLayoutViewBlockGroupToBlockIdManager) {
			BlockGroupToBlockIdManager = _promoManagerLayoutViewBlockGroupToBlockIdManager['default'];
		}, function (_helpersUtil) {
			Util = _helpersUtil['default'];
		}, function (_npmGlMatrix231) {
			glMatrix = _npmGlMatrix231['default'];
		}, function (_promoManagerLayoutViewLayoutViewConsts) {
			LayoutViewConsts = _promoManagerLayoutViewLayoutViewConsts['default'];
		}, function (_promoManagerLayoutViewPermittedAction) {
			PermittedAction = _promoManagerLayoutViewPermittedAction['default'];
		}],
		execute: function () {
			'use strict';

			vec4 = glMatrix.vec4;
			mat4 = glMatrix.mat4;

			Block = (function () {
				function Block(data, page) {
					var _this = this;

					_classCallCheck(this, Block);

					this.id = data.id;
					this.name = data.name;
					this.color = data.color;
					this.theme = data.theme;
					this.type = LayoutViewConsts.TYPE_BLOCK;
					//context menu
					this.open = false;

					this.u1 = data.u1;
					this.u2 = data.u2;
					this.v1 = data.v1;
					this.v2 = data.v2;
					this.page = page;
					this.hierarchyId = angular.isObject(data.merchandiseHierarchy) ? data.merchandiseHierarchy.id : -1;

					// FIXME - this should be a single unique value and not a list???
					// double check API spec
					this.blockGroupId = null;
					if (data.blockGroupList && data.blockGroupList.length) {
						this.blockGroupId = data.blockGroupList[0].id;
					}
					if (data.offerVersion) {
						this.offerVersion = new OfferVersionManager(data.offerVersion);
					}
					if (data.changeRequest) {
						this.changeRequest = new ChangeRequest(data.changeRequest);
					}
					this.blockGroupMap = new BlockGroupToBlockIdManager();
					angular.forEach(data.blockGroupMap, function (bgm, k) {
						_this.blockGroupMap.addBlockGroup(bgm.id, bgm.name, bgm.blockIdList);
					});
					if (data.permittedActions) {
						this.permittedActions = $.map(data.permittedActions, function (name, action) {
							return new PermittedAction(name, action);
						});
					}
				}

				_createClass(Block, [{
					key: 'isActiveChangeRequest',
					value: function isActiveChangeRequest(rfcStatusMap) {
						var status = null;
						if (!rfcStatusMap) {
							if (this.changeRequest) {
								status = this.changeRequest.changeStatusId;
							}
							rfcStatusMap = Util.arrayAsMap([status]);
						}

						return this.changeRequest.isActive(rfcStatusMap);
					}
				}, {
					key: 'hasOffers',
					value: function hasOffers() {
						if (this.offerVersion) {
							return true;
						}
						return false;
					}
				}, {
					key: 'getObjectSpacePoints',

					// [ObjectVec4]
					value: function getObjectSpacePoints() {
						return [vec4.fromValues(this.u1, this.v1, 0, 1), vec4.fromValues(this.u2, this.v2, 0, 1)];
					}
				}, {
					key: 'getWorldSpacePoints',

					// [WorldVec4]
					value: function getWorldSpacePoints() {
						return [vec4.clone(this._worldVec0), vec4.clone(this._worldVec1)];
					}
				}, {
					key: 'getTransformedPoints',

					// [TransformMat4] * [PointVec4]
					value: function getTransformedPoints(points, transformMat4) {
						return points.map(function (pointVec4) {
							return vec4.transformMat4(pointVec4, pointVec4, transformMat4);
						});
					}
				}, {
					key: 'calculateWorldSpaceCoordinates',
					value: function calculateWorldSpaceCoordinates(worldTransformMat4) {
						var objectSpacePoints = this.getObjectSpacePoints();

						var _getTransformedPoints = this.getTransformedPoints(objectSpacePoints, worldTransformMat4);

						var _getTransformedPoints2 = _slicedToArray(_getTransformedPoints, 2);

						this._worldVec0 = _getTransformedPoints2[0];
						this._worldVec1 = _getTransformedPoints2[1];

						var _worldVec0 = _slicedToArray(this._worldVec0, 3);

						this._worldX0 = _worldVec0[0];
						this._worldY0 = _worldVec0[1];
						this._worldZ0 = _worldVec0[2];
						var _temp = this._worldVec1;

						var _temp2 = _slicedToArray(_temp, 3);

						this._worldX1 = _temp2[0];
						this._worldY1 = _temp2[1];
						this._worldZ1 = _temp2[2];
						_temp;
					}
				}, {
					key: 'calculateCameraSpaceCoordinates',
					value: function calculateCameraSpaceCoordinates(cameraMat4) {
						// [Block's CameraVec4] = [CameraMat4] * [Block's WorldVec4]
						var worldSpacePoints = this.getWorldSpacePoints();

						var _getTransformedPoints3 = this.getTransformedPoints(worldSpacePoints, cameraMat4);

						var _getTransformedPoints32 = _slicedToArray(_getTransformedPoints3, 2);

						this._cameraVec0 = _getTransformedPoints32[0];
						this._cameraVec1 = _getTransformedPoints32[1];

						// Convert CameraVec4 into css styles
						var v0 = this._cameraVec0;
						var v1 = this._cameraVec1;

						this._cameraSpaceStyles = {
							'transform': 'translate(' + v0[0] + 'px, ' + v0[1] + 'px)',
							'-ms-transform': 'translate(' + v0[0] + 'px, ' + v0[1] + 'px)',
							'-webkit-transform': 'translate(' + v0[0] + 'px, ' + v0[1] + 'px)',
							'width': v1[0] - v0[0] + 1,
							'height': v1[1] - v0[1] + 1,
							'z-index': Math.floor(v0[2])
						};
						this.setBlockBorder();
						// FIXME - if subpixel blurring/aliasing is not a problem and all
						// supported browsers can handle the 2d/3d transforms, use that
					}
				}, {
					key: 'setBlockBorder',
					value: function setBlockBorder() {
						if (this.u1 == 0) {
							this._cameraSpaceStyles['border-left-color'] = 'transparent';
						}
						if (this.u2 == 1) {
							this._cameraSpaceStyles['border-right-color'] = 'transparent';
						}
						if (this.v1 == 0) {
							this._cameraSpaceStyles['border-top-color'] = 'transparent';
						}
						if (this.v2 == 1) {
							this._cameraSpaceStyles['border-bottom-color'] = 'transparent';
						}
					}
				}, {
					key: 'prepareForExportBlockList',
					value: function prepareForExportBlockList(newBlock, originalBlock) {
						var dataChange = false;
						var blockToExport = {
							id: newBlock.id
						};
						var x = undefined;
						for (x in newBlock) {
							if (originalBlock[x] != newBlock[x] && x != 'merchandiseHierarchy' && x != 'layoutPageGridVersion') {
								dataChange = true;
								blockToExport[x] = newBlock[x];
							}
							if (x == 'merchandiseHierarchy' && originalBlock[x] && originalBlock[x].id != newBlock[x].id) {
								dataChange = true;
								blockToExport[x] = newBlock[x];
							}
						}
						if (!dataChange) {
							return null;
						}

						return { blockList: [blockToExport] };
					}
				}]);

				return Block;
			})();

			_export('default', Block);
		}
	};
});
System.register('promo-manager/layout-view/layout-model', ['npm:babel-runtime@5.4.3/helpers/create-class', 'npm:babel-runtime@5.4.3/helpers/class-call-check', 'helpers/util', 'promo-manager/layout-view/spreads-group', 'promo-manager/layout-view/page', 'promo-manager/layout-view/layout-view-consts', 'promo-manager/layout-view/permitted-action'], function (_export) {
  var _createClass, _classCallCheck, Util, SpreadsGroup, Page, LayoutViewConsts, PermittedAction, LayoutModel;

  return {
    setters: [function (_npmBabelRuntime543HelpersCreateClass) {
      _createClass = _npmBabelRuntime543HelpersCreateClass['default'];
    }, function (_npmBabelRuntime543HelpersClassCallCheck) {
      _classCallCheck = _npmBabelRuntime543HelpersClassCallCheck['default'];
    }, function (_helpersUtil) {
      Util = _helpersUtil['default'];
    }, function (_promoManagerLayoutViewSpreadsGroup) {
      SpreadsGroup = _promoManagerLayoutViewSpreadsGroup['default'];
    }, function (_promoManagerLayoutViewPage) {
      Page = _promoManagerLayoutViewPage['default'];
    }, function (_promoManagerLayoutViewLayoutViewConsts) {
      LayoutViewConsts = _promoManagerLayoutViewLayoutViewConsts['default'];
    }, function (_promoManagerLayoutViewPermittedAction) {
      PermittedAction = _promoManagerLayoutViewPermittedAction['default'];
    }],
    execute: function () {
      'use strict';

      LayoutModel = (function () {
        function LayoutModel(data) {
          var _this = this;

          _classCallCheck(this, LayoutModel);

          var spreadsData = data.pageGroupsMap;
          var layoutVersionData = data.layoutVersionsMap;
          var pageList = data.pageList;

          this.id = data.id;
          this.channelId = data.channelId;
          this.currentPageQuantity = data.currentPageQuantity;
          this.layoutVersionIdList = [];

          if (data.permittedActions) {
            this.permittedActions = $.map(data.permittedActions, function (name, action) {
              return new PermittedAction(name, action);
            });
          }

          angular.forEach(layoutVersionData, function (marketList, layoutVersionId) {
            _this.layoutVersionIdList.push(layoutVersionId);
          });

          this.layoutVersionsMap = Util.objectAsMap(layoutVersionData);
          this.spreadsMap = Util.objectAsMap(spreadsData, function (spreadData) {
            return new SpreadsGroup(spreadData);
          });
          //supply page position if not received from host
          var adderX = LayoutViewConsts.ADD_PAGE_X_OFFSET;
          var adderY = LayoutViewConsts.ADD_PAGE_Y_OFFSET;
          var pageGrip = LayoutViewConsts.ADD_PAGE_Y_PAGE_GRIP_OFFSET;
          var initialXpos = LayoutViewConsts.ADD_PAGE_X_INITIAL_POSITION_DEFAULT;
          var initialYpos = LayoutViewConsts.ADD_PAGE_Y_INITIAL_POSITION_DEFAULT;
          var k = 0;
          this.pageList = pageList.map(function (pageData) {
            var xPos = initialXpos + adderX * pageData.position;
            var yPos = initialYpos + adderY * pageData.position + pageGrip;
            return new Page(pageData, xPos, yPos, k++);
          });
        }

        _createClass(LayoutModel, [{
          key: 'getMarketsByIndex',
          value: function getMarketsByIndex(index) {
            if (this.layoutVersionIdList.length - 1 < index || index < 0) {
              return;
            }
            return this.layoutVersionsMap.get(this.layoutVersionIdList[index]);
          }
        }, {
          key: 'getFirstMarketByIndex',
          value: function getFirstMarketByIndex(index) {
            if (this.layoutVersionIdList.length - 1 < index || index < 0) {
              return;
            }
            return this.layoutVersionsMap.get(this.layoutVersionIdList[index])[0];
          }
        }, {
          key: 'getLayoutVersionMap',
          value: function getLayoutVersionMap() {
            return this.layoutVersionsMap;
          }
        }, {
          key: 'getLayoutVersionIdList',
          value: function getLayoutVersionIdList() {
            return this.layoutVersionIdList;
          }
        }, {
          key: 'getLayoutVersionList',
          value: function getLayoutVersionList() {
            var _this2 = this;

            return this.layoutVersionIdList.map(function (id) {
              _this2.layoutVersionsMap.get(id);
            });
          }
        }, {
          key: 'getLayoutVersionIndex',
          value: function getLayoutVersionIndex(id) {
            var idList = this.getLayoutVersionIdList();
            for (var index = 0; index < idList.length; ++index) {
              if (idList[index] == id) {
                return index;
              }
            }
            return null;
          }
        }, {
          key: 'getChannel',
          value: function getChannel() {
            return this.channelId;
          }
        }, {
          key: 'addPageToLayout',
          value: function addPageToLayout(pageData) {
            this.pageList.push(new Page(pageData));
          }
        }, {
          key: 'prepareForExportPageAdd',
          value: function prepareForExportPageAdd(page, xPos, yPos, zPos, h, w, unit) {

            var format = {
              position: parseInt(page.index, 10),
              x: xPos,
              y: yPos,
              z: zPos,
              gridVersionList: [{
                pageWidth: w,
                pageHeight: h,
                unit: unit,
                name: page.pageVersionName
              }]
            };
            return format;
          }
        }, {
          key: 'prepareForExportPageLayoutList',
          value: function prepareForExportPageLayoutList(id, pages) {

            var layoutPage = [];
            pages.forEach(function (page) {
              var format = {
                id: id,
                position: parseInt(page.index, 10),
                x: page.x,
                y: page.y,
                z: page.z,
                spreadId: null
              };
              layoutPage.push(format);
            });
            return layoutPage;
          }
        }, {
          key: 'prepareForExportPagesUpdate',
          value: function prepareForExportPagesUpdate(pages) {

            var layoutPageList = [];
            pages.forEach(function (page) {
              var format = {
                id: page.id,
                position: parseInt(page.index, 10),
                x: page.position.x,
                y: page.position.y,
                z: page.position.z
              };
              layoutPageList.push(format);
            });
            return { layoutPageList: layoutPageList };
          }
        }]);

        return LayoutModel;
      })();

      _export('default', LayoutModel);
    }
  };
});
System.register('promo-manager/layout-view/helpers/input-handler', ['npm:babel-runtime@5.4.3/helpers/create-class', 'npm:babel-runtime@5.4.3/helpers/class-call-check', 'promo-manager/layout-view/helpers/math-util', 'helpers/util', 'helpers/consts', 'promo-manager/layout-view/layout-view-consts', 'promo-manager/layout-view/helpers/card-ui', 'promo-manager/layout-view/helpers/layout-version-formatter'], function (_export) {
    var _createClass, _classCallCheck, MathUtil, Util, Consts, LayoutConsts, CardUi, LayoutVersionFormatter, InputHandler;

    return {
        setters: [function (_npmBabelRuntime543HelpersCreateClass) {
            _createClass = _npmBabelRuntime543HelpersCreateClass['default'];
        }, function (_npmBabelRuntime543HelpersClassCallCheck) {
            _classCallCheck = _npmBabelRuntime543HelpersClassCallCheck['default'];
        }, function (_promoManagerLayoutViewHelpersMathUtil) {
            MathUtil = _promoManagerLayoutViewHelpersMathUtil['default'];
        }, function (_helpersUtil) {
            Util = _helpersUtil['default'];
        }, function (_helpersConsts) {
            Consts = _helpersConsts['default'];
        }, function (_promoManagerLayoutViewLayoutViewConsts) {
            LayoutConsts = _promoManagerLayoutViewLayoutViewConsts['default'];
        }, function (_promoManagerLayoutViewHelpersCardUi) {
            CardUi = _promoManagerLayoutViewHelpersCardUi['default'];
        }, function (_promoManagerLayoutViewHelpersLayoutVersionFormatter) {
            LayoutVersionFormatter = _promoManagerLayoutViewHelpersLayoutVersionFormatter['default'];
        }],
        execute: function () {
            'use strict';

            //import angular from 'angular';

            // const angularRef = window.angular;
            // const $ = angularRef.element;

            InputHandler = (function () {
                function InputHandler(pageUi, viewport, layoutView, inputEvents, layoutViewCamera) {
                    _classCallCheck(this, InputHandler);

                    this.pageUi = pageUi;
                    this.viewport = viewport;
                    this.layoutView = layoutView;
                    this.inputEvents = inputEvents;
                    this.layoutViewCamera = layoutViewCamera;
                    this.dragState = null;
                    this.cardObject = null;
                    this.X = 0;
                    this.Y = 1;
                }

                _createClass(InputHandler, [{
                    key: 'handleWheelEvent',
                    value: function handleWheelEvent($event) {
                        var originalEvent = $event.originalEvent;
                        // minor movements - which seems to be around these numbers are ignored
                        if (originalEvent.wheelDelta < 4 && originalEvent.wheelDelta > -4) {
                            return;
                        }
                        var delta = Math.max(-1, Math.min(1, originalEvent.wheelDelta || -originalEvent.detail));
                        var containerOffset = $($event.currentTarget).offset();
                        var cursorX = originalEvent.pageX - containerOffset.left;
                        var cursorY = originalEvent.pageY - containerOffset.top;

                        var deltaAmount = LayoutConsts.DELTA_AMOUNT_WHEEL;
                        var invDeltaAmount = 1 / deltaAmount;

                        var camera = this.layoutViewCamera;
                        var scaleFactor = delta < 0 ? invDeltaAmount : deltaAmount;
                        camera.scaleAbout(scaleFactor, scaleFactor, 1, cursorX, cursorY, 0);

                        if (delta) {
                            this.pageUi.updateCameraSpaceCoordinates(this.layoutViewCamera); // update all page versions
                        }
                    }
                }, {
                    key: 'handleKeyEvent',
                    value: function handleKeyEvent($event) {
                        var deltaAmount = LayoutConsts.DELTA_AMOUNT_KEY;
                        switch ($event.keyCode) {
                            case 37:
                                // left
                                this.layoutViewCamera.translate(-deltaAmount, 0, 0);
                                break;
                            case 39:
                                // right
                                this.layoutViewCamera.translate(deltaAmount, 0, 0);
                                break;
                            case 38:
                                // up
                                this.layoutViewCamera.translate(0, -deltaAmount, 0);
                                break;
                            case 40:
                                // down
                                this.layoutViewCamera.translate(0, deltaAmount, 0);
                                break;
                            default:
                                return;
                        }
                        this.pageUi.updateCameraSpaceCoordinates(this.layoutViewCamera); // update all page versions
                    }
                }, {
                    key: 'handleDragStartEvent',
                    value: function handleDragStartEvent($event) {
                        var originalEvent = $event.originalEvent;
                        var target = $event.target;
                        // Based on what was selected:
                        //   If page grip, then this is a page move
                        //   If offer grip (or content?), then this is a offer drag/drop (either cell or global/local clipboard)
                        //   If within the hitbox for a draggable cell division (UX tbd)
                        //   If null space, then this is a camera drag       
                        var viewportTarget = $(target.closest('.viewport'));
                        var pageTarget = $(target.closest('.layoutview-pageversion'));
                        var blockTarget = $(target.closest('.layoutview-block'));
                        var pageGripTarget = $(target.closest('.pageversion-grip'));
                        var pageGripMenuTarget = $(target.closest('.pageversion-grip .grip-menu'));
                        var offerGripTarget = $(target.closest('.block-offer-grip'));

                        if (pageGripMenuTarget.length > 0) {
                            var _pageVersion = pageGripMenuTarget.scope().pageVersion.pageVersion;
                            // increase the z-index of the page
                            this.pageUi.setPageIndex(_pageVersion, this.layoutViewCamera);
                        } else if (pageGripTarget.length > 0) {
                            var _pageVersion2 = pageGripTarget.scope().pageVersion.pageVersion;
                            this.dragState = {
                                origin: [originalEvent.pageX, originalEvent.pageY],
                                delta: [0, 0],
                                mode: LayoutConsts.MODE_PAGE_DRAG,
                                target: _pageVersion2
                            };
                            // Moving an object in the z-stack affects ALL pages of a higher z-index
                            this.pageUi.setPageIndex(_pageVersion2, this.layoutViewCamera);
                        } else if (offerGripTarget.length > 0) {
                            var block = offerGripTarget.scope().block;
                            var _pageVersion3 = offerGripTarget.scope().pageVersion;
                            // increase the z-index of the page
                            this.pageUi.setPageIndex(_pageVersion3, this.layoutViewCamera);
                            this.cardObject = new CardUi(viewportTarget, originalEvent, block, LayoutConsts.MODE_OFFER_DRAG, this.layoutViewCamera, this.viewport);
                        } else if (blockTarget.length > 0) {
                            var _pageVersion4 = blockTarget.scope().pageVersion;
                            // increase the z-index of the page
                            this.pageUi.setPageIndex(_pageVersion4, this.layoutViewCamera);
                        } else if (pageTarget.length > 0) {
                            var _pageVersion5 = pageTarget.scope().pageVersion;
                            // increase the z-index of the page
                            this.pageUi.setPageIndex(_pageVersion5, this.layoutViewCamera);
                        } else if (viewportTarget.length > 0) {
                            this.dragState = {
                                origin: [originalEvent.pageX, originalEvent.pageY],
                                delta: [0, 0],
                                mode: LayoutConsts.MODE_CAMERA
                            };
                        }

                        Util.insertIntoUniqueSortedArray(this.inputEvents, 'mousemove', Consts.STRING_COMPARATOR_FUNCTION);
                        Util.insertIntoUniqueSortedArray(this.inputEvents, 'mouseleave', Consts.STRING_COMPARATOR_FUNCTION);
                        Util.insertIntoUniqueSortedArray(this.inputEvents, 'mouseup', Consts.STRING_COMPARATOR_FUNCTION);
                        //      this.clearEvent($event); // causes keydown to be consumed
                    }
                }, {
                    key: 'handleDragMoveEvent',
                    value: function handleDragMoveEvent($event) {
                        if (this.dragState) {
                            this.handleDragState($event);
                        } else if (this.cardObject) {
                            this.handleCardMove($event);
                        }
                        this.clearEvent($event);
                    }
                }, {
                    key: 'handleDragState',
                    value: function handleDragState($event) {
                        var ds = this.dragState;
                        if (!ds) return;

                        var originalEvent = $event.originalEvent;
                        var target = $event.target;

                        var dx = originalEvent.pageX - (ds.origin[0] + ds.delta[0]);
                        var dy = originalEvent.pageY - (ds.origin[1] + ds.delta[1]);
                        ds.delta[0] += dx;
                        ds.delta[1] += dy;

                        switch (ds.mode) {
                            case LayoutConsts.MODE_PAGE_DRAG:
                                this.viewport.removeRtreeObjects(ds.target);
                                ds.target.position.x += dx;
                                ds.target.position.y += dy;
                                this.pageUi.updateWorldSpaceCoordinates(ds.target, this.layoutViewCamera);
                                this.viewport.insertRtreeObjects(ds.target);
                                break;
                            case LayoutConsts.MODE_CAMERA:
                                this.layoutViewCamera.translate(-dx, -dy, 0);
                                this.pageUi.updateCameraSpaceCoordinates(this.layoutViewCamera);
                                break;
                        }
                    }
                }, {
                    key: 'handleCardMove',
                    value: function handleCardMove($event) {
                        var originalEvent = $event.originalEvent;
                        var target = $event.target;
                        var viewportTarget = $(target.closest('.viewport'));

                        switch (this.cardObject.type) {
                            case LayoutConsts.MODE_OFFER_DRAG:
                                var pageVersion = this.cardObject.move(viewportTarget, originalEvent, this.layoutViewCamera);
                                this.pageUi.setPageIndex(pageVersion, this.layoutViewCamera);
                                break;
                        }
                    }
                }, {
                    key: 'handleDragStopEvent',
                    value: function handleDragStopEvent($event) {
                        var originalEvent = $event.originalEvent;
                        var target = $event.target;
                        var viewportTarget = $(target.closest('.viewport'));

                        var ds = this.dragState;
                        var card = this.cardObject;
                        if (ds) {
                            switch (ds.mode) {
                                case LayoutConsts.MODE_PAGE_DRAG:
                                    // UPDATE THE SERVER WITH THE NEW PAGE X,Y,Z position
                                    this.layoutView.updatePages(ds.target.prepareForExportPageUpdate(ds.target));
                                    break;
                                case LayoutConsts.MODE_CAMERA:
                                    // UPDATE LOCAL STORAGE (jStorage?)
                                    // WITH THE NEW CAMERA POSITION
                                    this.layoutViewCamera.save();
                                    break;
                            }
                        } else if (card) {
                            card.drop(viewportTarget, originalEvent, this.layoutViewCamera);
                        }

                        this.cardObject = null;
                        this.dragState = null;
                        this.clearEvent($event);

                        Util.removeFromSortedArray(this.inputEvents, 'mousemove', Consts.STRING_COMPARATOR_FUNCTION);
                        Util.removeFromSortedArray(this.inputEvents, 'mouseleave', Consts.STRING_COMPARATOR_FUNCTION);
                        Util.removeFromSortedArray(this.inputEvents, 'mouseup', Consts.STRING_COMPARATOR_FUNCTION);
                    }
                }, {
                    key: 'clearEvent',
                    value: function clearEvent(e) {
                        e.stopPropagation();
                        e.preventDefault();
                    }
                }, {
                    key: 'getCardObject',
                    value: function getCardObject() {
                        return this.cardObject;
                    }
                }]);

                return InputHandler;
            })();

            _export('default', InputHandler);
        }
    };
});
System.register('promo-manager/helpers/item-search', ['npm:babel-runtime@5.4.3/helpers/create-class', 'npm:babel-runtime@5.4.3/helpers/class-call-check', 'promo-manager/partials/itemsearch.html!github:systemjs/plugin-text@0.0.2', 'promo-manager/layout-view/layout-view-consts', 'promo-manager/layout-view/helpers/layout-version-formatter'], function (_export) {
    var _createClass, _classCallCheck, itemsearch, LayoutViewConsts, LayoutVersionFormatter, ItemSearch, ItemSearchController;

    return {
        setters: [function (_npmBabelRuntime543HelpersCreateClass) {
            _createClass = _npmBabelRuntime543HelpersCreateClass['default'];
        }, function (_npmBabelRuntime543HelpersClassCallCheck) {
            _classCallCheck = _npmBabelRuntime543HelpersClassCallCheck['default'];
        }, function (_promoManagerPartialsItemsearchHtmlGithubSystemjsPluginText002) {
            itemsearch = _promoManagerPartialsItemsearchHtmlGithubSystemjsPluginText002['default'];
        }, function (_promoManagerLayoutViewLayoutViewConsts) {
            LayoutViewConsts = _promoManagerLayoutViewLayoutViewConsts['default'];
        }, function (_promoManagerLayoutViewHelpersLayoutVersionFormatter) {
            LayoutVersionFormatter = _promoManagerLayoutViewHelpersLayoutVersionFormatter['default'];
        }],
        execute: function () {
            'use strict';

            ItemSearch = (function () {
                function ItemSearch() {
                    _classCallCheck(this, ItemSearch);
                }

                _createClass(ItemSearch, null, [{
                    key: 'open',
                    value: function open($scope, $modal, $translate, layoutView) {
                        var _this = this;

                        this.layoutView = layoutView;

                        var updateModel = function updateModel(result) {
                            console.log(result);
                        };

                        var _$modal$open = $modal.open({
                            template: itemsearch,
                            controllerAs: 'ctrl',
                            controller: ItemSearchController,
                            resolve: {
                                layoutView: function layoutView() {
                                    return _this.layoutView;
                                }
                            }
                        });

                        var result = _$modal$open.result;
                        var close = _$modal$open.close;
                        var dismiss = _$modal$open.dismiss;

                        result.then(function (data) {
                            updateModel(data);
                        }, function (data) {
                            console.log('dismiss: ', data);
                        });
                    }
                }]);

                return ItemSearch;
            })();

            _export('ItemSearch', ItemSearch);

            ItemSearchController = (function () {
                function ItemSearchController($scope, $modalInstance, $translate, layoutView) {
                    var _this2 = this;

                    _classCallCheck(this, ItemSearchController);

                    this.layoutView = layoutView;
                    this.$modalInstance = $modalInstance;
                    this.Notifier = this.layoutView.Notifier;
                    this.itemSelections = [];
                    this.itemTree = [];
                    this.itemSelectionTree = this.layoutView.merchandiseHierarchy;
                    this.hierarchyId = this.layoutView.merchandiseHierarchy.getRootId();
                    this.rootId = this.layoutView.merchandiseHierarchy.getRootId();
                    this.defaultLabels = [$translate.instant('OFFERS_LIST_SBU'), $translate.instant('OFFERS_LIST_DEPARTMENT'), $translate.instant('OFFERS_LIST_CATEGORY')];
                    this.itemTreeLabel = $translate.instant('ITEM_SEARCH_TREE_LABEL');
                    this.itemSearch = {};
                    this.search = {
                        itemSearch: {}
                    };
                    this.defaultLabels.forEach(function (label, idx) {
                        _this2.itemSearch[idx] = '';
                        _this2.search.itemSearch[idx] = function (value) {
                            if (angular.isDefined(value)) {
                                return _this2.itemQuery(idx, value);
                            }
                            return _this2.itemSearch[idx];
                        };
                    });
                    this.init();
                }

                _createClass(ItemSearchController, [{
                    key: 'itemQuery',
                    value: function itemQuery(idx, value) {
                        this.itemSearch[idx] = value;
                        this.loadItems();
                        return this.itemSearch[idx];
                    }
                }, {
                    key: 'loadItems',
                    value: function loadItems() {
                        var items = $.map(this.itemSearch, function (value, index) {
                            return [value];
                        });
                        var error = false;
                        for (var i = items.length - 1; i >= 0; i--) {
                            var currentItem = items[i];
                            if (i > 0 && currentItem) {
                                if (!items[i - 1]) {
                                    this.Notifier.error('ITEM_SEARCH_MISSING_SEARCH_PARM');
                                    error = true;
                                    return;
                                }
                            }
                        };
                        if (error) {
                            return;
                        }
                        this.searchItems(items);
                    }
                }, {
                    key: 'searchItems',
                    value: function searchItems(items) {
                        var _this3 = this;

                        this.itemTree[0].nodes.forEach(function (node) {
                            if (node.nodes) {
                                _this3['delete'](node);
                            }
                            if (items[0] && items[0] == node.id) {
                                _this3.open(node);
                                if (items[1]) {
                                    node.nodes.some(function (nd) {
                                        if (nd.id == items[1]) {
                                            _this3.open(nd);
                                            if (items[2]) {
                                                nd.nodes.forEach(function (n) {
                                                    if (n.id == items[2]) {
                                                        //this is the selected item level
                                                        // do something here to indicate we found it
                                                        n.searched = true;
                                                    } else {
                                                        n.searched = false;
                                                    }
                                                });
                                            }
                                            return true;
                                        }
                                        return false;
                                    });
                                }
                            }
                        });
                    }
                }, {
                    key: 'delete',
                    value: function _delete(data) {
                        data.nodes = [];
                    }
                }, {
                    key: 'add',
                    value: function add(name, nodes) {
                        this.itemTree.push({ name: name, nodes: nodes });
                    }
                }, {
                    key: 'init',
                    value: function init() {
                        var node = this.itemSelectionTree.getNode(this.hierarchyId);
                        if (node) {
                            var path = node.getPath();
                            // Root parent
                            var parentNode = this.itemSelectionTree.getRootNode();
                            var options = parentNode.getChildren();
                            this.add(this.itemTreeLabel, options);
                        }
                    }
                }, {
                    key: 'open',
                    value: function open(data) {
                        var node = this.itemSelectionTree.getNode(data.id);
                        if (node) {
                            var path = node.getPath();
                            // Defined parent
                            var parentNode = path.pop();
                            var options = parentNode.getChildren();
                            data.nodes = options;
                        }
                    }
                }, {
                    key: 'itemSelection',
                    value: function itemSelection(item) {
                        var selection = this.formatSelectedItem(item);
                        if (this.hasSelectedItem(selection)) {
                            this.Notifier.error('ITEM_SEARCH_SELECTED_ITEMS_DUPLICATE_ERROR');
                            return;
                        }
                        this.itemSelections.push(selection);
                    }
                }, {
                    key: 'formatSelectedItem',
                    value: function formatSelectedItem(item) {
                        var selection = {
                            ids: new Array(this.defaultLabels.length),
                            name: null
                        };
                        var node = this.itemSelectionTree.getNode(item.id);
                        var path = node.getPath();
                        path.forEach(function (el, idx) {
                            selection.ids[idx] = el.id;
                            selection.name = el.name;
                        });
                        return selection;
                    }
                }, {
                    key: 'hasSelectedItem',
                    value: function hasSelectedItem(selection) {
                        return this.itemSelections.some(function (selected) {
                            return JSON.stringify(selected.ids) == JSON.stringify(selection.ids);
                        });
                    }
                }, {
                    key: 'isSelectedItem',
                    value: function isSelectedItem(item) {
                        if (item && item.id) {
                            return this.hasSelectedItem(this.formatSelectedItem(item));
                        }
                    }
                }, {
                    key: 'openSelection',
                    value: function openSelection(item) {
                        this.searchItems(item.ids);
                    }
                }, {
                    key: 'deleteSelection',
                    value: function deleteSelection(item) {
                        this.itemSelections = this.itemSelections.filter(function (el) {
                            return JSON.stringify(el.ids) !== JSON.stringify(item.ids);
                        });
                    }
                }, {
                    key: 'close',
                    value: function close() {
                        this.$modalInstance.close();
                    }
                }, {
                    key: 'dismiss',
                    value: function dismiss() {
                        this.$modalInstance.dismiss();
                    }
                }]);

                return ItemSearchController;
            })();

            _export('ItemSearchController', ItemSearchController);
        }
    };
});
System.register('promo-manager/layout-view/helpers/add-pages-modal', ['npm:babel-runtime@5.4.3/helpers/create-class', 'npm:babel-runtime@5.4.3/helpers/class-call-check', 'npm:babel-runtime@5.4.3/core-js/get-iterator', 'promo-manager/layout-view/partials/page-add-modal.html!github:systemjs/plugin-text@0.0.2', 'promo-manager/layout-view/layout-view-consts', 'promo-manager/layout-view/layout-model'], function (_export) {
    var _createClass, _classCallCheck, _getIterator, pageadd, LayoutViewConsts, LayoutModel, AddPagesModal, AddPagesController;

    return {
        setters: [function (_npmBabelRuntime543HelpersCreateClass) {
            _createClass = _npmBabelRuntime543HelpersCreateClass['default'];
        }, function (_npmBabelRuntime543HelpersClassCallCheck) {
            _classCallCheck = _npmBabelRuntime543HelpersClassCallCheck['default'];
        }, function (_npmBabelRuntime543CoreJsGetIterator) {
            _getIterator = _npmBabelRuntime543CoreJsGetIterator['default'];
        }, function (_promoManagerLayoutViewPartialsPageAddModalHtmlGithubSystemjsPluginText002) {
            pageadd = _promoManagerLayoutViewPartialsPageAddModalHtmlGithubSystemjsPluginText002['default'];
        }, function (_promoManagerLayoutViewLayoutViewConsts) {
            LayoutViewConsts = _promoManagerLayoutViewLayoutViewConsts['default'];
        }, function (_promoManagerLayoutViewLayoutModel) {
            LayoutModel = _promoManagerLayoutViewLayoutModel['default'];
        }],
        execute: function () {
            'use strict';

            AddPagesModal = (function () {
                function AddPagesModal() {
                    _classCallCheck(this, AddPagesModal);
                }

                _createClass(AddPagesModal, null, [{
                    key: 'open',
                    value: function open($scope, $modal, $translate, layoutView) {
                        var _this = this;

                        this.layoutView = layoutView;

                        var updateModel = function updateModel(result) {
                            console.log(result);
                        };

                        var _$modal$open = $modal.open({
                            template: pageadd,
                            controllerAs: 'ctrl',
                            controller: AddPagesController,
                            resolve: {
                                layoutView: function layoutView() {
                                    return _this.layoutView;
                                }
                            }
                        });

                        var result = _$modal$open.result;
                        var close = _$modal$open.close;
                        var dismiss = _$modal$open.dismiss;

                        result.then(function (data) {
                            updateModel(data);
                        }, function (data) {
                            console.log('dismiss: ', data);
                        });
                    }
                }]);

                return AddPagesModal;
            })();

            _export('AddPagesModal', AddPagesModal);

            AddPagesController = (function () {
                function AddPagesController($scope, $modalInstance, $translate, layoutView) {
                    _classCallCheck(this, AddPagesController);

                    this.layoutView = layoutView;
                    this.$modalInstance = $modalInstance;
                    this.Notifier = this.layoutView.Notifier;
                    this.h = LayoutViewConsts.LAYOUT_VIEW_PAGE_GRID_VERSION_HEIGHT_DEFAULT;
                    this.w = LayoutViewConsts.LAYOUT_VIEW_PAGE_GRID_VERSION_WIDTH_DEFAULT;
                    this.count = 1;
                    this.previousCount = 1;
                    this.pageUi = this.layoutView.getPageUi();
                    this.lastPageNumber = this.pageUi.getLastPageNumber() + 1;
                    this.pagePrefix = $translate.instant('LAYOUT_VIEW_PAGE_GRID_VERSION_NAME_DEFAULT');
                    this.grid = [{
                        index: this.lastPageNumber,
                        pageVersionName: this.pagePrefix + ' ' + this.lastPageNumber
                    }];
                    this.pageExporter = this.layoutView.layoutModel;
                }

                _createClass(AddPagesController, [{
                    key: 'createGrid',
                    value: function createGrid() {
                        if (!this.count) {
                            return;
                        }
                        if (isNaN(parseFloat(this.count)) || !isFinite(this.count)) {
                            this.Notifier.error('LAYOUT_VIEW_PAGES_ERROR_INVALID_PAGE');
                            this.count = angular.copy(this.previousCount);
                            return;
                        }
                        if (this.previousCount != this.count) {
                            if (this.previousCount < this.count) {
                                for (var i = parseInt(this.previousCount); i < this.count; i++) {
                                    this.grid.push({ index: this.lastPageNumber + i, pageVersionName: this.pagePrefix + ' ' + (this.lastPageNumber + i) });
                                };
                            } else {
                                for (var i = this.previousCount - this.count; i > 0; i--) {
                                    this.grid.pop();
                                };
                            }
                        }
                        this.previousCount = angular.copy(this.count);
                    }
                }, {
                    key: 'hasPageVersionName',
                    value: function hasPageVersionName() {
                        return this.grid.every(function (pageVersion) {
                            return pageVersion.pageVersionName;
                        });
                    }
                }, {
                    key: 'invalidPageData',
                    value: function invalidPageData() {
                        var uniqueIds = this.pageUi.getPageVersionDetails();
                        var seenIndexMap = {};
                        var seenNameMap = {};
                        uniqueIds.forEach(function (id) {
                            seenIndexMap[id.index] = true;
                            seenNameMap[id.name] = true;
                        });
                        var _iteratorNormalCompletion = true;
                        var _didIteratorError = false;
                        var _iteratorError = undefined;

                        try {
                            for (var _iterator = _getIterator(this.grid), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                                var pageVersion = _step.value;

                                var pageVersionIndex = pageVersion.pageNumber;
                                var pageVersionName = pageVersion.pageVersionName;
                                if (seenIndexMap[pageVersionIndex] || pageVersionName && seenNameMap[pageVersionName]) {
                                    // Saw a duplicate - fail validation immediately
                                    return true;
                                }
                            }
                        } catch (err) {
                            _didIteratorError = true;
                            _iteratorError = err;
                        } finally {
                            try {
                                if (!_iteratorNormalCompletion && _iterator['return']) {
                                    _iterator['return']();
                                }
                            } finally {
                                if (_didIteratorError) {
                                    throw _iteratorError;
                                }
                            }
                        }

                        // None failed validation, so all of them have been seen exactly once
                        return false;
                    }
                }, {
                    key: 'createPages',
                    value: function createPages() {
                        var _this2 = this;

                        // get viewport top left x, y
                        var viewport = this.layoutView.getViewport();
                        var adderX = LayoutViewConsts.ADD_PAGE_X_OFFSET;
                        var adderY = LayoutViewConsts.ADD_PAGE_Y_OFFSET;
                        var id = this.layoutView.getLayoutModel().id;
                        var pageGrip = LayoutViewConsts.ADD_PAGE_Y_PAGE_GRIP_OFFSET;
                        var layoutPage = [];
                        var z = this.pageUi.getLastZindexNumber() + 1;
                        this.grid.forEach(function (page, index, array) {
                            var xPos = viewport[0] + adderX * index;
                            var yPos = viewport[1] + adderY * index + pageGrip;
                            var zPos = z++;
                            layoutPage.push(_this2.pageExporter.prepareForExportPageAdd(page, xPos, yPos, zPos, _this2.h, _this2.w, LayoutViewConsts.LAYOUT_VIEW_UNIT_DEFAULT));
                        });
                        this.layoutView.addPages(id, layoutPage);
                    }
                }, {
                    key: 'apply',
                    value: function apply() {
                        if (isNaN(parseFloat(this.count)) || !isFinite(this.count) || this.count < 1) {
                            this.Notifier.error('LAYOUT_VIEW_PAGES_ERROR_INVALID_PAGE');
                            return;
                        }
                        if (isNaN(parseFloat(this.h)) || !isFinite(this.h) || this.h < 1) {
                            this.Notifier.error('LAYOUT_VIEW_PAGES_ERROR_HEIGHT_MISSING');
                            return;
                        }
                        if (isNaN(parseFloat(this.w)) || !isFinite(this.w) || this.w < 1) {
                            this.Notifier.error('LAYOUT_VIEW_PAGES_ERROR_WIDTH_MISSING');
                            return;
                        }
                        // ensure grid version name is populated
                        if (!this.hasPageVersionName()) {
                            this.Notifier.error('LAYOUT_VIEW_PAGES_ERROR_MISSING_GRID');
                            return;
                        }
                        if (this.invalidPageData()) {
                            this.Notifier.error('LAYOUT_VIEW_PAGES_ERROR_DUPLICATE_GRID');
                            return;
                        }
                        this.createPages();
                        this.$modalInstance.close();
                    }
                }, {
                    key: 'dismiss',
                    value: function dismiss() {
                        this.$modalInstance.dismiss();
                    }
                }]);

                return AddPagesController;
            })();

            _export('AddPagesController', AddPagesController);
        }
    };
});
System.register('promo-manager/layout-view/helpers/index-pages-modal', ['npm:babel-runtime@5.4.3/helpers/create-class', 'npm:babel-runtime@5.4.3/helpers/class-call-check', 'npm:babel-runtime@5.4.3/core-js/get-iterator', 'promo-manager/layout-view/partials/page-index-modal.html!github:systemjs/plugin-text@0.0.2', 'promo-manager/layout-view/layout-view-consts'], function (_export) {
    var _createClass, _classCallCheck, _getIterator, pageindex, LayoutViewConsts, IndexPagesModal, IndexPagesController;

    return {
        setters: [function (_npmBabelRuntime543HelpersCreateClass) {
            _createClass = _npmBabelRuntime543HelpersCreateClass['default'];
        }, function (_npmBabelRuntime543HelpersClassCallCheck) {
            _classCallCheck = _npmBabelRuntime543HelpersClassCallCheck['default'];
        }, function (_npmBabelRuntime543CoreJsGetIterator) {
            _getIterator = _npmBabelRuntime543CoreJsGetIterator['default'];
        }, function (_promoManagerLayoutViewPartialsPageIndexModalHtmlGithubSystemjsPluginText002) {
            pageindex = _promoManagerLayoutViewPartialsPageIndexModalHtmlGithubSystemjsPluginText002['default'];
        }, function (_promoManagerLayoutViewLayoutViewConsts) {
            LayoutViewConsts = _promoManagerLayoutViewLayoutViewConsts['default'];
        }],
        execute: function () {
            'use strict';

            IndexPagesModal = (function () {
                function IndexPagesModal() {
                    _classCallCheck(this, IndexPagesModal);
                }

                _createClass(IndexPagesModal, null, [{
                    key: 'open',
                    value: function open($scope, $modal, $translate, layoutView) {
                        var _this = this;

                        this.layoutView = layoutView;

                        var updateModel = function updateModel(result) {
                            console.log(result);
                        };

                        var _$modal$open = $modal.open({
                            template: pageindex,
                            controllerAs: 'ctrl',
                            controller: IndexPagesController,
                            resolve: {
                                layoutView: function layoutView() {
                                    return _this.layoutView;
                                }
                            }
                        });

                        var result = _$modal$open.result;
                        var close = _$modal$open.close;
                        var dismiss = _$modal$open.dismiss;

                        result.then(function (data) {
                            updateModel(data);
                        }, function (data) {
                            console.log('dismiss: ', data);
                        });
                    }
                }]);

                return IndexPagesModal;
            })();

            _export('IndexPagesModal', IndexPagesModal);

            IndexPagesController = (function () {
                function IndexPagesController($scope, $modalInstance, $translate, layoutView) {
                    _classCallCheck(this, IndexPagesController);

                    this.layoutView = layoutView;
                    this.$modalInstance = $modalInstance;
                    this.Notifier = this.layoutView.Notifier;
                    this.pageUi = this.layoutView.getPageUi();
                    this.grid = this.pageUi.getPageVersionDetails();
                    this.pageExporter = this.layoutView.layoutModel;
                }

                _createClass(IndexPagesController, [{
                    key: 'hasPageVersionName',
                    value: function hasPageVersionName() {
                        return this.grid.every(function (pageVersion) {
                            return pageVersion.name;
                        });
                    }
                }, {
                    key: 'invalidePageData',
                    value: function invalidePageData() {
                        //it should find itself, but only once
                        var seenIndexMap = {};
                        var seenNameMap = {};
                        var _iteratorNormalCompletion = true;
                        var _didIteratorError = false;
                        var _iteratorError = undefined;

                        try {
                            for (var _iterator = _getIterator(this.grid), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                                var pageVersion = _step.value;

                                var pageVersionIndex = pageVersion.index;
                                var pageVersionName = pageVersion.name;
                                // ignore if name is null
                                if (seenIndexMap[pageVersionIndex] || pageVersionName && seenNameMap[pageVersionName]) {
                                    // Saw a duplicate - fail validation immediately
                                    return true;
                                }
                                // Keep track of what we've seen before
                                seenIndexMap[pageVersionIndex] = true;
                                seenNameMap[pageVersionName] = true;
                            }
                        } catch (err) {
                            _didIteratorError = true;
                            _iteratorError = err;
                        } finally {
                            try {
                                if (!_iteratorNormalCompletion && _iterator['return']) {
                                    _iterator['return']();
                                }
                            } finally {
                                if (_didIteratorError) {
                                    throw _iteratorError;
                                }
                            }
                        }

                        // None failed validation, so all of them have been seen exactly once
                        return false;
                    }
                }, {
                    key: 'orderPages',
                    value: function orderPages() {
                        this.layoutView.updatePages(this.pageExporter.prepareForExportPagesUpdate(this.grid));
                    }
                }, {
                    key: 'apply',
                    value: function apply() {
                        // ensure grid version name is populated
                        if (!this.hasPageVersionName()) {
                            this.Notifier.error('LAYOUT_VIEW_PAGES_ERROR_MISSING_GRID');
                            return;
                        }
                        if (this.invalidePageData()) {
                            this.Notifier.error('LAYOUT_VIEW_PAGES_ERROR_DUPLICATE_PAGE');
                            return;
                        }
                        this.orderPages();
                        this.$modalInstance.close();
                    }
                }, {
                    key: 'dismiss',
                    value: function dismiss() {
                        this.$modalInstance.dismiss();
                    }
                }]);

                return IndexPagesController;
            })();

            _export('IndexPagesController', IndexPagesController);
        }
    };
});
System.register('promo-manager/layout-view/helpers/edit-page-modal', ['npm:babel-runtime@5.4.3/helpers/create-class', 'npm:babel-runtime@5.4.3/helpers/class-call-check', 'promo-manager/layout-view/partials/page-edit-modal.html!github:systemjs/plugin-text@0.0.2', 'promo-manager/layout-view/partials/page-delete-modal.html!github:systemjs/plugin-text@0.0.2', 'promo-manager/layout-view/partials/page-template-clear-modal.html!github:systemjs/plugin-text@0.0.2', 'promo-manager/layout-view/partials/page-template-apply-modal.html!github:systemjs/plugin-text@0.0.2', 'promo-manager/layout-view/partials/page-move-offers-to-parking-lot-modal.html!github:systemjs/plugin-text@0.0.2', 'promo-manager/layout-view/layout-view-consts'], function (_export) {
    var _createClass, _classCallCheck, pageedit, pagedelete, pagecleartemplate, pageapplytemplate, pagemoveofferstoparkinglot, LayoutViewConsts, EditPageModal, EditPageController;

    return {
        setters: [function (_npmBabelRuntime543HelpersCreateClass) {
            _createClass = _npmBabelRuntime543HelpersCreateClass['default'];
        }, function (_npmBabelRuntime543HelpersClassCallCheck) {
            _classCallCheck = _npmBabelRuntime543HelpersClassCallCheck['default'];
        }, function (_promoManagerLayoutViewPartialsPageEditModalHtmlGithubSystemjsPluginText002) {
            pageedit = _promoManagerLayoutViewPartialsPageEditModalHtmlGithubSystemjsPluginText002['default'];
        }, function (_promoManagerLayoutViewPartialsPageDeleteModalHtmlGithubSystemjsPluginText002) {
            pagedelete = _promoManagerLayoutViewPartialsPageDeleteModalHtmlGithubSystemjsPluginText002['default'];
        }, function (_promoManagerLayoutViewPartialsPageTemplateClearModalHtmlGithubSystemjsPluginText002) {
            pagecleartemplate = _promoManagerLayoutViewPartialsPageTemplateClearModalHtmlGithubSystemjsPluginText002['default'];
        }, function (_promoManagerLayoutViewPartialsPageTemplateApplyModalHtmlGithubSystemjsPluginText002) {
            pageapplytemplate = _promoManagerLayoutViewPartialsPageTemplateApplyModalHtmlGithubSystemjsPluginText002['default'];
        }, function (_promoManagerLayoutViewPartialsPageMoveOffersToParkingLotModalHtmlGithubSystemjsPluginText002) {
            pagemoveofferstoparkinglot = _promoManagerLayoutViewPartialsPageMoveOffersToParkingLotModalHtmlGithubSystemjsPluginText002['default'];
        }, function (_promoManagerLayoutViewLayoutViewConsts) {
            LayoutViewConsts = _promoManagerLayoutViewLayoutViewConsts['default'];
        }],
        execute: function () {
            'use strict';

            EditPageModal = (function () {
                function EditPageModal() {
                    _classCallCheck(this, EditPageModal);
                }

                _createClass(EditPageModal, null, [{
                    key: 'open',
                    value: function open($scope, $modal, $translate, layoutView, pageVersion, mode) {
                        var _this = this;

                        this.layoutView = layoutView;
                        this.pageVersion = pageVersion;
                        this.mode = mode;
                        this.$translate = $translate;
                        this.Notifier = this.layoutView.Notifier;

                        var updateModel = function updateModel(result) {
                            console.log(result);
                        };

                        var template = null;
                        switch (this.mode) {
                            case LayoutViewConsts.EDIT_MODE:
                                template = pageedit;
                                break;
                            case LayoutViewConsts.DELETE_MODE:
                                if (this.pageVersion.isInSpreadGroup()) {
                                    this.Notifier.error('LAYOUT_VIEW_DELETE_PAGE_SPREAD_GROUP_ERROR');
                                    return;
                                }
                                template = pagedelete;
                                break;
                            case LayoutViewConsts.TEMPLATE_CLEAR_MODE:
                                template = pagecleartemplate;
                                break;
                            case LayoutViewConsts.TEMPLATE_APPLY_MODE:
                                template = pageapplytemplate;
                                break;
                            case LayoutViewConsts.MOVE_OFFERS_MODE:
                                template = pagemoveofferstoparkinglot;
                                break;
                        }

                        var _$modal$open = $modal.open({
                            template: template,
                            controllerAs: 'ctrl',
                            controller: EditPageController,
                            resolve: {
                                layoutView: function layoutView() {
                                    return _this.layoutView;
                                },
                                pageVersion: function pageVersion() {
                                    return _this.pageVersion;
                                },
                                mode: function mode() {
                                    return _this.mode;
                                },
                                data: function data() {
                                    if (_this.mode == LayoutViewConsts.EDIT_MODE) {
                                        return _this.layoutView.loadPageVersion(_this.pageVersion.getPageVersionId());
                                    } else {
                                        return null;
                                    }
                                }
                            }
                        });

                        var result = _$modal$open.result;
                        var close = _$modal$open.close;
                        var dismiss = _$modal$open.dismiss;

                        result.then(function (data) {
                            updateModel(data);
                        }, function (data) {
                            console.log('dismiss: ', data);
                        });
                    }
                }]);

                return EditPageModal;
            })();

            _export('EditPageModal', EditPageModal);

            EditPageController = (function () {
                function EditPageController($scope, $modalInstance, $translate, layoutView, pageVersion, mode, data) {
                    var _this2 = this;

                    _classCallCheck(this, EditPageController);

                    this.layoutView = layoutView;
                    this.$modalInstance = $modalInstance;
                    this.$translate = $translate;
                    this.Notifier = this.layoutView.Notifier;
                    this.pageVersion = pageVersion;
                    this.mode = mode;
                    this.title = null;
                    this.h = this.pageVersion.dimension.h || 11;
                    this.w = this.pageVersion.dimension.w || 8.5;
                    this.name = this.pageVersion.name || null;
                    this.disabled = true;
                    this.dateFormat = LayoutViewConsts.LAYOUT_VIEW_DATE_FORMAT;
                    switch (this.mode) {
                        case LayoutViewConsts.EDIT_MODE:
                            this.title = this.$translate.instant('LAYOUT_VIEW_PAGES_EDIT_PAGE_TITLE');
                            this.pageGridVersion = data.data.pageGridVersion;
                            this.h = this.pageGridVersion.pageHeight || 11;
                            this.w = this.pageGridVersion.pageWidth || 8.5;
                            this.name = this.pageGridVersion.name || null;
                            this.isCoop = this.pageGridVersion.isCoop || 0;
                            this.theme = this.pageGridVersion.theme || null;
                            this.notes = this.pageGridVersion.notes || null;
                            this.hierarchyId = this.pageGridVersion.merchandiseHierarchyList ? this.pageGridVersion.merchandiseHierarchyList.id : this.layoutView.merchandiseHierarchy.getRootId();
                            this.merchandiseHierarchyTreeMap = this.layoutView.merchandiseHierarchy;
                            this.merchandiseHierarchySelectionLabels = [$translate.instant('OFFERS_LIST_ALL_SBUS'), $translate.instant('OFFERS_LIST_ALL_DEPARTMENTS'), $translate.instant('OFFERS_LIST_ALL_CATEGORIES')];
                            break;
                        case LayoutViewConsts.DELETE_MODE:
                            this.title = this.$translate.instant('LAYOUT_VIEW_PAGES_DELETE_PAGE_TITLE');
                            break;
                        case LayoutViewConsts.MOVE_OFFERS_MODE:
                            this.title = this.$translate.instant('LAYOUT_VIEW_PAGES_MOVE_OFFERS_TO_PARKING_LOT_TITLE');
                            break;
                        case LayoutViewConsts.TEMPLATE_CLEAR_MODE:
                            this.title = this.$translate.instant('LAYOUT_VIEW_PAGES_DELETE_TEMPLATE_TITLE');
                            break;
                        case LayoutViewConsts.TEMPLATE_APPLY_MODE:
                            this.title = this.$translate.instant('LAYOUT_VIEW_PAGES_APPLY_TEMPLATE_TITLE');
                            this.numPerPage = LayoutViewConsts.LAYOUT_PAGE_VERSION_TEMPLATE_RECORDS_REQUEST;
                            this.startingIndex = 0;
                            this.totalRecords = 0;
                            this.offset = 0;
                            this.limit = 0;
                            this.firstRead = true;
                            this.currentPage = null;
                            this.channels = this.layoutView.getChannel();
                            this.selectedTemplate = null;
                            this.templates = null;
                            this.templateSearch = null;
                            this.templatePreviousSearch = null;
                            this.search = {
                                disabled: false,
                                templateSearch: function templateSearch(value) {
                                    if (angular.isDefined(value)) {
                                        _this2.templateSearch = value;
                                        _this2.loadTemplates();
                                        return _this2.templateSearch;
                                    }
                                    return _this2.templateSearch;
                                }
                            };
                            break;
                    }

                    this.moveOffers = false;
                    this.hasPageVersionOffers = this.pageVersion.hasOffers();
                    this.index = this.pageVersion.getPageNumber();
                    this.pageId = this.pageVersion.getPageId();
                    this.pageVersionId = this.pageVersion.getPageVersionId();
                    this.pageUi = this.layoutView.getPageUi();
                    this.channel = this.layoutView.getChannel().id;
                }

                _createClass(EditPageController, [{
                    key: 'hasGridVersionName',
                    value: function hasGridVersionName() {
                        if (this.name) {
                            return true;
                        }
                        return false;
                    }
                }, {
                    key: 'hasPageNumber',
                    value: function hasPageNumber() {
                        return this.index;
                    }
                }, {
                    key: 'hasDuplicateIdentifiers',
                    value: function hasDuplicateIdentifiers() {
                        var _this3 = this;

                        var uniqueIds = this.pageUi.getPageVersionDetails();
                        return uniqueIds.some(function (id) {
                            //if name is null, ignore dup test
                            if (_this3.name && id.name.toLowerCase() == _this3.name.toLowerCase() && id.index != _this3.index) {
                                return true;
                            }
                            return false;
                        });
                    }
                }, {
                    key: 'loadTemplates',
                    value: function loadTemplates() {
                        if (this.currentPage == 1 && this.templateSearch == this.templatePreviousSearch) {
                            return;
                        }
                        this.templatePreviousSearch = this.templateSearch;
                        this.startingIndex = 0;
                        this.firstRead = true;
                        this.getTemplates();
                    }
                }, {
                    key: 'getTemplates',
                    value: function getTemplates() {
                        var _this4 = this;

                        this.search.disabled = true;
                        this.layoutView.getTemplates(this.templateSearch, this.channel, this.startingIndex, this.numPerPage).then(function (data) {
                            _this4.pageLayoutTemplates = data.data.pageLayoutTemplates;
                            _this4.totalRecords = data.data.pageLayoutTemplateCount;
                            _this4.startingIndex += _this4.numPerPage;
                            _this4.search.disabled = false;
                            if (_this4.firstRead) {
                                _this4.initPage(_this4.numPerPage);
                                _this4.firstRead = false;
                            } else {
                                _this4.readNextPage();
                            }
                        });
                    }
                }, {
                    key: 'initPage',
                    value: function initPage(numPerPage) {
                        this.noOfPages = Math.ceil(this.totalRecords / numPerPage);
                        this.currentPage = 1;
                        this.setPage(numPerPage);
                    }
                }, {
                    key: 'getNextPage',
                    value: function getNextPage(numPerPage) {
                        if (this.currentPage < this.noOfPages) {
                            if (this.startingIndex <= this.totalRecords) {
                                // starting index = # records on client
                                this.getTemplates();
                            } else {
                                this.readNextPage(numPerPage);
                            }
                        }
                    }
                }, {
                    key: 'readNextPage',
                    value: function readNextPage(numPerPage) {
                        this.templates = this.getPage(this.currentPage * numPerPage, numPerPage);
                        this.currentPage++;
                    }
                }, {
                    key: 'getPreviousPage',
                    value: function getPreviousPage(numPerPage) {
                        if (this.currentPage - 2 >= 0) {
                            this.templates = this.getPage((this.currentPage - 2) * numPerPage, numPerPage);
                            this.currentPage--;
                        }
                    }
                }, {
                    key: 'setPage',
                    value: function setPage(numPerPage) {
                        this.templates = this.getPage((this.currentPage - 1) * numPerPage, numPerPage);
                    }
                }, {
                    key: 'getPage',
                    value: function getPage(offset, numToRead) {
                        this.offset = offset + 1;
                        numToRead = parseInt(numToRead);
                        var rec = offset + numToRead;
                        this.limit = rec < this.totalRecords ? rec : this.totalRecords;
                        return this.pageLayoutTemplates.slice(offset, offset + numToRead);
                    }
                }, {
                    key: 'handleRadioClick',
                    value: function handleRadioClick(template) {
                        this.selectedTemplate = template.id;
                        this.disabled = false;
                    }
                }, {
                    key: 'updatePageVersion',
                    value: function updatePageVersion() {
                        switch (this.mode) {
                            case LayoutViewConsts.EDIT_MODE:
                                var originalPageGridVersion = angular.copy(this.pageGridVersion);
                                if (!this.pageGridVersion.merchandiseHierarchyList) {
                                    this.pageGridVersion.merchandiseHierarchyList = {};
                                }

                                this.pageGridVersion.pageHeight = this.h;
                                this.pageGridVersion.pageWidth = this.w;
                                this.pageGridVersion.name = this.name;
                                if (this.isCoop && (this.isCoop != false || this.isCoop != 'false')) {
                                    this.isCoop = true;
                                } else {
                                    this.isCoop = false;
                                }
                                this.pageGridVersion.isCoop = this.isCoop;
                                this.pageGridVersion.theme = this.theme;
                                this.pageGridVersion.notes = this.notes;
                                this.pageGridVersion.merchandiseHierarchyList.id = this.hierarchyId;
                                this.layoutView.updatePageVersions(this.pageVersion.prepareForExportPageVersionUpdate(this.pageGridVersion, originalPageGridVersion));
                                break;
                            case LayoutViewConsts.DELETE_MODE:
                                this.layoutView.deletePages(this.pageVersion.prepareForExportPageVersionDelete(this.pageId, this.moveOffers));
                                break;
                            case LayoutViewConsts.MOVE_OFFERS_MODE:
                                this.layoutView.moveOffersToParkingLotGrid(this.pageVersionId);
                                break;
                            case LayoutViewConsts.TEMPLATE_APPLY_MODE:
                                console.log(this.selectedTemplate);
                                this.layoutView.applyTemplate(this.pageVersion.prepareForExportPageVersionApplyTemplate(this.selectedTemplate, this.pageVersionId));
                                break;
                            case LayoutViewConsts.TEMPLATE_CLEAR_MODE:
                                this.layoutView.clearTemplate(this.pageVersion.prepareForExportPageVersionClearTemplate(this.pageVersionId, this.moveOffers));
                                break;
                        }
                    }
                }, {
                    key: 'apply',
                    value: function apply() {
                        if (isNaN(parseFloat(this.h)) || !isFinite(this.h) || this.h < 1) {
                            this.Notifier.error('LAYOUT_VIEW_PAGES_ERROR_HEIGHT_MISSING');
                            return;
                        }
                        if (isNaN(parseFloat(this.w)) || !isFinite(this.w) || this.w < 1) {
                            this.Notifier.error('LAYOUT_VIEW_PAGES_ERROR_WIDTH_MISSING');
                            return;
                        }
                        // ensure grid version name is populated
                        if (!this.hasGridVersionName()) {
                            this.Notifier.error('LAYOUT_VIEW_PAGES_ERROR_MISSING_GRID');
                            return;
                        }
                        if (this.hasDuplicateIdentifiers()) {
                            this.Notifier.error('LAYOUT_VIEW_PAGES_ERROR_DUPLICATE_GRID');
                            return;
                        }
                        this.updatePageVersion();
                        this.$modalInstance.close();
                    }
                }, {
                    key: 'dismiss',
                    value: function dismiss() {
                        this.$modalInstance.dismiss();
                    }
                }]);

                return EditPageController;
            })();

            _export('EditPageController', EditPageController);
        }
    };
});
System.register('promo-manager/layout-view/helpers/edit-block-modal', ['npm:babel-runtime@5.4.3/helpers/create-class', 'npm:babel-runtime@5.4.3/helpers/class-call-check', 'promo-manager/layout-view/partials/block-move-offers-to-basket-modal.html!github:systemjs/plugin-text@0.0.2', 'promo-manager/layout-view/partials/block-edit-modal.html!github:systemjs/plugin-text@0.0.2', 'promo-manager/layout-view/layout-view-consts'], function (_export) {
    var _createClass, _classCallCheck, blockmoveofferstobasketmodal, blockeditmodal, LayoutViewConsts, EditBlockModal, EditBlockController;

    return {
        setters: [function (_npmBabelRuntime543HelpersCreateClass) {
            _createClass = _npmBabelRuntime543HelpersCreateClass['default'];
        }, function (_npmBabelRuntime543HelpersClassCallCheck) {
            _classCallCheck = _npmBabelRuntime543HelpersClassCallCheck['default'];
        }, function (_promoManagerLayoutViewPartialsBlockMoveOffersToBasketModalHtmlGithubSystemjsPluginText002) {
            blockmoveofferstobasketmodal = _promoManagerLayoutViewPartialsBlockMoveOffersToBasketModalHtmlGithubSystemjsPluginText002['default'];
        }, function (_promoManagerLayoutViewPartialsBlockEditModalHtmlGithubSystemjsPluginText002) {
            blockeditmodal = _promoManagerLayoutViewPartialsBlockEditModalHtmlGithubSystemjsPluginText002['default'];
        }, function (_promoManagerLayoutViewLayoutViewConsts) {
            LayoutViewConsts = _promoManagerLayoutViewLayoutViewConsts['default'];
        }],
        execute: function () {
            'use strict';

            EditBlockModal = (function () {
                function EditBlockModal() {
                    _classCallCheck(this, EditBlockModal);
                }

                _createClass(EditBlockModal, null, [{
                    key: 'open',
                    value: function open($scope, $modal, $translate, layoutView, block, pageVersion, mode) {
                        var _this = this;

                        this.layoutView = layoutView;
                        this.block = block;
                        this.pageVersion = pageVersion;
                        this.mode = mode;
                        this.$translate = $translate;
                        this.Notifier = this.layoutView.Notifier;

                        var updateModel = function updateModel(result) {
                            console.log(result);
                        };

                        var template = null;
                        switch (this.mode) {
                            case LayoutViewConsts.EDIT_MODE:
                                template = blockeditmodal;
                                break;
                            case LayoutViewConsts.ADD_TO_BASKET_MODE:
                                template = blockmoveofferstobasketmodal;
                                break;
                        }

                        var _$modal$open = $modal.open({
                            template: template,
                            controllerAs: 'ctrl',
                            controller: EditBlockController,
                            resolve: {
                                layoutView: function layoutView() {
                                    return _this.layoutView;
                                },
                                block: function block() {
                                    return _this.block;
                                },
                                pageVersion: function pageVersion() {
                                    return _this.pageVersion;
                                },
                                mode: function mode() {
                                    return _this.mode;
                                },
                                data: function data() {
                                    if (_this.mode == LayoutViewConsts.EDIT_MODE) {
                                        return _this.layoutView.loadBlock(_this.block.id);
                                    } else {
                                        return null;
                                    }
                                }
                            }
                        });

                        var result = _$modal$open.result;
                        var close = _$modal$open.close;
                        var dismiss = _$modal$open.dismiss;

                        result.then(function (data) {
                            updateModel(data);
                        }, function (data) {
                            console.log('dismiss: ', data);
                        });
                    }
                }]);

                return EditBlockModal;
            })();

            _export('EditBlockModal', EditBlockModal);

            EditBlockController = (function () {
                function EditBlockController($scope, $modalInstance, $translate, layoutView, block, pageVersion, mode, data) {
                    _classCallCheck(this, EditBlockController);

                    this.layoutView = layoutView;
                    this.$modalInstance = $modalInstance;
                    this.$translate = $translate;
                    this.Notifier = this.layoutView.Notifier;
                    this.blockVersion = block;
                    this.pageVersion = pageVersion;
                    this.mode = mode;
                    this.title = null;
                    this.name = this.blockVersion.name || null;
                    this.disabled = true;
                    this.dateFormat = LayoutViewConsts.LAYOUT_VIEW_DATE_FORMAT;
                    switch (this.mode) {
                        case LayoutViewConsts.EDIT_MODE:
                            this.title = this.$translate.instant('LAYOUT_VIEW_BLOCK_EDIT_TITLE');
                            this.block = data.data.block;
                            this.userDefinedName = this.block.userDefinedName || null;
                            this.isCoop = this.block.isCoop || 0;
                            this.theme = this.block.theme || null;
                            this.color = this.block.color || null;
                            this.hierarchyId = this.block.merchandiseHierarchy ? this.block.merchandiseHierarchy.id : this.layoutView.merchandiseHierarchy.getRootId();
                            this.merchandiseHierarchy = this.layoutView.merchandiseHierarchy;
                            this.merchandiseHierarchySelectionLabels = [$translate.instant('OFFERS_LIST_ALL_SBUS'), $translate.instant('OFFERS_LIST_ALL_DEPARTMENTS'), $translate.instant('OFFERS_LIST_ALL_CATEGORIES')];
                            break;
                        case LayoutViewConsts.ADD_TO_BASKET_MODE:
                            this.title = this.$translate.instant('LAYOUT_VIEW_ADD_TO_BASKET');
                            break;
                    }
                }

                _createClass(EditBlockController, [{
                    key: 'updateBlock',
                    value: function updateBlock() {
                        switch (this.mode) {
                            case LayoutViewConsts.EDIT_MODE:
                                if (!this.block.merchandiseHierarchy) {
                                    this.block.merchandiseHierarchy = {
                                        id: 1
                                    };
                                }
                                var originalBlock = angular.copy(this.block);

                                if (this.isCoop && (this.isCoop != false || this.isCoop != 'false')) {
                                    this.isCoop = true;
                                }
                                this.block.isCoop = this.isCoop;
                                this.block.theme = this.theme;
                                this.block.color = this.color;
                                this.block.userDefinedName = this.userDefinedName;
                                this.block.merchandiseHierarchy.id = this.hierarchyId;
                                this.layoutView.updateBlock(this.blockVersion.prepareForExportBlockList(this.block, originalBlock), this.pageVersion.id);
                                break;
                            case LayoutViewConsts.ADD_TO_BASKET_MODE:
                                //                this.layoutView.moveOffersToParkingLotGrid(this.blockId);
                                break;
                        }
                    }
                }, {
                    key: 'apply',
                    value: function apply() {
                        this.updateBlock();
                        this.$modalInstance.close();
                    }
                }, {
                    key: 'dismiss',
                    value: function dismiss() {
                        this.$modalInstance.dismiss();
                    }
                }]);

                return EditBlockController;
            })();

            _export('EditBlockController', EditBlockController);
        }
    };
});
System.register('promo-manager/helpers/merchandise-hierarchy-native-selection-directive', ['promo-manager/helpers/merchandise-hierarchy-selection', 'promo-manager/partials/multidropdownnativeselection.html!github:systemjs/plugin-text@0.0.2'], function (_export) {
	'use strict';

	var MerchandiseHierarchySelection, multidropdown;

	//requires html.js plug-in in root
	function merchandiseHierarchyNativeSelection() {
		return {
			restrict: 'A',
			scope: {
				'treeMap': '=',
				'ngModel': '=',
				'defaultLabels': '=',
				'disableSelection': '='
			},
			template: multidropdown,
			controllerAs: 'ctrl',
			bindToController: true,
			controller: MerchandiseHierarchySelection

		};
	}
	return {
		setters: [function (_promoManagerHelpersMerchandiseHierarchySelection) {
			MerchandiseHierarchySelection = _promoManagerHelpersMerchandiseHierarchySelection['default'];
		}, function (_promoManagerPartialsMultidropdownnativeselectionHtmlGithubSystemjsPluginText002) {
			multidropdown = _promoManagerPartialsMultidropdownnativeselectionHtmlGithubSystemjsPluginText002['default'];
		}],
		execute: function () {
			_export('default', merchandiseHierarchyNativeSelection);
		}
	};
});
System.register('promo-manager/layout-view/layout-view-directive', ['promo-manager/layout-view/partials/layout-view.html!github:systemjs/plugin-text@0.0.2'], function (_export) {
    'use strict';

    var layoutViewTemplate;

    _export('default', layoutView);

    function layoutView() {
        return {
            restrict: 'A',
            scope: {
                'context': '='
            },
            controller: 'layoutViewController',
            controllerAs: 'ctrl',
            template: layoutViewTemplate,
            bindToController: true,
            link: function link(scope, elem) {
                //workaround until I figure out why page not displaying
                $('#tabLayoutView').on('click', function (e) {
                    scope.$root.$digest();
                });
            }

        };
    }

    return {
        setters: [function (_promoManagerLayoutViewPartialsLayoutViewHtmlGithubSystemjsPluginText002) {
            layoutViewTemplate = _promoManagerLayoutViewPartialsLayoutViewHtmlGithubSystemjsPluginText002['default'];
        }],
        execute: function () {}
    };
});
System.register('helpers/storage', ['npm:babel-runtime@5.4.3/helpers/create-class', 'npm:babel-runtime@5.4.3/helpers/class-call-check', 'github:andris9/simpleStorage@0.1.3'], function (_export) {
  var _createClass, _classCallCheck, simpleStorage, Storage;

  return {
    setters: [function (_npmBabelRuntime543HelpersCreateClass) {
      _createClass = _npmBabelRuntime543HelpersCreateClass['default'];
    }, function (_npmBabelRuntime543HelpersClassCallCheck) {
      _classCallCheck = _npmBabelRuntime543HelpersClassCallCheck['default'];
    }, function (_githubAndris9SimpleStorage013) {
      simpleStorage = _githubAndris9SimpleStorage013['default'];
    }],
    execute: function () {
      'use strict';

      Storage = (function () {
        function Storage() {
          _classCallCheck(this, Storage);
        }

        _createClass(Storage, null, [{
          key: 'getRecord',
          value: function getRecord(name) {
            var model = simpleStorage.get(name);
            if (model) {
              return model;
            }
          }
        }, {
          key: 'deleteRecord',
          value: function deleteRecord(name) {
            simpleStorage.deleteKey(name);
          }
        }, {
          key: 'setRecord',
          value: function setRecord(name, model) {
            simpleStorage.set(name, model);
          }
        }]);

        return Storage;
      })();

      _export('default', Storage);
    }
  };
});
System.register('helpers/tree-map-node', ['npm:babel-runtime@5.4.3/helpers/create-class', 'npm:babel-runtime@5.4.3/helpers/class-call-check', 'npm:moment@2.10.3'], function (_export) {
	var _createClass, _classCallCheck, moment, TreeMapNode;

	return {
		setters: [function (_npmBabelRuntime543HelpersCreateClass) {
			_createClass = _npmBabelRuntime543HelpersCreateClass['default'];
		}, function (_npmBabelRuntime543HelpersClassCallCheck) {
			_classCallCheck = _npmBabelRuntime543HelpersClassCallCheck['default'];
		}, function (_npmMoment2103) {
			moment = _npmMoment2103['default'];
		}],
		execute: function () {
			'use strict';

			TreeMapNode = (function () {
				function TreeMapNode(treeMap, node, parentId) {
					_classCallCheck(this, TreeMapNode);

					// Copy over arbitrary metadata
					angular.extend(this, node);

					this.parentId = parentId;
					this._treeMap = treeMap;

					if (node.effectiveTime) {
						// Prefer long format
						this.effectiveMoment = moment(node.effectiveTime);
					} else if (node.effectiveTs) {
						// temporary since effectiveTime is not available from action call yet
						this.effectiveMoment = moment(node.effectiveTs);
					}
				}

				_createClass(TreeMapNode, [{
					key: 'getDepth',
					value: function getDepth() {
						return this.getPath().length;
					}
				}, {
					key: 'getPosition',
					value: function getPosition() {
						return this._position;
					}
				}, {
					key: 'getChildren',
					value: function getChildren() {
						var _this = this;

						return this.childIdList.map(function (childId) {
							return _this._treeMap.getNode(childId);
						});
					}
				}, {
					key: 'getParent',
					value: function getParent() {
						return this._treeMap.getNode(this.parentId);
					}
				}, {
					key: 'getPath',
					value: function getPath() {
						var path = [];
						var rootId = this._treeMap.getRootId();

						for (var node = this; node && node.id != rootId; node = node.getParent()) {
							path.push(node);
						}
						return path.reverse();
					}
				}, {
					key: 'setPosition',
					value: function setPosition(position) {
						var self = this;
						return self._position = position;
					}
				}, {
					key: 'compareTo',
					value: function compareTo(that) {
						var a = this;
						var b = that;
						var aPositions = a.getPath().map(function (node) {
							return node._position;
						});
						var bPositions = b.getPath().map(function (node) {
							return node._position;
						});

						for (var i = 0; i < aPositions.length && i < bPositions.length; ++i) {
							if (aPositions[i] != bPositions[i]) {
								return aPositions[i] - bPositions[i];
							}
						}
						return aPositions.length - bPositions.length;
					}
				}]);

				return TreeMapNode;
			})();

			_export('default', TreeMapNode);
		}
	};
});
System.register('helpers/tree-map', ['npm:babel-runtime@5.4.3/helpers/create-class', 'npm:babel-runtime@5.4.3/helpers/class-call-check', 'helpers/tree-map-node'], function (_export) {
	var _createClass, _classCallCheck, TreeMapNode, TreeMap;

	return {
		setters: [function (_npmBabelRuntime543HelpersCreateClass) {
			_createClass = _npmBabelRuntime543HelpersCreateClass['default'];
		}, function (_npmBabelRuntime543HelpersClassCallCheck) {
			_classCallCheck = _npmBabelRuntime543HelpersClassCallCheck['default'];
		}, function (_helpersTreeMapNode) {
			TreeMapNode = _helpersTreeMapNode['default'];
		}],
		execute: function () {
			'use strict';

			TreeMap = (function () {
				// initNodeMap:
				//   contains a map of id -> { id, parentId, childIdList }
				//   contains one well-defined key 'root' -> id of the rooted tree

				function TreeMap(initNodeMap, rootId, collapseFn, comparatorFn) {
					_classCallCheck(this, TreeMap);

					this.rootId = rootId;
					this.nodeMap = {};
					this.init(initNodeMap, this.rootId, null, collapseFn, comparatorFn);
				}

				_createClass(TreeMap, [{
					key: 'init',

					// Recursively walk the tree for all connected elements and return array containing current node
					// at each step if a node is collapsed, instead return the nodes created by the children
					value: function init(initNodeMap, nodeId, parentId, collapseFn, comparatorFn) {
						var _this = this;

						var node = initNodeMap[nodeId];
						if (nodeId == this.rootId) {
							this.nodeMap[this.rootId] = new TreeMapNode(this, node, parentId);
						}

						if (angular.isFunction(collapseFn) && collapseFn(node)) {
							if (!node.childIdList) {
								node.childIdList = [];
							}
							// If it's a collapse node, just return the initialized children results instead
							return angular.element.map(node.childIdList, function (childId) {
								// childId represents the child id under a collapsed parent we want to init
								return _this.init(initNodeMap, childId, parentId, collapseFn, comparatorFn);
							});
						}

						var tmNode = this.nodeMap[node.id] = new TreeMapNode(this, node, parentId);
						this.initChildren(initNodeMap, tmNode, collapseFn, comparatorFn);
						return tmNode;
					}
				}, {
					key: 'initChildren',
					value: function initChildren(initNodeMap, parentNode, collapseFn, comparatorFn) {
						var _this2 = this;

						if (!parentNode.childIdList) {
							parentNode.childIdList = [];
						}
						// For each child, initialize them and get their TreeMapNode(s) back
						// Use jQuery's map to flatten list of each child node/nodes
						var includedChildNodes = angular.element.map(parentNode.childIdList, function (childId) {
							return _this2.init(initNodeMap, childId, parentNode.id, collapseFn, comparatorFn);
						});

						// Sort child nodes if a compareFn is provided
						if (angular.isFunction(comparatorFn)) {
							includedChildNodes.sort(comparatorFn);
						}

						// Index nodes according to their final position
						includedChildNodes.forEach(function (node, i) {
							return node.setPosition(i);
						});

						// Resync the childrenId list
						parentNode.childIdList = includedChildNodes.map(function (node) {
							return node.id;
						});
					}
				}, {
					key: 'getRootId',

					// Get tree root id
					value: function getRootId() {
						return this.rootId;
					}
				}, {
					key: 'getRootNode',

					// Get a promise to root node
					value: function getRootNode() {
						return this.getNode(this.rootId);
					}
				}, {
					key: 'getNode',

					// Get promise to arbitrary tree node
					value: function getNode(nodeId) {
						return this.nodeMap[nodeId];
					}
				}]);

				return TreeMap;
			})();

			_export('default', TreeMap);
		}
	};
});
System.register('promo-manager/layout-view/layout-view-camera', ['npm:babel-runtime@5.4.3/helpers/create-class', 'npm:babel-runtime@5.4.3/helpers/class-call-check', 'npm:gl-matrix@2.3.1', 'helpers/storage', 'promo-manager/layout-view/layout-view-consts'], function (_export) {
	var _createClass, _classCallCheck, glMatrix, Storage, LayoutConsts, vec3, vec4, mat4, Camera;

	return {
		setters: [function (_npmBabelRuntime543HelpersCreateClass) {
			_createClass = _npmBabelRuntime543HelpersCreateClass['default'];
		}, function (_npmBabelRuntime543HelpersClassCallCheck) {
			_classCallCheck = _npmBabelRuntime543HelpersClassCallCheck['default'];
		}, function (_npmGlMatrix231) {
			glMatrix = _npmGlMatrix231['default'];
		}, function (_helpersStorage) {
			Storage = _helpersStorage['default'];
		}, function (_promoManagerLayoutViewLayoutViewConsts) {
			LayoutConsts = _promoManagerLayoutViewLayoutViewConsts['default'];
		}],
		execute: function () {
			'use strict';

			vec3 = glMatrix.vec3;
			vec4 = glMatrix.vec4;
			mat4 = glMatrix.mat4;

			Camera = (function () {
				function Camera() {
					_classCallCheck(this, Camera);

					var restoreMatrix = this.restore();
					if (restoreMatrix) {
						this.cameraSpaceMat4 = restoreMatrix;
					} else {
						this.cameraSpaceMat4 = mat4.identity(mat4.create());
					}
				}

				_createClass(Camera, [{
					key: 'translate',
					value: function translate(tx, ty, tz) {
						var transform1 = mat4.identity(mat4.create());
						mat4.translate(transform1, transform1, vec4.fromValues(-tx, -ty, -tz, 1));
						mat4.multiply(this.cameraSpaceMat4, transform1, this.cameraSpaceMat4);
					}
				}, {
					key: 'scale',
					value: function scale(sx, sy, sz) {
						var transform1 = mat4.identity(mat4.create());
						mat4.scale(transform1, transform1, vec4.fromValues(sx, sy, sz, 1));
						mat4.multiply(this.cameraSpaceMat4, transform1, this.cameraSpaceMat4);
					}
				}, {
					key: 'scaleAbout',
					value: function scaleAbout(sx, sy, sz, tx, ty, tz) {
						this.translate(tx, ty, tz);
						this.scale(sx, sy, sz);
						this.translate(-tx, -ty, -tz);
					}
				}, {
					key: 'setPosition',
					value: function setPosition(tx, ty, tz) {
						mat4.identity(this.cameraSpaceMat4);
						this.translate(tx, ty, tz);
					}
				}, {
					key: 'getMatrix',
					value: function getMatrix() {
						return this.cameraSpaceMat4;
					}
				}, {
					key: 'save',

					// UPDATE LOCAL STORAGE (jStorage?)
					// WITH THE NEW CAMERA POSITION
					value: function save() {
						Storage.setRecord(LayoutConsts.MODE_CAMERA, this.getMatrix());
					}
				}, {
					key: 'restore',
					value: function restore() {
						var matrix = Storage.getRecord(LayoutConsts.MODE_CAMERA);
						if (matrix) {
							return matrix;
						}
						return null;
					}
				}, {
					key: 'delete',
					value: function _delete() {
						Storage.deleteRecord(LayoutConsts.MODE_CAMERA);
					}
				}, {
					key: 'getInverse',
					value: function getInverse() {
						var inverse = mat4.identity(mat4.create());
						mat4.invert(inverse, this.getMatrix());
						return inverse;
					}
				}], [{
					key: 'printMatrix',
					value: function printMatrix(m) {
						console.log(m[4 * 0 + 0], m[4 * 1 + 0], m[4 * 2 + 0], m[4 * 3 + 0]);
						console.log(m[4 * 0 + 1], m[4 * 1 + 1], m[4 * 2 + 1], m[4 * 3 + 1]);
						console.log(m[4 * 0 + 2], m[4 * 1 + 2], m[4 * 2 + 2], m[4 * 3 + 2]);
						console.log(m[4 * 0 + 3], m[4 * 1 + 3], m[4 * 2 + 3], m[4 * 3 + 3]);
						console.log('---------------------');
					}
				}]);

				return Camera;
			})();

			_export('default', Camera);
		}
	};
});
System.register('promo-manager/layout-view/helpers/page-version-grip-ui', ['npm:babel-runtime@5.4.3/helpers/inherits', 'npm:babel-runtime@5.4.3/helpers/get', 'npm:babel-runtime@5.4.3/helpers/create-class', 'npm:babel-runtime@5.4.3/helpers/class-call-check', 'npm:babel-runtime@5.4.3/helpers/sliced-to-array', 'npm:gl-matrix@2.3.1', 'promo-manager/layout-view/layout-view-consts', 'promo-manager/layout-view/helpers/layout-view-ui-element'], function (_export) {
	var _inherits, _get, _createClass, _classCallCheck, _slicedToArray, glMatrix, LayoutViewConsts, LayoutViewUiElement, vec3, vec4, mat4, PageVersionGripUi;

	return {
		setters: [function (_npmBabelRuntime543HelpersInherits) {
			_inherits = _npmBabelRuntime543HelpersInherits['default'];
		}, function (_npmBabelRuntime543HelpersGet) {
			_get = _npmBabelRuntime543HelpersGet['default'];
		}, function (_npmBabelRuntime543HelpersCreateClass) {
			_createClass = _npmBabelRuntime543HelpersCreateClass['default'];
		}, function (_npmBabelRuntime543HelpersClassCallCheck) {
			_classCallCheck = _npmBabelRuntime543HelpersClassCallCheck['default'];
		}, function (_npmBabelRuntime543HelpersSlicedToArray) {
			_slicedToArray = _npmBabelRuntime543HelpersSlicedToArray['default'];
		}, function (_npmGlMatrix231) {
			glMatrix = _npmGlMatrix231['default'];
		}, function (_promoManagerLayoutViewLayoutViewConsts) {
			LayoutViewConsts = _promoManagerLayoutViewLayoutViewConsts['default'];
		}, function (_promoManagerLayoutViewHelpersLayoutViewUiElement) {
			LayoutViewUiElement = _promoManagerLayoutViewHelpersLayoutViewUiElement['default'];
		}],
		execute: function () {
			'use strict';

			vec3 = glMatrix.vec3;
			vec4 = glMatrix.vec4;
			mat4 = glMatrix.mat4;

			PageVersionGripUi = (function (_LayoutViewUiElement) {
				function PageVersionGripUi(pageVersion) {
					_classCallCheck(this, PageVersionGripUi);

					_get(Object.getPrototypeOf(PageVersionGripUi.prototype), 'constructor', this).call(this);
					this.pageVersion = pageVersion;
					this.type = LayoutViewConsts.TYPE_PAGE_GRIP;
					//context menu
					this.open = false;
					this.header = this.pageVersion.name;
				}

				_inherits(PageVersionGripUi, _LayoutViewUiElement);

				_createClass(PageVersionGripUi, [{
					key: 'calculateWorldSpaceCoordinates',
					value: function calculateWorldSpaceCoordinates(worldTransformMat4) {
						var objectSpacePoints = this.getObjectSpacePoints();

						var _getTransformedPoints = this.getTransformedPoints(objectSpacePoints, worldTransformMat4);

						var _getTransformedPoints2 = _slicedToArray(_getTransformedPoints, 2);

						this._worldVec0 = _getTransformedPoints2[0];
						this._worldVec1 = _getTransformedPoints2[1];

						var _worldVec0 = _slicedToArray(this._worldVec0, 3);

						this._worldX0 = _worldVec0[0];
						this._worldY0 = _worldVec0[1];
						this._worldZ0 = _worldVec0[2];
						var _temp = this._worldVec1;

						var _temp2 = _slicedToArray(_temp, 3);

						this._worldX1 = _temp2[0];
						this._worldY1 = _temp2[1];
						this._worldZ1 = _temp2[2];
						_temp;
					}
				}, {
					key: 'calculateCameraSpaceCoordinates',
					value: function calculateCameraSpaceCoordinates(cameraMat4) {
						// [Grips's CameraVec4] = [CameraMat4] * [Grip's WorldVec4]
						var worldSpacePoints = this.getWorldSpacePoints();

						var _getTransformedPoints3 = this.getTransformedPoints(worldSpacePoints, cameraMat4);

						var _getTransformedPoints32 = _slicedToArray(_getTransformedPoints3, 2);

						this._cameraVec0 = _getTransformedPoints32[0];
						this._cameraVec1 = _getTransformedPoints32[1];

						// Convert CameraVec4 into css styles
						var v0 = this._cameraVec0;
						var v1 = this._cameraVec1;

						this._cameraSpaceStyles = {
							'transform': 'translate(' + v0[0] + 'px, ' + v0[1] + 'px)',
							'-ms-transform': 'translate(' + v0[0] + 'px, ' + v0[1] + 'px)',
							'-webkit-transform': 'translate(' + v0[0] + 'px, ' + v0[1] + 'px)',
							'width': v1[0] - v0[0] + 1,
							'height': v1[1] - v0[1] + 1,
							'z-index': Math.floor(v0[2] + 1)
						};
						// FIXME - if subpixel blurring/aliasing is not a problem and all
						// supported browsers can handle the 2d/3d transforms, use that
					}
				}, {
					key: 'getObjectSpacePoints',

					// [ObjectVec4]
					value: function getObjectSpacePoints() {
						var h = LayoutViewConsts.PAGE_GRIP_HEIGHT_FACTOR;
						return [vec4.fromValues(0, -h, 0, 1), vec4.fromValues(1, 0, 0, 1)];
					}
				}, {
					key: 'getWorldSpacePoints',

					// [WorldVec4]
					value: function getWorldSpacePoints() {
						return [vec4.clone(this._worldVec0), vec4.clone(this._worldVec1)];
					}
				}, {
					key: 'getTransformedPoints',

					// [TransformMat4] * [PointVec4]
					value: function getTransformedPoints(points, transformMat4) {
						return points.map(function (pointVec4) {
							return vec4.transformMat4(pointVec4, pointVec4, transformMat4);
						});
					}
				}, {
					key: 'updateStyles',
					value: function updateStyles(cameraMat4) {}
				}]);

				return PageVersionGripUi;
			})(LayoutViewUiElement);

			_export('default', PageVersionGripUi);
		}
	};
});

// based on this.pageVersion, update coordinates
System.register('promo-manager/layout-view/helpers/layout-view', ['npm:babel-runtime@5.4.3/helpers/create-class', 'npm:babel-runtime@5.4.3/helpers/class-call-check', 'npm:babel-runtime@5.4.3/core-js/map', 'promo-manager/layout-view/vehicle-version', 'promo-manager/layout-view/layout-model', 'promo-manager/layout-view/page-version', 'promo-manager/layout-view/helpers/page-ui', 'promo-manager/layout-view/market-to-page-versionId-manager', 'helpers/tree-map', 'helpers/notifier', 'helpers/util'], function (_export) {
    var _createClass, _classCallCheck, _Map, VehicleVersion, LayoutModel, PageVersion, PageUi, MarketToPageVersionIdManager, TreeMap, Notifier, Util, LayoutView;

    return {
        setters: [function (_npmBabelRuntime543HelpersCreateClass) {
            _createClass = _npmBabelRuntime543HelpersCreateClass['default'];
        }, function (_npmBabelRuntime543HelpersClassCallCheck) {
            _classCallCheck = _npmBabelRuntime543HelpersClassCallCheck['default'];
        }, function (_npmBabelRuntime543CoreJsMap) {
            _Map = _npmBabelRuntime543CoreJsMap['default'];
        }, function (_promoManagerLayoutViewVehicleVersion) {
            VehicleVersion = _promoManagerLayoutViewVehicleVersion['default'];
        }, function (_promoManagerLayoutViewLayoutModel) {
            LayoutModel = _promoManagerLayoutViewLayoutModel['default'];
        }, function (_promoManagerLayoutViewPageVersion) {
            PageVersion = _promoManagerLayoutViewPageVersion['default'];
        }, function (_promoManagerLayoutViewHelpersPageUi) {
            PageUi = _promoManagerLayoutViewHelpersPageUi['default'];
        }, function (_promoManagerLayoutViewMarketToPageVersionIdManager) {
            MarketToPageVersionIdManager = _promoManagerLayoutViewMarketToPageVersionIdManager['default'];
        }, function (_helpersTreeMap) {
            TreeMap = _helpersTreeMap['default'];
        }, function (_helpersNotifier) {
            Notifier = _helpersNotifier['default'];
        }, function (_helpersUtil) {
            Util = _helpersUtil['default'];
        }],
        execute: function () {
            'use strict';

            LayoutView = (function () {
                function LayoutView($q, API, viewport, layoutViewCamera, context, $translate) {
                    _classCallCheck(this, LayoutView);

                    this.done = false;
                    this.API = API;
                    this.Notifier = new Notifier($translate);
                    this.$translate = $translate;
                    this.vehicleId = context.vehicleId;
                    this.vehicleVersions = null; // VehicleVersions[]
                    this.selectedVehicleVersion = null; // VehicleVersion
                    this.selectedLayoutVersionIndex = 0;
                    this.selectedLayoutVersionId = null;
                    this.viewport = viewport;
                    this.layoutViewCamera = layoutViewCamera;
                    this.$q = $q;
                    this.context = context;

                    this.getLayout();
                }

                _createClass(LayoutView, [{
                    key: 'initLayout',
                    value: function initLayout() {}
                }, {
                    key: 'getLayout',
                    value: function getLayout() {
                        var _this = this;

                        this.loadVehicleVersions(this.vehicleId).then(function () {
                            _this.loadLayoutModel().then(function () {
                                _this.loadLayoutPageVersions().then(function () {
                                    _this.loadMerchandiseHierarchies().then(function () {
                                        _this.done = true;
                                    });
                                });
                            });
                        }).then(null, function () {
                            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                                args[_key] = arguments[_key];
                            }

                            _this.reportProblems.apply(_this, args);
                        });
                    }
                }, {
                    key: 'getPageUi',
                    value: function getPageUi() {
                        return this.pageUi;
                    }
                }, {
                    key: 'getNewLayoutVersionForVehicle',
                    value: function getNewLayoutVersionForVehicle(selectedLayoutVersionId) {
                        var _this2 = this;

                        if (!selectedLayoutVersionId) {
                            return;
                        }
                        angular.forEach(this.vehicleVersions, function (version, k) {
                            if (version.id == selectedLayoutVersionId) {
                                _this2.selectedVehicleVersion = version; // VehicleVersion
                                _this2.selectedLayoutVersionIndex = 0; // reset to first layout version
                            }
                        });
                        this.getLayout();
                    }
                }, {
                    key: 'getNewLayoutVersion',
                    value: function getNewLayoutVersion(selectedLayoutVersionId) {
                        if (!selectedLayoutVersionId) {
                            return;
                        }
                        this.selectedLayoutVersionId = selectedLayoutVersionId;
                        this.selectedLayoutVersionIndex = this.layoutModel.getLayoutVersionIndex(selectedLayoutVersionId);
                        this.loadLayoutPageVersions();
                    }
                }, {
                    key: 'loadVehicleVersions',
                    value: function loadVehicleVersions() {
                        var _this3 = this;

                        if (this.vehicleVersions) {
                            return this.$q.when(this.vehicleVersions);
                        }
                        var promise = this.API.PromoManager.Common.getVehicleVersionList(this.vehicleId).then(function (result) {
                            _this3.vehicleVersions = result.data.data.map(function (vehicleVersion) {
                                return new VehicleVersion(vehicleVersion);
                            });
                            // Data constraint: vehicleVersions.length > 0
                            _this3.selectedVehicleVersion = angular.copy(_this3.vehicleVersions[0]);
                        }, function (reason) {
                            _this3.Notifier.warn(_this3.$translate.instant('LAYOUT_VIEW_DATA_ERROR_PAGE_VERSION'));
                        });
                        return promise;
                    }
                }, {
                    key: 'loadLayoutModel',
                    value: function loadLayoutModel() {
                        var _this4 = this;

                        this.pageUi = null;
                        this.pageVersions = new _Map(); // Map<pageVersionId, PageVersion>
                        this.layoutModel = null;
                        this.marketToPageVersionIdManager = new MarketToPageVersionIdManager(); // MarketToPageVersionIdManager (Map<marketId,Set<pageVersionId>>)
                        var promise = this.API.PromoManager.LayoutView.getLayout(this.selectedVehicleVersion.id).then(function (result) {
                            _this4.layoutModel = new LayoutModel(result.data.data.layout);
                            _this4.selectedLayoutVersionId = _this4.layoutModel.getLayoutVersionIdList()[0];
                        }, function (reason) {
                            _this4.Notifier.warn(_this4.$translate.instant('LAYOUT_VIEW_DATA_ERROR_PAGE_LAYOUT'));
                        });
                        return promise;
                    }
                }, {
                    key: 'loadLayoutPageVersions',
                    value: function loadLayoutPageVersions() {
                        var _this5 = this;

                        // FIXME
                        // verify ASSERT that version numbers in layout.layoutsVersionMap is [0...n-1]
                        // i.e. CONTIGUOUS, otherwise we need a way to specify a default selection
                        // layout-view/layout.getLayoutVersion.action
                        var layoutId = this.layoutModel.id;
                        var layoutMarketsList = this.layoutModel.getMarketsByIndex(this.selectedLayoutVersionIndex);
                        var list = [];
                        if (layoutMarketsList.length) {
                            layoutMarketsList.forEach(function (market) {
                                list.push({ id: market });
                            });
                        }
                        var promise = this.API.PromoManager.LayoutView.getLayoutVersion(layoutId, list).then(function (result) {
                            var gridVersionMap = result.data.data.gridVersionMap;
                            _this5.pageBuider(gridVersionMap);
                        }, function (reason) {
                            _this5.Notifier.warn(_this5.$translate.instant('LAYOUT_VIEW_DATA_ERROR_PAGE_LAYOUT_VERSION'));
                        });

                        return promise;
                    }
                }, {
                    key: 'updatePages',
                    value: function updatePages(page) {
                        var _this6 = this;

                        if (!page) {
                            return;
                        }
                        var promise = this.API.PromoManager.LayoutView.updatePages(page).then(function (result) {
                            var updatedPageList = result.data.data.updatedPageIdList[0];
                            var updatePageList = page.layoutPageList[0];
                            if (updatedPageList != updatePageList.id) {
                                _this6.Notifier.warn(_this6.$translate.instant('LAYOUT_VIEW_DATA_ERROR_PAGE_UPDATE'));
                            }
                            _this6.getLayout();
                        }, function (reason) {
                            _this6.Notifier.warn(_this6.$translate.instant('LAYOUT_VIEW_DATA_ERROR_PAGE_UPDATE_ERROR'));
                            _this6.getLayout();
                        });
                        return promise;
                    }
                }, {
                    key: 'addPages',
                    value: function addPages(id, pages) {
                        var _this7 = this;

                        var promise = this.API.PromoManager.LayoutView.addPages(id, pages).then(function (result) {
                            _this7.addPagesToLayout(result.data.data.addedPageList);
                        }, function (reason) {
                            _this7.Notifier.warn(_this7.$translate.instant('LAYOUT_VIEW_DATA_ERROR_PAGE_UPDATE_ERROR'));
                            _this7.getLayout();
                        });
                        return promise;
                    }
                }, {
                    key: 'deletePages',
                    value: function deletePages(pages) {
                        var _this8 = this;

                        if (!pages) {
                            return;
                        }
                        var promise = this.API.PromoManager.LayoutView.removePages(pages).then(function (result) {
                            _this8.getLayout();
                        }, function (reason) {
                            _this8.Notifier.warn(_this8.$translate.instant('LAYOUT_VIEW_DATA_ERROR_PAGE_DELETE_ERROR'));
                            _this8.getLayout();
                        });
                        return promise;
                    }
                }, {
                    key: 'clearTemplate',
                    value: function clearTemplate(pages) {
                        var _this9 = this;

                        if (!pages) {
                            return;
                        }
                        var promise = this.API.PromoManager.LayoutView.clearTemplates(pages).then(function (result) {
                            _this9.getPagesForVersions(result.data.data.updatedPageGridVersionIdList);
                        }, function (reason) {
                            _this9.Notifier.warn(_this9.$translate.instant('LAYOUT_VIEW_DATA_ERROR_PAGE_CLEAR_TEMPLATE_ERROR'));
                            _this9.getLayout();
                        });
                        return promise;
                    }
                }, {
                    key: 'applyTemplate',
                    value: function applyTemplate(pages) {
                        var _this10 = this;

                        if (!pages) {
                            return;
                        }
                        var promise = this.API.PromoManager.LayoutView.applyTemplate(pages).then(function (result) {
                            _this10.getPagesForVersions(result.data.data.updatedPageGridVersionIdList);
                        }, function (reason) {
                            _this10.Notifier.warn(_this10.$translate.instant('LAYOUT_VIEW_DATA_ERROR_PAGE_CLEAR_TEMPLATE_ERROR'));
                            _this10.getLayout();
                        });
                        return promise;
                    }
                }, {
                    key: 'updatePageVersions',
                    value: function updatePageVersions(pages) {
                        var _this11 = this;

                        if (!pages) {
                            return;
                        }
                        var promise = this.API.PromoManager.LayoutView.updatePageGridVersions(pages).then(function (result) {
                            _this11.getPagesForVersions(result.data.data.updatedPageGridVersionIdList);
                        }, function (reason) {
                            _this11.Notifier.warn(_this11.$translate.instant('LAYOUT_VIEW_DATA_ERROR_PAGE_VERSION_UPDATE_ERROR'));
                            _this11.getLayout();
                        });
                        return promise;
                    }
                }, {
                    key: 'loadPageVersion',
                    value: function loadPageVersion(pageVersionId) {
                        var _this12 = this;

                        var promise = this.API.PromoManager.LayoutView.loadPageGridVersion(pageVersionId).then(function (result) {
                            return result.data;
                        }, function (reason) {
                            _this12.Notifier.warn(_this12.$translate.instant('LAYOUT_VIEW_DATA_ERROR_PAGE_VERSION_LOAD_ERROR'));
                            _this12.getLayout();
                        });
                        return promise;
                    }
                }, {
                    key: 'updateBlock',
                    value: function updateBlock(blocks, pageVersionId) {
                        var _this13 = this;

                        if (!blocks) {
                            return;
                        }
                        var promise = this.API.PromoManager.LayoutView.updateGridVersionBlocks(blocks).then(function (result) {
                            //load the revised page
                            _this13.getPagesForVersions([{ id: pageVersionId }]);
                        }, function (reason) {
                            _this13.Notifier.warn(_this13.$translate.instant('LAYOUT_VIEW_DATA_ERROR_BLOCK_UPDATE_ERROR'));
                            _this13.getLayout();
                        });
                        return promise;
                    }
                }, {
                    key: 'loadBlock',
                    value: function loadBlock(blockId) {
                        var _this14 = this;

                        var promise = this.API.PromoManager.LayoutView.loadGridVersionBlock(blockId).then(function (result) {
                            return result.data;
                        }, function (reason) {
                            _this14.Notifier.warn(_this14.$translate.instant('LAYOUT_VIEW_DATA_ERROR_BLOCK_LOAD_ERROR'));
                            _this14.getLayout();
                        });
                        return promise;
                    }
                }, {
                    key: 'getChannels',
                    value: function getChannels() {
                        var _this15 = this;

                        var promise = this.API.PromoManager.Common.getChannelList().then(function (result) {
                            return result.data;
                        }, function (reason) {
                            _this15.Notifier.warn(_this15.$translate.instant('DATA_ERROR_CHANNEL_LOAD_ERROR'));
                        });
                        return promise;
                    }
                }, {
                    key: 'loadMerchandiseHierarchies',
                    value: function loadMerchandiseHierarchies() {
                        var _this16 = this;

                        if (this.merchandiseHierarchy) {
                            return this.$q.when(this.merchandiseHierarchy);
                        }
                        var promise = this.API.Common.getMerchandiseHierarchy({
                            filter: {
                                excludeDeleted: true,
                                currentUserOnly: true
                            }
                        }).then(function (result) {
                            var hm = result.data.data.merchandiseHierarchy;
                            var rt = result.data.data.merchandiseHierarchyRootId;
                            var sl = result.data.data.showLevels.sort();
                            var df = result.data.data.displayFormat;

                            _this16.merchandiseHierarchy = new TreeMap(hm, rt, function (node) {
                                return Util.binarySearch(sl, node.level) < 0;
                            }, function (a, b) {
                                return a.name.localeCompare(b.name);
                            });

                            _this16.merchandiseHierarchy.displayFormat = df;
                            _this16.merchandiseHierarchy.showLevels = sl;

                            _this16.hierarchyId = _this16.merchandiseHierarchy.getRootId();
                        }, function (reason) {
                            _this16.Notifier.warn(_this16.$translate.instant('MERCHANDISE_HIERARCHY_MAP_LOAD_ERROR'));
                        });
                        return promise;
                    }
                }, {
                    key: 'pageBuider',
                    value: function pageBuider(gridVersionMap) {
                        var _this17 = this;

                        var pageList = this.layoutModel.pageList;
                        this.viewport.clearRtreeObjects();
                        var gridVersions = [];

                        var _loop = function (pageId) {
                            pageList.forEach(function (page) {
                                if (page.id == pageId) {
                                    gridVersions[page.id] = page;
                                }
                            });

                            var pageVersion = new PageVersion(gridVersionMap[pageId], gridVersions[pageId]);
                            _this17.pageVersions.set(pageVersion.id, pageVersion);
                            _this17.marketToPageVersionIdManager.add(pageVersion);
                            // FIXME: Think about how world coordinates for spread groups
                            // will be handled - the depedencies might not necessarily
                            // be loaded in order - perhaps a second pass after all
                            // PageVersion objects have been created might be in order...
                        };

                        for (var pageId in gridVersionMap) {
                            _loop(pageId);
                        }
                        // Initialize the camera coordinates for all PageVersion entities
                        this.pageUi = new PageUi(this.selectedLayoutVersionIndex, this.layoutModel, this.marketToPageVersionIdManager, this.pageVersions, this.viewport);
                        this.pageUi.updateWorldSpaceCoordinates(this.layoutViewCamera);
                        this.viewport.insertRtreeObjects(this.pageUi.getPageVersionsForSelectedLayoutVersion());
                    }
                }, {
                    key: 'hasHierarchy',
                    value: function hasHierarchy(obj, filter) {

                        if (obj.pageVersion && obj.pageVersion.blockList && obj.pageVersion.blockList.length) {
                            return obj.pageVersion.blockList.some(this.blockContainsHierarchy, [this, filter]);
                        } else if (obj.blockList && obj.blockList.length) {
                            return obj.blockList.some(this.blockContainsHierarchy, [this, filter]);
                        } else {
                            return this.containsHierarchy(obj, filter);
                        }
                    }
                }, {
                    key: 'blockContainsHierarchy',
                    value: function blockContainsHierarchy(block, index, array) {
                        var self = this[0];
                        var filter = this[1];
                        return self.containsHierarchy(block, filter);
                    }
                }, {
                    key: 'containsHierarchy',
                    value: function containsHierarchy(obj, filter) {
                        var has = false;
                        if (obj.offerVersion && obj.offerVersion.hierarchyId > 1) {
                            has = this.hierarchyTreeSearch(obj.offerVersion.hierarchyId, filter);
                        }
                        if (!has && obj.hierarchyId && obj.hierarchyId > 1) {
                            has = this.hierarchyTreeSearch(obj.hierarchyId, filter);
                        }
                        return has;
                    }
                }, {
                    key: 'hierarchyTreeSearch',
                    value: function hierarchyTreeSearch(hierarchyId, filter) {
                        var node = this.merchandiseHierarchy.getNode(hierarchyId);
                        var filterNode = this.merchandiseHierarchy.getNode(filter);
                        var path = node.getPath();
                        var found = false;
                        angular.forEach(path, function (treeNode, i) {
                            if (treeNode.level == filterNode.level && filter == treeNode.id) {
                                found = true;
                            }
                        });
                        return found;
                    }
                }, {
                    key: 'getPagesInViewport',
                    value: function getPagesInViewport() {
                        var cameraToWorldMat4 = this.layoutViewCamera.getInverse();
                        var vp = $('#layout-viewport');
                        var pages = this.viewport.getPagesInViewport(cameraToWorldMat4, vp);
                        return pages;
                    }
                }, {
                    key: 'getViewport',
                    value: function getViewport() {
                        var cameraToWorldMat4 = this.layoutViewCamera.getInverse();
                        var viewport = $('#layout-viewport');
                        return this.viewport.getViewport(cameraToWorldMat4, viewport);
                    }
                }, {
                    key: 'getLayoutModel',
                    value: function getLayoutModel() {
                        return this.layoutModel;
                    }
                }, {
                    key: 'getMarketIdList',
                    value: function getMarketIdList() {
                        return this.layoutModel.getMarketsByIndex(this.selectedLayoutVersionIndex);
                    }
                }, {
                    key: 'addPagesToLayout',
                    value: function addPagesToLayout(pages) {
                        var _this18 = this;

                        pages.forEach(function (page) {
                            _this18.layoutModel.addPageToLayout(page);
                        });
                        this.getPageVersions(pages);
                    }
                }, {
                    key: 'getPagesForVersions',
                    value: function getPagesForVersions(pageVersionList) {
                        var _this19 = this;

                        var layoutPageList = [];
                        pageVersionList.forEach(function (pageVersionId) {
                            var pvId = angular.isObject(pageVersionId) ? pageVersionId.id : pageVersionId;
                            var page = _this19.pageUi.getPageVersionDetailsForVersionId(pvId);
                            layoutPageList.push(page);
                        });
                        this.getPageVersions(layoutPageList);
                    }
                }, {
                    key: 'getPageVersions',
                    value: function getPageVersions(pages) {
                        var _this20 = this;

                        var layoutPageList = [];
                        var marketIdList = [];
                        var markets = this.getMarketIdList();
                        markets.forEach(function (market) {
                            marketIdList.push({
                                id: market
                            });
                        });
                        pages.forEach(function (page) {
                            layoutPageList.push({
                                id: page.id });
                        });

                        var promise = this.API.PromoManager.LayoutView.getPageVersion(layoutPageList, marketIdList).then(function (result) {
                            _this20.pageBuider(result.data.data.gridVersionMap);
                        }, function (reason) {
                            _this20.Notifier.warn(_this20.$translate.instant('LAYOUT_VIEW_DATA_ERROR_PAGE_VERSION_GET_ERROR'));
                            _this20.getLayout();
                        });
                        return promise;
                    }
                }, {
                    key: 'haveChangeRequestAssociations',
                    value: function haveChangeRequestAssociations(id) {
                        var _this21 = this;

                        var layoutPageList = [{
                            id: id
                        }];
                        var promise = this.API.PromoManager.LayoutView.haveChangeRequestAssociations(layoutPageList).then(function (result) {
                            return result.data;
                        }, function (reason) {
                            _this21.Notifier.warn(_this21.$translate.instant('LAYOUT_VIEW_DATA_ERROR_PAGE_HAS_CHANGE_ASSOCIATIONS_ERROR'));
                        });
                        return promise;
                    }
                }, {
                    key: 'haveChangeRequestAssociationsGrid',
                    value: function haveChangeRequestAssociationsGrid(id) {
                        var _this22 = this;

                        var pageGridVersionList = [{
                            id: id
                        }];
                        var promise = this.API.PromoManager.LayoutView.haveChangeRequestAssociationsGrid(pageGridVersionList).then(function (result) {
                            return result.data;
                        }, function (reason) {
                            _this22.Notifier.warn(_this22.$translate.instant('LAYOUT_VIEW_DATA_ERROR_PAGE_HAS_CHANGE_ASSOCIATIONS_GRID_ERROR'));
                        });
                        return promise;
                    }
                }, {
                    key: 'haveOffers',
                    value: function haveOffers(id) {
                        var _this23 = this;

                        var layoutPageList = [{
                            id: id
                        }];
                        var promise = this.API.PromoManager.LayoutView.haveOffers(layoutPageList).then(function (result) {
                            return result.data;
                        }, function (reason) {
                            _this23.Notifier.warn(_this23.$translate.instant('LAYOUT_VIEW_DATA_ERROR_PAGE_HAS_OFFERS_ERROR'));
                        });
                        return promise;
                    }
                }, {
                    key: 'haveOffersGrid',
                    value: function haveOffersGrid(id) {
                        var _this24 = this;

                        var pageGridVersionList = [{
                            id: id
                        }];
                        var promise = this.API.PromoManager.LayoutView.haveOffersGrid(pageGridVersionList).then(function (result) {
                            return result.data;
                        }, function (reason) {
                            _this24.Notifier.warn(_this24.$translate.instant('LAYOUT_VIEW_DATA_ERROR_PAGE_HAS_OFFERS_GRID_ERROR'));
                        });
                        return promise;
                    }
                }, {
                    key: 'moveOffersToParkingLot',
                    value: function moveOffersToParkingLot(id) {
                        var _this25 = this;

                        var layoutPageList = [{
                            id: id
                        }];
                        var promise = this.API.PromoManager.LayoutView.moveOffersToParkingLot(layoutPageList).then(function (result) {
                            return result.data;
                        }, function (reason) {
                            _this25.Notifier.warn(_this25.$translate.instant('LAYOUT_VIEW_DATA_ERROR_PAGE_MOVE_OFFERS_TO_PARKING_LOT_ERROR'));
                        });
                        return promise;
                    }
                }, {
                    key: 'moveOffersToParkingLotGrid',
                    value: function moveOffersToParkingLotGrid(id) {
                        var _this26 = this;

                        var pageGridVersionList = [{
                            id: id
                        }];
                        var promise = this.API.PromoManager.LayoutView.moveOffersToParkingLotGrid(pageGridVersionList).then(function (result) {
                            _this26.getPagesForVersions(result.data.data.updatedPageGridVersionIdList);
                        }, function (reason) {
                            _this26.Notifier.warn(_this26.$translate.instant('LAYOUT_VIEW_DATA_ERROR_PAGE_MOVE_OFFERS_TO_PARKING_LOT_GRID_ERROR'));
                        });
                        return promise;
                    }
                }, {
                    key: 'getTemplates',
                    value: function getTemplates(templateNameSearchString, channel, startingIndex, limit) {
                        var _this27 = this;

                        var qry = {};
                        qry.startingIndex = startingIndex || 0;
                        qry.limit = limit || null;
                        qry.channel = channel || this.getChannel();
                        qry.templateNameSearchString = templateNameSearchString || null;
                        var promise = this.API.PromoManager.LayoutView.loadTemplates(qry).then(function (result) {
                            return result.data;
                        }, function (reason) {
                            _this27.Notifier.warn(_this27.$translate.instant('DATA_ERROR_TEMPLATE_LOAD_ERROR'));
                        });
                        return promise;
                    }
                }, {
                    key: 'getChannel',
                    value: function getChannel() {
                        return { id: this.layoutModel.getChannel(), name: this.context.channelCode };
                    }
                }, {
                    key: 'reportProblems',
                    value: function reportProblems(reason) {
                        console.log(reason);
                    }
                }]);

                return LayoutView;
            })();

            _export('default', LayoutView);
        }
    };
});
System.register('promo-manager/layout-view/page-version', ['npm:babel-runtime@5.4.3/helpers/create-class', 'npm:babel-runtime@5.4.3/helpers/class-call-check', 'npm:babel-runtime@5.4.3/helpers/sliced-to-array', 'npm:gl-matrix@2.3.1', 'promo-manager/layout-view/layout-view-consts', 'promo-manager/layout-view/block', 'promo-manager/layout-view/block-group-to-blockId-manager', 'promo-manager/layout-view/helpers/page-version-grip-ui', 'promo-manager/layout-view/permitted-action'], function (_export) {
	var _createClass, _classCallCheck, _slicedToArray, glMatrix, LayoutViewConsts, Block, BlockGroupToBlockIdManager, PageVersionGripUi, PermittedAction, vec3, vec4, mat4, PageVersion;

	return {
		setters: [function (_npmBabelRuntime543HelpersCreateClass) {
			_createClass = _npmBabelRuntime543HelpersCreateClass['default'];
		}, function (_npmBabelRuntime543HelpersClassCallCheck) {
			_classCallCheck = _npmBabelRuntime543HelpersClassCallCheck['default'];
		}, function (_npmBabelRuntime543HelpersSlicedToArray) {
			_slicedToArray = _npmBabelRuntime543HelpersSlicedToArray['default'];
		}, function (_npmGlMatrix231) {
			glMatrix = _npmGlMatrix231['default'];
		}, function (_promoManagerLayoutViewLayoutViewConsts) {
			LayoutViewConsts = _promoManagerLayoutViewLayoutViewConsts['default'];
		}, function (_promoManagerLayoutViewBlock) {
			Block = _promoManagerLayoutViewBlock['default'];
		}, function (_promoManagerLayoutViewBlockGroupToBlockIdManager) {
			BlockGroupToBlockIdManager = _promoManagerLayoutViewBlockGroupToBlockIdManager['default'];
		}, function (_promoManagerLayoutViewHelpersPageVersionGripUi) {
			PageVersionGripUi = _promoManagerLayoutViewHelpersPageVersionGripUi['default'];
		}, function (_promoManagerLayoutViewPermittedAction) {
			PermittedAction = _promoManagerLayoutViewPermittedAction['default'];
		}],
		execute: function () {
			'use strict';

			vec3 = glMatrix.vec3;
			vec4 = glMatrix.vec4;
			mat4 = glMatrix.mat4;

			PageVersion = (function () {
				function PageVersion(data, page) {
					var _this = this;

					_classCallCheck(this, PageVersion);

					var blockList = [];
					if (data.blockList) {
						blockList = data.blockList;
					}
					this.type = LayoutViewConsts.TYPE_PAGE;
					this.id = data.id;
					this.name = data.name;
					this.description = data.description;
					this.position = page.position; // Remember to modify BY REFERENCE
					this.dimension = { w: data.pageWidth, h: data.pageHeight, d: 0 };
					this.unit = data.unit;
					this.unitToPixelRatio = LayoutViewConsts.LAYOUT_VIEW_UNITS[this.unit];
					this.marketIds = data.versionMarketIdList;
					this.page = page; // Parent reference
					this.blockMap = new BlockGroupToBlockIdManager();
					this.blockList = blockList.map(function (blockData) {
						var block = new Block(blockData, _this.page);
						angular.forEach(blockData.blockGroupMap, function (bgm, k) {
							_this.blockMap.addBlockGroup(bgm.id, bgm.name, bgm.blockIdList);
						});
						return block;
					});
					if (data.permittedActions) {
						this.permittedActions = $.map(data.permittedActions, function (name, action) {
							return new PermittedAction(name, action);
						});
					}

					if (this.position.x || this.position.y) {
						this.ui = {
							grip: new PageVersionGripUi(this)
						};
					}
				}

				_createClass(PageVersion, [{
					key: 'isActiveChangeRequest',
					value: function isActiveChangeRequest() {
						return this.blockList.some(function (block) {
							return block.isActiveChangeRequest();
						});
					}
				}, {
					key: 'hasOffers',
					value: function hasOffers() {
						return this.blockList.some(function (block) {
							return block.hasOffers();
						});
					}
				}, {
					key: 'getObjectSpacePoints',

					// [ObjectVec4]
					value: function getObjectSpacePoints() {
						return [vec4.fromValues(0, 0, 0, 1), vec4.fromValues(1, 1, 0, 1)];
					}
				}, {
					key: 'getWorldSpacePoints',

					// [WorldVec4]
					value: function getWorldSpacePoints() {
						return [vec4.clone(this._worldVec0), vec4.clone(this._worldVec1)];
					}
				}, {
					key: 'getTransformedPoints',

					// [TransformMat4] * [PointVec4]
					value: function getTransformedPoints(points, transformMat4) {
						return points.map(function (pointVec4) {
							return vec4.transformMat4(pointVec4, pointVec4, transformMat4);
						});
					}
				}, {
					key: 'calculateWorldSpaceCoordinates',

					// Calculate world space coordinates for the page and underlying entities
					// Full calculation:
					//     [CameraVec4] = [CameraMat4] * [TranslateMat4] * [ScaleMat4] * [ObjectVec4]
					// World space step:
					//     [WorldTransformMat4] = [TranslateMat4] * [ScaleMat4]
					//     [WorldVec4] = [WorldTransformMat4] * [ObjectVec4]
					// Camera space step:
					//     [CameraVec4] = [CameraMat4] * [WorldVec4]
					// Note: ObjectVec4 represents the two Vec4's representing the
					// top-left and bottom-right of the entity's rectangle
					value: function calculateWorldSpaceCoordinates() {
						var pos = this.position;
						var dim = this.dimension;
						var unitRatio = this.unitToPixelRatio;
						var worldTransformMat4 = mat4.identity(mat4.create());
						// [WorldTransformMat4] = [TranslateMat4] * [ScaleMat4]
						mat4.translate(worldTransformMat4, worldTransformMat4, vec4.fromValues(pos.x, pos.y, pos.z, 1));
						mat4.scale(worldTransformMat4, worldTransformMat4, vec3.fromValues(dim.w * unitRatio, dim.h * unitRatio, 1));

						// Calculate world space coordinates for [Blocks]
						// [Block's WorldVec4] = [WorldTransformMat4] * [BlockVec4]
						this.blockList.forEach(function (block) {
							block.calculateWorldSpaceCoordinates(worldTransformMat4);
						});

						// Calculate world space coordinates for the [Page]
						// [Page's WorldVec4] = [WorldTransformMat4] * [PageVec4]
						var objectSpacePoints = this.getObjectSpacePoints();

						var _getTransformedPoints = this.getTransformedPoints(objectSpacePoints, worldTransformMat4);

						var _getTransformedPoints2 = _slicedToArray(_getTransformedPoints, 2);

						this._worldVec0 = _getTransformedPoints2[0];
						this._worldVec1 = _getTransformedPoints2[1];

						var _worldVec0 = _slicedToArray(this._worldVec0, 3);

						this._worldX0 = _worldVec0[0];
						this._worldY0 = _worldVec0[1];
						this._worldZ0 = _worldVec0[2];

						var _worldVec1 = _slicedToArray(this._worldVec1, 3);

						this._worldX1 = _worldVec1[0];
						this._worldY1 = _worldVec1[1];
						this._worldZ1 = _worldVec1[2];

						//Recalculate Page Version Grip UI World space coordinates
						this.ui.grip.calculateWorldSpaceCoordinates(worldTransformMat4);
					}
				}, {
					key: 'calculateCameraSpaceCoordinates',
					value: function calculateCameraSpaceCoordinates(cameraMat4) {
						// [Block's CameraVec4] = [CameraMat4] * [Block's WorldVec4]
						this.blockList.forEach(function (block) {
							block.calculateCameraSpaceCoordinates(cameraMat4);
						});

						// [Page's CameraVec4] = [CameraMat4] * [Page's WorldVec4]
						var worldSpacePoints = this.getWorldSpacePoints();

						var _getTransformedPoints3 = this.getTransformedPoints(worldSpacePoints, cameraMat4);

						var _getTransformedPoints32 = _slicedToArray(_getTransformedPoints3, 2);

						this._cameraVec0 = _getTransformedPoints32[0];
						this._cameraVec1 = _getTransformedPoints32[1];

						// Convert CameraVec4 into css styles
						var v0 = this._cameraVec0;
						var v1 = this._cameraVec1;

						this._cameraSpaceStyles = {
							'transform': 'translate(' + v0[0] + 'px, ' + v0[1] + 'px)',
							'-ms-transform': 'translate(' + v0[0] + 'px, ' + v0[1] + 'px)',
							'-webkit-transform': 'translate(' + v0[0] + 'px, ' + v0[1] + 'px)',
							'width': v1[0] - v0[0] + 1,
							'height': v1[1] - v0[1] + 1,
							'z-index': Math.floor(v0[2])
							// FIXME - if subpixel blurring/aliasing is not a problem and all
							// supported browsers can handle the 2d/3d transforms, use that
						};

						//Recalculate Page Version Grip UI Camera space coordinates
						this.ui.grip.calculateCameraSpaceCoordinates(cameraMat4);
					}
				}, {
					key: 'updateStyles',
					value: function updateStyles(cameraMat4) {
						this.calculateCameraSpaceCoordinates(cameraMat4);
					}
				}, {
					key: 'getPageNumber',
					value: function getPageNumber() {
						return this.page.getPageNumber();
					}
				}, {
					key: 'isInSpreadGroup',
					value: function isInSpreadGroup() {
						return this.page.isInSpreadGroup();
					}
				}, {
					key: 'getPageName',
					value: function getPageName() {
						return this.name;
					}
				}, {
					key: 'getPageId',
					value: function getPageId() {
						return this.page.getPageId();
					}
				}, {
					key: 'getPageVersionId',
					value: function getPageVersionId() {
						return this.id;
					}
				}, {
					key: 'getZindex',
					value: function getZindex() {
						return this.position.z;
					}
				}, {
					key: 'getPosX',
					value: function getPosX() {
						return this.position.x;
					}
				}, {
					key: 'getPosY',
					value: function getPosY() {
						return this.position.y;
					}
				}, {
					key: 'getPos',
					value: function getPos() {
						return this.position;
					}
				}, {
					key: 'prepareForExportPageUpdate',
					value: function prepareForExportPageUpdate(pageVersion) {

						var format = {
							layoutPageList: [{
								id: pageVersion.page.id,
								position: pageVersion.page.index,
								x: pageVersion.position.x,
								y: pageVersion.position.y,
								z: pageVersion.position.z
							}]

						};
						return format;
					}
				}, {
					key: 'prepareForExportPageVersionUpdate',
					value: function prepareForExportPageVersionUpdate(pageGridVersion, originalPageGridVersion) {
						var dataChange = false;
						var gridVersion = {
							id: pageGridVersion.id
						};
						var x = undefined;
						for (x in pageGridVersion) {
							if (originalPageGridVersion[x] != pageGridVersion[x] && x != 'merchandiseHierarchyList' && x != 'layoutPage') {
								dataChange = true;
								gridVersion[x] = pageGridVersion[x];
							}
							if (x == 'merchandiseHierarchyList' && originalPageGridVersion[x] && originalPageGridVersion[x].id != pageGridVersion[x].id) {
								dataChange = true;
								gridVersion[x] = pageGridVersion[x];
							}
						}
						if (!dataChange) {
							return null;
						}

						return { pageGridVersionList: [gridVersion] };
					}
				}, {
					key: 'prepareForExportPageVersionDelete',
					value: function prepareForExportPageVersionDelete(pageId, moveOffers) {
						var format = {
							layoutPageList: [{
								id: pageId
							}],
							moveOffersToParkingLot: moveOffers
						};
						return format;
					}
				}, {
					key: 'prepareForExportPageVersionClearTemplate',
					value: function prepareForExportPageVersionClearTemplate(pageVersionId, moveOffers) {
						var format = {
							pageGridVersionList: [{
								id: pageVersionId
							}],
							moveOffersToParkingLot: moveOffers
						};
						return format;
					}
				}, {
					key: 'prepareForExportPageVersionApplyTemplate',
					value: function prepareForExportPageVersionApplyTemplate(template, pageVersionId, moveOffers) {
						var format = {
							pageLayoutTemplate: {
								id: template
							},
							pageGridVersionList: [{
								id: pageVersionId
							}],
							moveOffersToParkingLot: moveOffers
						};
						return format;
					}
				}]);

				return PageVersion;
			})();

			_export('default', PageVersion);
		}
	};
});
System.register('helpers/util', ['npm:babel-runtime@5.4.3/helpers/create-class', 'npm:babel-runtime@5.4.3/helpers/class-call-check', 'npm:babel-runtime@5.4.3/core-js/map', 'helpers/consts'], function (_export) {
	var _createClass, _classCallCheck, _Map, Consts, Util;

	return {
		setters: [function (_npmBabelRuntime543HelpersCreateClass) {
			_createClass = _npmBabelRuntime543HelpersCreateClass['default'];
		}, function (_npmBabelRuntime543HelpersClassCallCheck) {
			_classCallCheck = _npmBabelRuntime543HelpersClassCallCheck['default'];
		}, function (_npmBabelRuntime543CoreJsMap) {
			_Map = _npmBabelRuntime543CoreJsMap['default'];
		}, function (_helpersConsts) {
			Consts = _helpersConsts['default'];
		}],
		execute: function () {
			'use strict';

			Util = (function () {
				function Util() {
					_classCallCheck(this, Util);
				}

				_createClass(Util, null, [{
					key: 'binarySearch',
					value: function binarySearch(a, k, compareFn) {
						if (compareFn == Consts.STRING_COMPARATOR_FUNCTION && !angular.isFunction(compareFn)) {
							compareFn = Util[Consts.STRING_COMPARATOR_FUNCTION];
						}
						if (!angular.isFunction(compareFn)) {
							compareFn = Util.defaultComparator;
						}
						var left = 0;
						var right = a.length - 1;
						while (left <= right) {
							var mid = Math.floor(0.5 * (left + right));
							var cmp = compareFn(a[mid], k);
							if (cmp < 0) {
								left = mid + 1;
							} else if (cmp > 0) {
								right = mid - 1;
							} else {
								return mid;
							}
						}
						return -(left + 1);
					}
				}, {
					key: 'getFromSortedArray',
					value: function getFromSortedArray(a, obj, compareFn) {
						if (compareFn == Consts.STRING_COMPARATOR_FUNCTION && !angular.isFunction(compareFn)) {
							compareFn = Util[Consts.STRING_COMPARATOR_FUNCTION];
						}
						if (!angular.isFunction(compareFn)) {
							compareFn = Util.defaultComparator;
						}
						var searchIdx = Util.binarySearch(a, obj, compareFn);
						if (searchIdx >= 0) {
							return a[searchIdx];
						}
						return undefined;
					}
				}, {
					key: 'insertIntoSortedArray',
					value: function insertIntoSortedArray(a, obj, compareFn) {
						if (compareFn == Consts.STRING_COMPARATOR_FUNCTION && !angular.isFunction(compareFn)) {
							compareFn = Util[Consts.STRING_COMPARATOR_FUNCTION];
						}
						if (!angular.isFunction(compareFn)) {
							compareFn = Util.defaultComparator;
						}

						var searchIdx = Util.binarySearch(a, obj, compareFn);
						var insertIdx = searchIdx >= 0 ? searchIdx : -(searchIdx + 1);
						a.splice(insertIdx, 0, obj);
					}
				}, {
					key: 'insertIntoUniqueSortedArray',
					value: function insertIntoUniqueSortedArray(a, obj, compareFn) {
						if (compareFn == Consts.STRING_COMPARATOR_FUNCTION && !angular.isFunction(compareFn)) {
							compareFn = Util[Consts.STRING_COMPARATOR_FUNCTION];
						}
						if (!angular.isFunction(compareFn)) {
							compareFn = Util.defaultComparator;
						}

						var searchIdx = Util.binarySearch(a, obj, compareFn);
						if (searchIdx < 0) {
							a.splice(-(searchIdx + 1), 0, obj);
						}
					}
				}, {
					key: 'removeFromSortedArray',
					value: function removeFromSortedArray(a, obj, compareFn) {
						if (compareFn == Consts.STRING_COMPARATOR_FUNCTION && !angular.isFunction(compareFn)) {
							compareFn = Util[Consts.STRING_COMPARATOR_FUNCTION];
						}
						if (!angular.isFunction(compareFn)) {
							compareFn = Util.defaultComparator;
						}

						var searchIdx = Util.binarySearch(a, obj, compareFn);
						if (searchIdx >= 0) {
							return a.splice(searchIdx, 1)[0];
						}
						return false;
					}
				}, {
					key: 'removeFromUnsortedArray',
					value: function removeFromUnsortedArray(a, obj) {
						var idx = a.indexOf(obj);
						if (idx >= 0) {
							a.splice(idx, 1);
						}
					}
				}, {
					key: 'clamp',

					// Assumes numeric input
					// Clamps x within the range [min, max]
					value: function clamp(x, min, max) {
						return Math.max(Math.min(x, max), min);
					}
				}, {
					key: 'removeElement',

					// Returns removed element if found or undefined if not found
					value: function removeElement(array, target) {
						var idx = array.indexOf(target);
						if (idx >= 0) {
							return array.splice(idx, 1);
						}
						return undefined;
					}
				}, {
					key: 'removeDuplicateElements',

					// Returns array with unique elements
					value: function removeDuplicateElements(array) {
						var a = array;
						for (var i = 0; i < a.length; ++i) {
							for (var j = i + 1; j < a.length; ++j) {
								if (a[i] === a[j]) {
									a.splice(j--, 1);
								}
							}
						}
						return a;
					}
				}, {
					key: 'mergeRemoveDuplicateElements',

					// merges an array then returns array with unique elements
					value: function mergeRemoveDuplicateElements(array) {
						var a = array.concat();
						for (var i = 0; i < a.length; ++i) {
							for (var j = i + 1; j < a.length; ++j) {
								if (a[i] === a[j]) a.splice(j--, 1);
							}
						}
						return a;
					}
				}, {
					key: 'debounce',

					// Create an es6 version of some ng-tasty services
					value: function debounce() {
						return function (func, wait, immediate) {
							var args, context, debounceTimeout, timeout;
							debounceTimeout = function () {
								timeout = null;
								if (!immediate) {
									func.apply(context, args);
								}
							};
							return function debounce() {
								context = this;
								args = arguments;
								var callNow = immediate && !timeout;
								clearTimeout(timeout);
								timeout = setTimeout(debounceTimeout, wait);
								if (callNow) {
									func.apply(context, args);
								}
							};
						};
					}
				}, {
					key: 'throttle',
					value: function throttle() {
						return function (fn, threshhold, scope) {
							threshhold = threshhold || 250;
							var last, promise;
							return function throttle() {
								var context = scope || this;
								var now = Date.now(),
								    args = arguments;
								if (last && now < last + threshhold) {
									// hold on to it
									clearTimeout(promise);
									promise = setTimeout(function throttleTimeout() {
										last = now;
										fn.apply(context, args);
									}, threshhold);
								} else {
									last = now;
									fn.apply(context, args);
								}
							};
						};
					}
				}, {
					key: 'objectAsMap',
					value: function objectAsMap(data, mapper) {
						var m = new _Map();
						angular.forEach(data, function (v, k) {
							m.set(k, angular.isFunction(mapper) ? mapper(v) : v);
						});
						return m;
					}
				}, {
					key: 'arrayAsMap',

					// Reverse mapping from [ a, b, c ] to { a: 0, b: 1, c: 2 }
					value: function arrayAsMap(data) {
						var m = new _Map();
						data.forEach(function (ele, i) {
							m.set(ele, i);
						});
						return m;
					}
				}, {
					key: 'camelize',
					value: function camelize(str) {
						return str.replace(/^([A-Z])|[\s-_](\w)/g, function (match, p1, p2, offset) {
							if (p2) {
								return p2.toUpperCase();
							}
							return p1.toLowerCase();
						});
					}
				}, {
					key: 'defaultComparator',
					value: function defaultComparator(a, b) {
						return a - b;
					}
				}, {
					key: 'stringComparator',
					value: function stringComparator(a, b) {
						return a.localeCompare(b);
					}
				}]);

				return Util;
			})();

			_export('default', Util);
		}
	};
});
System.register('promo-manager/layout-view/helpers/viewport', ['npm:babel-runtime@5.4.3/helpers/create-class', 'npm:babel-runtime@5.4.3/helpers/class-call-check', 'npm:babel-runtime@5.4.3/helpers/sliced-to-array', 'npm:rbush@1.4.0', 'npm:gl-matrix@2.3.1', 'promo-manager/layout-view/page-version', 'promo-manager/layout-view/helpers/page-version-grip-ui', 'promo-manager/layout-view/layout-view-consts'], function (_export) {
    var _createClass, _classCallCheck, _slicedToArray, rbush, glMatrix, PageVersion, PageVersionGripUi, LayoutViewConsts, vec4, mat4, Viewport;

    return {
        setters: [function (_npmBabelRuntime543HelpersCreateClass) {
            _createClass = _npmBabelRuntime543HelpersCreateClass['default'];
        }, function (_npmBabelRuntime543HelpersClassCallCheck) {
            _classCallCheck = _npmBabelRuntime543HelpersClassCallCheck['default'];
        }, function (_npmBabelRuntime543HelpersSlicedToArray) {
            _slicedToArray = _npmBabelRuntime543HelpersSlicedToArray['default'];
        }, function (_npmRbush140) {
            rbush = _npmRbush140['default'];
        }, function (_npmGlMatrix231) {
            glMatrix = _npmGlMatrix231['default'];
        }, function (_promoManagerLayoutViewPageVersion) {
            PageVersion = _promoManagerLayoutViewPageVersion['default'];
        }, function (_promoManagerLayoutViewHelpersPageVersionGripUi) {
            PageVersionGripUi = _promoManagerLayoutViewHelpersPageVersionGripUi['default'];
        }, function (_promoManagerLayoutViewLayoutViewConsts) {
            LayoutViewConsts = _promoManagerLayoutViewLayoutViewConsts['default'];
        }],
        execute: function () {
            'use strict';

            vec4 = glMatrix.vec4;
            mat4 = glMatrix.mat4;

            Viewport = (function () {
                function Viewport() {
                    _classCallCheck(this, Viewport);

                    this.layoutTree = new rbush(9, ['._worldX0', '._worldY0', '._worldX1', '._worldY1']);
                }

                _createClass(Viewport, [{
                    key: 'getPagesInViewport',
                    value: function getPagesInViewport(cameraToWorldMat4, viewport) {
                        var pages = this.layoutTree.search(this.getViewport(cameraToWorldMat4, viewport));
                        return pages.filter(function (page) {
                            return page instanceof PageVersion || page instanceof PageVersionGripUi;
                        });
                    }
                }, {
                    key: 'getViewport',
                    value: function getViewport(cameraToWorldMat4, viewport) {
                        //calculate the area x and y
                        var w = viewport.width();
                        var h = viewport.height();
                        var viewportP0Vec4 = vec4.fromValues(0, 0, 0, 1);
                        var viewportP1Vec4 = vec4.fromValues(w, h, 0, 1);

                        var _vec4$transformMat4 = vec4.transformMat4(viewportP0Vec4, viewportP0Vec4, cameraToWorldMat4);

                        var _vec4$transformMat42 = _slicedToArray(_vec4$transformMat4, 2);

                        var vx0 = _vec4$transformMat42[0];
                        var vy0 = _vec4$transformMat42[1];

                        var _vec4$transformMat43 = vec4.transformMat4(viewportP1Vec4, viewportP1Vec4, cameraToWorldMat4);

                        var _vec4$transformMat432 = _slicedToArray(_vec4$transformMat43, 2);

                        var vx1 = _vec4$transformMat432[0];
                        var vy1 = _vec4$transformMat432[1];

                        return [vx0, vy0, vx1, vy1];
                    }
                }, {
                    key: 'contains',
                    value: function contains(v) {
                        return this.layoutTree.search([v[0], v[1], v[0], v[1]]);
                    }
                }, {
                    key: 'insertRtreeObjects',
                    value: function insertRtreeObjects() {
                        for (var _len = arguments.length, objects = Array(_len), _key = 0; _key < _len; _key++) {
                            objects[_key] = arguments[_key];
                        }

                        var layoutTree = this.layoutTree;
                        objects.forEach(function (obj) {
                            if (angular.isFunction(obj.calculateWorldSpaceCoordinates)) {
                                if (obj.type == LayoutViewConsts.TYPE_PAGE) {
                                    layoutTree.insert(obj);
                                    layoutTree.insert(obj.ui.grip);
                                    obj.blockList.forEach(function (block) {
                                        layoutTree.insert(block);
                                    });
                                }
                            } else {
                                obj.forEach(function (o) {
                                    if (o.type == LayoutViewConsts.TYPE_PAGE) {
                                        layoutTree.insert(o);
                                        layoutTree.insert(o.ui.grip);
                                        o.blockList.forEach(function (block) {
                                            layoutTree.insert(block);
                                        });
                                    }
                                });
                            }
                        });
                    }
                }, {
                    key: 'removeRtreeObjects',
                    value: function removeRtreeObjects() {
                        for (var _len2 = arguments.length, objects = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
                            objects[_key2] = arguments[_key2];
                        }

                        var layoutTree = this.layoutTree;
                        objects.forEach(function (obj) {
                            if (angular.isFunction(obj.calculateWorldSpaceCoordinates)) {
                                if (obj.type == LayoutViewConsts.TYPE_PAGE) {
                                    layoutTree.remove(obj);
                                    layoutTree.remove(obj.ui.grip);
                                    obj.blockList.forEach(function (block) {
                                        layoutTree.insert(block);
                                    });
                                }
                            } else {
                                obj.forEach(function (o) {
                                    if (o.type == LayoutViewConsts.TYPE_PAGE) {
                                        layoutTree.remove(o);
                                        layoutTree.remove(o.ui.grip);
                                        o.blockList.forEach(function (block) {
                                            layoutTree.remove(block);
                                        });
                                    }
                                });
                            }
                        });
                    }
                }, {
                    key: 'clearRtreeObjects',
                    value: function clearRtreeObjects() {
                        this.layoutTree.clear();
                    }
                }]);

                return Viewport;
            })();

            _export('default', Viewport);
        }
    };
});
System.register('promo-manager/layout-view/layout-view-controller', ['npm:babel-runtime@5.4.3/helpers/create-class', 'npm:babel-runtime@5.4.3/helpers/class-call-check', 'promo-manager/layout-view/layout-view-camera', 'helpers/util', 'promo-manager/layout-view/helpers/viewport', 'promo-manager/layout-view/helpers/layout-view', 'promo-manager/layout-view/helpers/input-handler', 'promo-manager/helpers/item-search', 'promo-manager/layout-view/helpers/add-pages-modal', 'promo-manager/layout-view/helpers/index-pages-modal', 'promo-manager/layout-view/helpers/edit-page-modal', 'promo-manager/layout-view/helpers/edit-block-modal', 'promo-manager/layout-view/layout-view-consts'], function (_export) {
    var _createClass, _classCallCheck, Camera, Util, Viewport, LayoutView, InputHandler, ItemSearch, AddPagesModal, IndexPagesModal, EditPageModal, EditBlockModal, LayoutConsts, $, LayoutViewController;

    return {
        setters: [function (_npmBabelRuntime543HelpersCreateClass) {
            _createClass = _npmBabelRuntime543HelpersCreateClass['default'];
        }, function (_npmBabelRuntime543HelpersClassCallCheck) {
            _classCallCheck = _npmBabelRuntime543HelpersClassCallCheck['default'];
        }, function (_promoManagerLayoutViewLayoutViewCamera) {
            Camera = _promoManagerLayoutViewLayoutViewCamera['default'];
        }, function (_helpersUtil) {
            Util = _helpersUtil['default'];
        }, function (_promoManagerLayoutViewHelpersViewport) {
            Viewport = _promoManagerLayoutViewHelpersViewport['default'];
        }, function (_promoManagerLayoutViewHelpersLayoutView) {
            LayoutView = _promoManagerLayoutViewHelpersLayoutView['default'];
        }, function (_promoManagerLayoutViewHelpersInputHandler) {
            InputHandler = _promoManagerLayoutViewHelpersInputHandler['default'];
        }, function (_promoManagerHelpersItemSearch) {
            ItemSearch = _promoManagerHelpersItemSearch.ItemSearch;
        }, function (_promoManagerLayoutViewHelpersAddPagesModal) {
            AddPagesModal = _promoManagerLayoutViewHelpersAddPagesModal.AddPagesModal;
        }, function (_promoManagerLayoutViewHelpersIndexPagesModal) {
            IndexPagesModal = _promoManagerLayoutViewHelpersIndexPagesModal.IndexPagesModal;
        }, function (_promoManagerLayoutViewHelpersEditPageModal) {
            EditPageModal = _promoManagerLayoutViewHelpersEditPageModal.EditPageModal;
        }, function (_promoManagerLayoutViewHelpersEditBlockModal) {
            EditBlockModal = _promoManagerLayoutViewHelpersEditBlockModal.EditBlockModal;
        }, function (_promoManagerLayoutViewLayoutViewConsts) {
            LayoutConsts = _promoManagerLayoutViewLayoutViewConsts['default'];
        }],
        execute: function () {
            'use strict';

            $ = angular.element;

            LayoutViewController = (function () {
                function LayoutViewController($scope, $q, $translate, API, $uiModal) {
                    _classCallCheck(this, LayoutViewController);

                    this.API = API;
                    this.$q = $q;
                    this.$modal = $uiModal;
                    this.viewport = new Viewport();
                    this.pageUi = null;
                    this.cardObject = null;
                    this.layoutViewCamera = new Camera();
                    this.inputEvents = ['mousedown', 'wheel', 'keydown'].sort(Util.stringComparator);
                    //context is bound to the controller from outside the application
                    if (!this.context) {
                        this.context = {};
                    }
                    this.merchandiseHierarchyId = null;
                    this.merchandiseHierarchySelectionLabels = [$translate.instant('OFFERS_LIST_ALL_SBUS'), $translate.instant('OFFERS_LIST_ALL_DEPARTMENTS'), $translate.instant('OFFERS_LIST_ALL_CATEGORIES')];
                    this.merchandiseHierarchyLabels = [$translate.instant('OFFERS_LIST_SBU'), $translate.instant('OFFERS_LIST_DEPARTMENT'), $translate.instant('OFFERS_LIST_CATEGORY')];
                    this.merchandiseHierarchySelectionLabelFilters = [$translate.instant('OFFERS_LIST_ALL_SBUS_FILTER'), $translate.instant('OFFERS_LIST_ALL_DEPARTMENTS'), $translate.instant('OFFERS_LIST_ALL_CATEGORIES')];
                    this.close = false;
                    // TODO: Store a spatial partitioning layoutTree containing the WORLD SPACE
                    // location of each block in the current view.
                    //   On Page/Block Spatial Change:
                    //     Added/Move/Resize/Deleted Page
                    //     Added/Resize/Split/Join/Deleted Block  (Add/Delete via Apply/Delete Template)
                    //     Remove object from tree and re-add with new position
                    //   On Market Change (or mass invalidate):
                    //     Just rebuild from scratch when switching between
                    //     markets to simplify state management a bit.

                    this.API = API;
                    this.layoutView = new LayoutView(this.$q, this.API, this.viewport, this.layoutViewCamera, this.context, // this is loaded from outside the application
                    $translate);
                }

                _createClass(LayoutViewController, [{
                    key: 'handleInputs',
                    value: function handleInputs($event) {
                        if (!this.pageUi) {
                            this.pageUi = this.layoutView.getPageUi();
                            this.inputHandler = new InputHandler(this.pageUi, this.viewport, this.layoutView, this.inputEvents, this.layoutViewCamera);
                        }

                        switch ($event.type) {
                            case 'wheel':
                                this.inputHandler.handleWheelEvent($event);break;
                            case 'keydown':
                                this.inputHandler.handleKeyEvent($event);break;
                            case 'mousedown':
                                this.inputHandler.handleDragStartEvent($event);break;
                            case 'mousemove':
                                this.inputHandler.handleDragMoveEvent($event);break;
                            case 'mouseup':
                                this.inputHandler.handleDragStopEvent($event);break;
                        }
                        this.cardObject = this.inputHandler.getCardObject();
                    }
                }, {
                    key: 'getPagesInViewport',
                    value: function getPagesInViewport() {
                        //load root into merchandise hierarchy after data is loaded
                        if (!this.merchandiseHierarchyId) {
                            this.merchandiseHierarchyId = this.layoutView.merchandiseHierarchy.getRootId();
                        }

                        return this.layoutView.getPagesInViewport();
                    }
                }, {
                    key: 'updateSelectedVehicleVersion',
                    value: function updateSelectedVehicleVersion(selectedLayoutVersionId) {
                        if (selectedLayoutVersionId) {
                            this.layoutView.getNewLayoutVersionForVehicle(selectedLayoutVersionId);
                        }
                    }
                }, {
                    key: 'updateSelectedLayoutVersion',
                    value: function updateSelectedLayoutVersion(selectedLayoutVersionId) {
                        if (selectedLayoutVersionId) {
                            this.layoutView.getNewLayoutVersion(selectedLayoutVersionId);
                        }
                    }
                }, {
                    key: 'getBlockModalHandler',
                    value: function getBlockModalHandler(action, block, pageVersion) {
                        //most actions at the block level are performed in the legacy code
                        // check to see if the legacy context object has an entry for the action
                        if (this.context.legacyHooks && this.context.legacyHooks[action]) {

                            // adBlockId: 810
                            // channel: "printMedia"
                            // displayType: NaN
                            // isWorkflowLocked: "false"
                            // loadFromContextMenu: true
                            // merchandiseHierarchy: NaN
                            // offerId: -1
                            // rfcCanModify: "false"
                            // rfcCanRequest: "true"
                            // rfcId: NaN
                            var ctxMenu = {
                                adBlockId: block.id,
                                channel: this.context.channelCode,
                                offerId: block.offerVersion ? block.offerVersion.getOffer().id : -1
                            };
                            this.context.legacyHooks[action](ctxMenu);
                            return;
                        }

                        var fn = Util.camelize('open-' + action + '-modal');
                        // find object (using this)
                        fn = this[fn];
                        // is object a function?
                        if (typeof fn === 'function') {
                            //run it
                            fn.apply(null, [block, pageVersion, this]);
                        }
                    }
                }, {
                    key: 'getPageVersionModalHandler',
                    value: function getPageVersionModalHandler(action, pageVersion) {
                        // for context menu items, read the permitted actios and find/run the required funtion
                        var fn = Util.camelize('open-' + action + '-modal');
                        // find object (using this)
                        fn = this[fn];
                        // is object a function?
                        if (typeof fn === 'function') {
                            //run it
                            fn.apply(null, [pageVersion, this]); // "this" is lost during the apply, so take it with us
                        }
                    }
                }, {
                    key: 'getPageModalHandler',
                    value: function getPageModalHandler(action) {
                        // for page level actions, read the permitted actions and find/run the required funtion
                        var fn = Util.camelize('open-' + action + '-modal');
                        // find object (using this)
                        fn = this[fn];
                        // is object a function?
                        if (typeof fn === 'function') {
                            //run it
                            fn.apply(null, [this]); // "this" is lost during the apply, so take it with us
                        }
                    }
                }, {
                    key: 'isDisabled',

                    // if the user has selected a filter by a specific MH, then disable non matching
                    value: function isDisabled(obj) {
                        if (!this.merchandiseHierarchyId || this.merchandiseHierarchyId == this.layoutView.merchandiseHierarchy.getRootId()) {
                            return false;
                        }
                        return !this.layoutView.hasHierarchy(obj, this.merchandiseHierarchyId);
                    }
                }, {
                    key: 'openItemSearchModal',

                    // this is for testing only -- remove this and attach to the offer wizard
                    value: function openItemSearchModal() {
                        ItemSearch.open(this.$scope, this.$modal, this.$translate, this.layoutView);
                    }
                }, {
                    key: 'openAddPageModal',

                    //pages      
                    value: function openAddPageModal(self) {
                        AddPagesModal.open(self.$scope, self.$modal, self.$translate, self.layoutView);
                    }
                }, {
                    key: 'openReOrderModal',
                    value: function openReOrderModal(self) {
                        IndexPagesModal.open(self.$scope, self.$modal, self.$translate, self.layoutView);
                    }
                }, {
                    key: 'openAllocateGridModal',

                    //page versions      
                    value: function openAllocateGridModal(pageVersion, self) {
                        EditPageModal.open(self.$scope, self.$modal, self.$translate, self.layoutView, pageVersion, LayoutConsts.EDIT_MODE);
                    }
                }, {
                    key: 'openPageLevelEditModal',

                    // dup of above, remove when actions settle down      
                    value: function openPageLevelEditModal(pageVersion, self) {
                        EditPageModal.open(self.$scope, self.$modal, self.$translate, self.layoutView, pageVersion, LayoutConsts.EDIT_MODE);
                    }
                }, {
                    key: 'openAddDeletePageModal',
                    value: function openAddDeletePageModal(pageVersion, self) {
                        if (pageVersion.isInSpreadGroup()) {
                            this.layoutView.Notifier.error('LAYOUT_VIEW_DELETE_PAGE_SPREAD_GROUP_ERROR');
                            return;
                        }
                        EditPageModal.open(self.$scope, self.$modal, self.$translate, self.layoutView, pageVersion, LayoutConsts.DELETE_MODE);
                    }
                }, {
                    key: 'openDeletePageModal',
                    value: function openDeletePageModal(pageVersion, self) {
                        if (pageVersion.isInSpreadGroup()) {
                            this.layoutView.Notifier.error('LAYOUT_VIEW_DELETE_PAGE_SPREAD_GROUP_ERROR');
                            return;
                        }
                        EditPageModal.open(self.$scope, self.$modal, self.$translate, self.layoutView, pageVersion, LayoutConsts.DELETE_MODE);
                    }
                }, {
                    key: 'openClearTemplateModal',
                    value: function openClearTemplateModal(pageVersion, self) {
                        EditPageModal.open(self.$scope, self.$modal, self.$translate, self.layoutView, pageVersion, LayoutConsts.TEMPLATE_CLEAR_MODE);
                    }
                }, {
                    key: 'openImportTemplateModal',
                    value: function openImportTemplateModal(pageVersion, self) {
                        EditPageModal.open(self.$scope, self.$modal, self.$translate, self.layoutView, pageVersion, LayoutConsts.TEMPLATE_APPLY_MODE);
                    }
                }, {
                    key: 'openMoveOffersToParkingLotModal',

                    // not used, not tested      
                    value: function openMoveOffersToParkingLotModal(pageVersion, self) {
                        EditPageModal.open(self.$scope, self.$modal, self.$translate, self.layoutView, pageVersion, LayoutConsts.MOVE_OFFERS_MODE);
                    }
                }, {
                    key: 'openAddToBasketModal',

                    //blocks             
                    value: function openAddToBasketModal(block, pageVersion, self) {
                        EditBlockModal.open(self.$scope, self.$modal, self.$translate, self.layoutView, block, pageVersion, LayoutConsts.ADD_TO_BASKET_MODE);
                    }
                }, {
                    key: 'openEditAllocationModal',
                    value: function openEditAllocationModal(block, pageVersion, self) {
                        EditBlockModal.open(self.$scope, self.$modal, self.$translate, self.layoutView, block, pageVersion, LayoutConsts.EDIT_MODE);
                    }
                }]);

                return LayoutViewController;
            })();

            _export('default', LayoutViewController);

            LayoutViewController.$inject = ['$scope', '$q', '$translate', 'API', '$uiModal'];
        }
    };
});
System.register('promo-manager/layout-view/main', ['promo-manager/layout-view/styles/layout-styles.css!github:systemjs/plugin-css@0.1.13', 'promo-manager/layout-view/layout-view-controller', 'helpers/toggle-state', 'promo-manager/helpers/merchandise-hierarchy-native-selection-directive', 'promo-manager/helpers/merchandise-hierarchy-node-path', 'api/api-configurator', 'promo-manager/api/promo-manager-api-configurator', 'promo-manager/layout-view/api/layout-view-api-configurator', 'promo-manager/layout-view/layout-view-directive', 'promo-manager/layout-view/layout-view-input-directive', 'promo-manager/layout-view/helpers/thumbnail-canvas-renderer'], function (_export) {
	//import angular from 'angular';
	//import 'angular-translate';
	//import 'angular-ui/ui-bootstrap-tpls';
	//import 'bootstrap-css-only/css/bootstrap.css!';

	// import CommonConfig from '../../config/config';
	'use strict';

	//import onLayoutViewConfig from './config/config';
	//import onTranslateConfig from './config/translate-config';

	//import apiInterceptor from '../../config/api-interceptor';
	//import API from '../../api/api';
	var LayoutViewController, toggleState, merchandiseHierarchyNativeSelection, merchandiseHierarchyNodePath, CommonApiDecorator, PromoManagerApiDecorator, LayoutViewApiDecorator, layoutView, layoutViewInput, thumbnailCanvasRenderer, angularRef, mainModule, legacyModule;
	return {
		setters: [function (_promoManagerLayoutViewStylesLayoutStylesCssGithubSystemjsPluginCss0113) {}, function (_promoManagerLayoutViewLayoutViewController) {
			LayoutViewController = _promoManagerLayoutViewLayoutViewController['default'];
		}, function (_helpersToggleState) {
			toggleState = _helpersToggleState['default'];
		}, function (_promoManagerHelpersMerchandiseHierarchyNativeSelectionDirective) {
			merchandiseHierarchyNativeSelection = _promoManagerHelpersMerchandiseHierarchyNativeSelectionDirective['default'];
		}, function (_promoManagerHelpersMerchandiseHierarchyNodePath) {
			merchandiseHierarchyNodePath = _promoManagerHelpersMerchandiseHierarchyNodePath['default'];
		}, function (_apiApiConfigurator) {
			CommonApiDecorator = _apiApiConfigurator['default'];
		}, function (_promoManagerApiPromoManagerApiConfigurator) {
			PromoManagerApiDecorator = _promoManagerApiPromoManagerApiConfigurator['default'];
		}, function (_promoManagerLayoutViewApiLayoutViewApiConfigurator) {
			LayoutViewApiDecorator = _promoManagerLayoutViewApiLayoutViewApiConfigurator['default'];
		}, function (_promoManagerLayoutViewLayoutViewDirective) {
			layoutView = _promoManagerLayoutViewLayoutViewDirective['default'];
		}, function (_promoManagerLayoutViewLayoutViewInputDirective) {
			layoutViewInput = _promoManagerLayoutViewLayoutViewInputDirective['default'];
		}, function (_promoManagerLayoutViewHelpersThumbnailCanvasRenderer) {
			thumbnailCanvasRenderer = _promoManagerLayoutViewHelpersThumbnailCanvasRenderer['default'];
		}],
		execute: function () {

			// dev testing only
			// import onMockConfig from './mock-responses/mock-config';
			// import layoutViewMockResponse from './mock-responses/layout-view-mock-response-inteceptor';

			//const angularRef = ((angular && angular.module) ? angular : window.angular);
			angularRef = window.angular;
			mainModule = angularRef.module('layout-view', [
			// angular modules
			// third party modules
			'pascalprecht.translate', 'ui.bootstrap']);

			_export('mainModule', mainModule);

			//dev testing only
			// mainModule.factory('layoutViewMockResponse', layoutViewMockResponse)
			// mainModule.config(onMockConfig)
			//app

			mainModule.controller('layoutViewController', LayoutViewController);
			mainModule.directive('layoutView', layoutView);
			mainModule.directive('layoutViewInput', layoutViewInput);
			mainModule.directive('toggleState', toggleState);
			mainModule.directive('thumbnailCanvasRenderer', thumbnailCanvasRenderer);
			mainModule.directive('merchandiseHierarchyNativeSelection', merchandiseHierarchyNativeSelection);
			mainModule.filter('merchandiseHierarchyNodePath', merchandiseHierarchyNodePath);

			legacyModule = angularRef.module('crosscapApp');

			// legacyModule.config(CommonConfig)
			legacyModule.config(CommonApiDecorator);
			legacyModule.config(PromoManagerApiDecorator);
			legacyModule.config(LayoutViewApiDecorator);
			//legacyModule.config(onLayoutViewConfig)

			// TODO: When separated from synchronous codem
			//mainModule.service('API', API);
			//mainModule.config(onTranslateConfig)
			//mainModule.factory('apiInterceptor', apiInterceptor)

			console.log('Module prepared: layout-view');
		}
	};
});

// core modules	
//component modules
//state modules
System.register('promo-manager/layout-view/styles/layout-styles.css!github:systemjs/plugin-css@0.1.13', [], false, function() {});
(function(c){var d=document,a='appendChild',i='styleSheet',s=d.createElement('style');s.type='text/css';d.getElementsByTagName('head')[0][a](s);s[i]?s[i].cssText=c:s[a](d.createTextNode(c));})
(".clickable,.hyperlink,.layout-btn{cursor:pointer}#LayoutView,#LayoutView .viewport{overflow:hidden;position:absolute}[ng-cloak]{display:none}.layout-btn{background:#428bca;border:1px solid #357ebd;border-radius:3px;color:#fff;display:inline-block;font-size:14px;padding:8px 15px;text-decoration:none;text-align:center;min-width:60px;position:relative}.layout-btn:hover{text-decoration:underline;background:#357ebd}.layout-btn.layout-btn-big{font-size:18px;padding:15px 20px;min-width:75pt}.layout-btn.layout-btn-cancel{background:#42cac5;border:1px solid #35bdb8}.layout-btn.layout-btn-cancel:hover{background:#35bdb8}.layout-btn-close{color:#aaa;font-size:30px;text-decoration:none;position:absolute;right:5px;top:0;cursor:pointer}.layout-btn-close:hover{color:#919191;text-decoration:underline}.layout-btn-delete{color:#aaa;font-size:17px;text-decoration:none}.layout-modal-header h2,.layout-modal-title{font-size:20px}.layout-btn-delete:hover{color:#919191}.layout-modal-body{padding:20px}.layout-modal-footer,.layout-modal-header{padding:10px 20px}.layout-modal-header{border-bottom:#eee solid 1px}.layout-modal-footer{border-top:#eee solid 1px;text-align:right}.hyperlink{color:#00f;text-decoration:underline}.hyperlink:hover{color:#00c}body{width:100%;height:100%;padding:0;margin:0}#LayoutView{top:50px;bottom:40px;left:0;right:0}#LayoutView *{box-sizing:border-box;-moz-box-sizing:border-box;-webkit-box-sizing:border-box;cursor:default}#LayoutView .viewport{top:0;bottom:0;left:10px;right:10px;background-color:#fff;outline:#a9a9a9 solid 1px}#LayoutView .viewport.noclip{overflow:visible}#LayoutView .card{border:1px solid red;background-color:rgba(100,100,100,.8);position:absolute;width:150px;height:50px;z-index:2147483647}#LayoutView .block-grip,#LayoutView .layoutview-pageversion,#LayoutView .offer-grip,#LayoutView .pageversion-grip{border:1px solid #00f;position:absolute}#LayoutView .layoutview-pageversion{background-color:rgba(200,200,200,.8)}#LayoutView .layoutview-footer,#LayoutView .layoutview-header{width:100%;padding-right:20px;padding-left:25px}#LayoutView .layoutview-footer ul,#LayoutView .layoutview-header ul{list-style-type:none}#LayoutView .layoutview-footer li,#LayoutView .layoutview-header li{padding-bottom:3px;font-size:9pt;font-family:Arial,Helvetica,sans-serif;display:inline-block;padding-right:10px}#LayoutView .layoutview-footer .filter-mhList>div,#LayoutView .layoutview-header .filter-mhList>div{display:inline-block;margin-right:4px}#LayoutView .layoutview-footer .filter-mhList>div select,#LayoutView .layoutview-header .filter-mhList>div select{min-width:150px}#LayoutView .layoutview-footer{position:absolute;bottom:0}#LayoutView .block-grip .grip-row,#LayoutView .offer-grip .grip-row,#LayoutView .pageversion-grip .grip-row{position:absolute;width:100%;height:100%}#LayoutView .block-grip .grip-content,#LayoutView .offer-grip .grip-content,#LayoutView .pageversion-grip .grip-content{position:absolute;left:0;right:30%;height:100%}#LayoutView .block-grip .grip-menu,#LayoutView .offer-grip .grip-menu,#LayoutView .pageversion-grip .grip-menu{position:absolute;left:70%;right:0;height:100%;text-align:right}#LayoutView .block-grip .grip-menu span,#LayoutView .offer-grip .grip-menu span,#LayoutView .pageversion-grip .grip-menu span{padding-right:3px}#LayoutView .block-grip .grip-menu .grip-menu-items,#LayoutView .offer-grip .grip-menu .grip-menu-items,#LayoutView .pageversion-grip .grip-menu .grip-menu-items{background-color:#fff;position:absolute;top:100%;right:0;box-shadow:-1px 1px 2px rgba(0,0,0,.25);border-radius:2px;border:1px solid #ddd}#LayoutView .block-grip .grip-menu .grip-menu-items>div,#LayoutView .offer-grip .grip-menu .grip-menu-items>div,#LayoutView .pageversion-grip .grip-menu .grip-menu-items>div{padding:2px 10px;text-align:right;white-space:nowrap}#LayoutView .block-grip .grip-menu .grip-menu-items>div:hover,#LayoutView .offer-grip .grip-menu .grip-menu-items>div:hover,#LayoutView .pageversion-grip .grip-menu .grip-menu-items>div:hover{background-color:#f6f6f6}#LayoutView .block-grip,#LayoutView .offer-grip{border:1px solid #00f;height:10%;width:100%}#LayoutView .offer-grip{position:fixed;top:10%}#LayoutView .layoutview-block{position:absolute;border:1px solid gold}#LayoutView .layoutview-block .block-offer-grip{position:fixed;top:20%;white-space:wrap;overflow:hidden;text-overflow:ellipsis}#LayoutView .layoutview-block .block-offer-grip.drag-handle{cursor:grab;cursor:-moz-grab;cursor:-webkit-grab}#LayoutView .layoutview-block .block-offer-grip.drag-handle:active{cursor:grabbing;cursor:-moz-grabbing;cursor:-webkit-grabbing}#LayoutView .object-disabled{color:grey;background-color:rgba(0,0,0,.2);pointer-events:none}#LayoutView .object-disabled img{-webkit-filter:grayscale(100%);-moz-filter:grayscale(100%);filter:grayscale(100%)}.layout-modal-body .small-input{width:50px}.layout-modal-body .msg{font-size:18px}.layout-modal-body .info-line{font-size:9pt}.layout-modal-body .item-search-ul{list-style:none}.layout-modal-body .item-search-li{margin-left:1px}.layout-modal-body .selectedItem{background-color:#b4bdc8;border-radius:6px}.layout-modal-body .searchedItem{background-color:#e1edfa;border-radius:6px}.toast-bottom-right{left:75pt;top:200px}");
});
//# sourceMappingURL=layoutview-dist.min.js.map